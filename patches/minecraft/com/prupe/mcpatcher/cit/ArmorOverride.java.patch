--- /dev/null
+++ b/minecraft/com/prupe/mcpatcher/cit/ArmorOverride.java
@@ -0,0 +1,60 @@
+package com.prupe.mcpatcher.cit;
+
+import com.prupe.mcpatcher.mal.resource.FakeResourceLocation;
+import com.prupe.mcpatcher.mal.resource.PropertiesFile;
+import com.prupe.mcpatcher.mal.resource.TexturePackAPI;
+
+import java.util.HashMap;
+import java.util.Map;
+
+final class ArmorOverride extends OverrideBase {
+    private final Map<FakeResourceLocation, FakeResourceLocation> armorMap;
+
+    ArmorOverride(PropertiesFile properties) {
+        super(properties);
+
+        if (items == null) {
+            properties.error("no matching items specified");
+        }
+        if (textureName == null && alternateTextures == null) {
+            properties.error("no replacement textures specified");
+        }
+
+        if (alternateTextures == null) {
+            armorMap = null;
+        } else {
+            armorMap = new HashMap<FakeResourceLocation, FakeResourceLocation>();
+            for (Map.Entry<String, FakeResourceLocation> entry : alternateTextures.entrySet()) {
+                String key = entry.getKey();
+                FakeResourceLocation value = entry.getValue();
+                armorMap.put(TexturePackAPI.parseResourceLocation(CITUtils.FIXED_ARMOR_RESOURCE, key), value);
+            }
+        }
+    }
+
+    @Override
+    String getType() {
+        return "armor";
+    }
+
+    FakeResourceLocation getReplacementTexture(FakeResourceLocation origResource) {
+        if (armorMap != null) {
+            FakeResourceLocation newResource = armorMap.get(origResource);
+            if (newResource != null) {
+                return newResource;
+            }
+        }
+        return textureName;
+    }
+
+    @Override
+    String preprocessAltTextureKey(String name) {
+        if (!name.endsWith(".png")) {
+            name += ".png";
+        }
+        if (!name.contains("/")) {
+            name = "./" + name;
+        }
+        return TexturePackAPI.parseResourceLocation(CITUtils.FIXED_ARMOR_RESOURCE, name).toString();
+    }
+}
