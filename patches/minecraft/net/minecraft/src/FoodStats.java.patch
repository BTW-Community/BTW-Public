--- a/minecraft/net/minecraft/src/FoodStats.java
+++ b/minecraft/net/minecraft/src/FoodStats.java
@@ -3,38 +3,65 @@
 public class FoodStats
 {
     /** The player's food level. */
+	// FCMOD: Code change to increase food meter resolution
+	/*
     private int foodLevel = 20;
+    */
+    private int foodLevel = 60;
+    // END FCMOD
 
     /** The player's food saturation. */
+    // FCMOD: Code change so that player spawns with zero fat
+    /*
     private float foodSaturationLevel = 5.0F;
+    */
+    private float foodSaturationLevel = 0F;
+    // END FCMOD
 
     /** The player's food exhaustion. */
     private float foodExhaustionLevel;
 
     /** The player's food timer value. */
     private int foodTimer = 0;
+    
+	// FCMOD: Code change to increase food meter resolution
+	/*
     private int prevFoodLevel = 20;
+    */
+    private int prevFoodLevel = 60;
+    // END FCMOD
 
     /**
      * Args: int foodLevel, float foodSaturationModifier
      */
+    // FCMOD: Code removed and replaced later by custom function
+    /*
     public void addStats(int par1, float par2)
     {
         this.foodLevel = Math.min(par1 + this.foodLevel, 20);
         this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float)par1 * par2 * 2.0F, (float)this.foodLevel);
     }
+	*/
+	// END FCMOD
 
     /**
      * Eat some food.
      */
     public void addStats(ItemFood par1ItemFood)
     {
+    	// FCMOD: Code change
+    	/*
         this.addStats(par1ItemFood.getHealAmount(), par1ItemFood.getSaturationModifier());
+        */
+        this.addStats(par1ItemFood.GetHungerRestored(), par1ItemFood.getSaturationModifier());
+        // END FCMOD
     }
 
     /**
      * Handles the food game logic.
      */
+    // FCMOD: Code removed and replaced later by custom function
+    /*
     public void onUpdate(EntityPlayer par1EntityPlayer)
     {
         int var2 = par1EntityPlayer.worldObj.difficultySetting;
@@ -83,6 +110,8 @@
             this.foodTimer = 0;
         }
     }
+	*/
+	// END FCMOD
 
     /**
      * Reads food stats from an NBT object.
@@ -95,9 +124,29 @@
             this.foodTimer = par1NBTTagCompound.getInteger("foodTickTimer");
             this.foodSaturationLevel = par1NBTTagCompound.getFloat("foodSaturationLevel");
             this.foodExhaustionLevel = par1NBTTagCompound.getFloat("foodExhaustionLevel");
+            
+            // FCMOD: Code added
+            if ( !par1NBTTagCompound.hasKey("fcFoodLevelAdjusted"))
+            {
+            	foodLevel = foodLevel * 3;
+            	foodSaturationLevel = 0F;
         }
+            
+            // sanity check the values as apparently they can get fucked up when importing from vanilla
+            
+            if ( foodLevel > 60 || foodLevel < 0 )
+            {
+            	foodLevel = 60;
     }
 
+            if ( foodSaturationLevel > 20F || foodSaturationLevel < 0F )
+            {
+            	foodSaturationLevel = 20F;
+            }
+            // END FCMOD
+        }
+    }
+
     /**
      * Writes food stats to an NBT object.
      */
@@ -107,6 +156,10 @@
         par1NBTTagCompound.setInteger("foodTickTimer", this.foodTimer);
         par1NBTTagCompound.setFloat("foodSaturationLevel", this.foodSaturationLevel);
         par1NBTTagCompound.setFloat("foodExhaustionLevel", this.foodExhaustionLevel);
+        
+        // FCMOD: Code added
+        par1NBTTagCompound.setBoolean( "fcFoodLevelAdjusted", true );
+        // END FCMOD
     }
 
     /**
@@ -127,7 +180,12 @@
      */
     public boolean needFood()
     {
+    	// FCMOD: Code changed
+    	/*
         return this.foodLevel < 20;
+        */
+        return this.foodLevel < 60;    	
+        // END FCMOD
     }
 
     /**
@@ -155,4 +213,99 @@
     {
         this.foodSaturationLevel = par1;
     }
+    
+    // FCMOD: Added New
+    /**
+     * Note that iFoodGain is one third regular hunger gained, with 6 units being a full pip
+     */
+    public void addStats( int iFoodGain, float fFatMultiplier )
+    {
+    	int iPreviousFoodLevel = foodLevel;
+    	
+        foodLevel = Math.min( iFoodGain + foodLevel, 60);
+        
+        int iExcessFood = iFoodGain - ( foodLevel - iPreviousFoodLevel );
+        
+        if ( iExcessFood > 0 )
+        {
+        	// divide by 3 due to increased resolution
+        	
+            foodSaturationLevel = Math.min( foodSaturationLevel + (float)iExcessFood * fFatMultiplier / 3F, 20F );
 }
+    }
+    
+    public void onUpdate( EntityPlayer player )
+    {
+    	// only called on server
+    	
+        int iDifficulty = player.worldObj.difficultySetting;
+        
+        prevFoodLevel = foodLevel;
+        
+        if ( iDifficulty > 0 )
+        {
+	        // burn hunger
+	        
+	        while ( foodLevel > 0 && foodExhaustionLevel >= 1.33F && !ShouldBurnFatBeforeHunger() )
+	        {
+	            foodExhaustionLevel -= 1.33F;
+	            
+	            foodLevel = Math.max( foodLevel - 1, 0 );
+	        }
+	        
+	    	// burn fat
+	    	
+	        while ( foodExhaustionLevel >= 0.5F && ShouldBurnFatBeforeHunger() )
+	        {
+	    		foodExhaustionLevel -= 0.5F;
+	    		
+	            foodSaturationLevel = Math.max( foodSaturationLevel - 0.125F, 0F );
+	        }
+        }
+        else
+        {
+        	foodExhaustionLevel = 0F;
+        }
+
+        if ( foodLevel > 24 && player.shouldHeal() )
+        {
+            ++foodTimer;
+
+            if ( foodTimer >= 600 ) // once every 30 seconds
+            {
+                player.heal( 1 );
+                foodTimer = 0;
+            }
+        }
+        else if ( foodLevel <= 0 && foodSaturationLevel <= 0.01F )
+        {
+            ++foodTimer;
+
+            if ( foodTimer >= 80 )
+            {
+            	if ( iDifficulty > 0 )
+            	{
+            		player.attackEntityFrom( DamageSource.starve, 1 );
+            	}
+
+                foodTimer = 0;
+            }
+
+            // reset the exhaustion level so that it doesn't stack up while the player is starving
+            
+            foodExhaustionLevel = 0F;
+        }
+        else
+        {
+            foodTimer = 0;
+        }
+    }
+    
+    private boolean ShouldBurnFatBeforeHunger()
+    {
+    	// only burn fat when the corresponding hunger pip is completely depleted
+    	
+    	return foodSaturationLevel > (float)( ( foodLevel + 5 ) / 6 ) * 2F;    	
+    }    
+    // END FCMOD    
+}
