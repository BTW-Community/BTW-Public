--- a/minecraft/net/minecraft/src/GuiIngame.java
+++ b/minecraft/net/minecraft/src/GuiIngame.java
@@ -69,6 +69,10 @@
             this.renderPumpkinBlur(var6, var7);
         }
 
+        // FCMOD: Added (client only)
+        RenderModSpecificPlayerSightEffects();
+        // END FCMOD
+
         if (!this.mc.thePlayer.isPotionActive(Potion.confusion))
         {
             float var10 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * par1;
@@ -82,17 +86,17 @@
         boolean var11;
         int var12;
         int var13;
-        int var16;
         int var17;
+        int var16;
         int var18;
         int var20;
-        int var22;
         int var23;
+        int var22;
         int var24;
-        int var26;
         byte var27;
+        int var26;
         int var47;
-        int var52;
+        int var50;
 
         if (!this.mc.playerController.enableEverythingIsScrewedUpMode())
         {
@@ -158,8 +162,8 @@
 
                 this.mc.mcProfiler.endStartSection("healthArmor");
                 int var25;
-                int var28;
                 int var29;
+                int var28;
 
                 for (var25 = 0; var25 < 10; ++var25)
                 {
@@ -249,16 +253,18 @@
 
                 this.mc.mcProfiler.endStartSection("food");
 
+                // FCMOD: Changed to add more detail to hunger display (client only)
+                /*
                 for (var25 = 0; var25 < 10; ++var25)
                 {
                     var26 = var47;
-                    var52 = 16;
-                    byte var53 = 0;
+                    var50 = 16;
+                    byte var51 = 0;
 
                     if (this.mc.thePlayer.isPotionActive(Potion.hunger))
                     {
-                        var52 += 36;
-                        var53 = 13;
+                        var50 += 36;
+                        var51 = 13;
                     }
 
                     if (this.mc.thePlayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (var16 * 3 + 1) == 0)
@@ -268,45 +274,55 @@
 
                     if (var14)
                     {
-                        var53 = 1;
+                        var51 = 1;
                     }
 
                     var29 = var19 - var25 * 8 - 9;
-                    this.drawTexturedModalRect(var29, var26, 16 + var53 * 9, 27, 9, 9);
+                    this.drawTexturedModalRect(var29, var26, 16 + var51 * 9, 27, 9, 9);
 
                     if (var14)
                     {
                         if (var25 * 2 + 1 < var17)
                         {
-                            this.drawTexturedModalRect(var29, var26, var52 + 54, 27, 9, 9);
+                            this.drawTexturedModalRect(var29, var26, var50 + 54, 27, 9, 9);
                         }
 
                         if (var25 * 2 + 1 == var17)
                         {
-                            this.drawTexturedModalRect(var29, var26, var52 + 63, 27, 9, 9);
+                            this.drawTexturedModalRect(var29, var26, var50 + 63, 27, 9, 9);
                         }
                     }
 
                     if (var25 * 2 + 1 < var16)
                     {
-                        this.drawTexturedModalRect(var29, var26, var52 + 36, 27, 9, 9);
+                        this.drawTexturedModalRect(var29, var26, var50 + 36, 27, 9, 9);
                     }
 
                     if (var25 * 2 + 1 == var16)
                     {
-                        this.drawTexturedModalRect(var29, var26, var52 + 45, 27, 9, 9);
+                        this.drawTexturedModalRect(var29, var26, var50 + 45, 27, 9, 9);
                     }
                 }
+                */
+                DrawFoodOverlay( var19, var47 );
 
+                int iSightlessTextOffset = -8;
+                // END FCMOD
+
                 this.mc.mcProfiler.endStartSection("air");
 
+                // FCMOD: Change to display air gauge during recovery (client only)
+                /*
                 if (this.mc.thePlayer.isInsideOfMaterial(Material.water))
+                */
+                if (this.mc.thePlayer.isInsideOfMaterial(Material.water) || mc.thePlayer.getAir() < 300 )
+            	// END FCMOD 
                 {
                     var25 = this.mc.thePlayer.getAir();
                     var26 = MathHelper.ceiling_double_int((double)(var25 - 2) * 10.0D / 300.0D);
-                    var52 = MathHelper.ceiling_double_int((double)var25 * 10.0D / 300.0D) - var26;
+                    var50 = MathHelper.ceiling_double_int((double)var25 * 10.0D / 300.0D) - var26;
 
-                    for (var28 = 0; var28 < var26 + var52; ++var28)
+                    for (var28 = 0; var28 < var26 + var50; ++var28)
                     {
                         if (var28 < var26)
                         {
@@ -318,7 +334,15 @@
                         }
                     }
                 }
+                // FCMOD: Added (client only)
+                else if ( !DrawPenaltyText( var19, var22 ) )
+                {                	
+                	iSightlessTextOffset = 0;
+                }
 
+                DrawSightlessText( var19, var22 + iSightlessTextOffset );
+                // END FCMOD
+
                 this.mc.mcProfiler.endSection();
             }
 
@@ -361,8 +385,8 @@
             this.mc.mcProfiler.endSection();
         }
 
-        int var36;
-        int var40;
+        int var38;
+        int var37;
 
         if (this.mc.playerController.func_78763_f() && this.mc.thePlayer.experienceLevel > 0)
         {
@@ -370,13 +394,13 @@
             var11 = false;
             var12 = var11 ? 16777215 : 8453920;
             String var34 = "" + this.mc.thePlayer.experienceLevel;
-            var36 = (var6 - var8.getStringWidth(var34)) / 2;
-            var40 = var7 - 31 - 4;
-            var8.drawString(var34, var36 + 1, var40, 0);
-            var8.drawString(var34, var36 - 1, var40, 0);
-            var8.drawString(var34, var36, var40 + 1, 0);
-            var8.drawString(var34, var36, var40 - 1, 0);
-            var8.drawString(var34, var36, var40, var12);
+            var38 = (var6 - var8.getStringWidth(var34)) / 2;
+            var37 = var7 - 31 - 4;
+            var8.drawString(var34, var38 + 1, var37, 0);
+            var8.drawString(var34, var38 - 1, var37, 0);
+            var8.drawString(var34, var38, var37 + 1, 0);
+            var8.drawString(var34, var38, var37 - 1, 0);
+            var8.drawString(var34, var38, var37, var12);
             this.mc.mcProfiler.endSection();
         }
 
@@ -397,19 +421,19 @@
                     var13 += 14;
                 }
 
-                var36 = (int)((float)this.remainingHighlightTicks * 256.0F / 10.0F);
+                var38 = (int)((float)this.remainingHighlightTicks * 256.0F / 10.0F);
 
-                if (var36 > 255)
+                if (var38 > 255)
                 {
-                    var36 = 255;
+                    var38 = 255;
                 }
 
-                if (var36 > 0)
+                if (var38 > 0)
                 {
                     GL11.glPushMatrix();
                     GL11.glEnable(GL11.GL_BLEND);
                     GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-                    var8.drawStringWithShadow(var35, var12, var13, 16777215 + (var36 << 24));
+                    var8.drawStringWithShadow(var35, var12, var13, 16777215 + (var38 << 24));
                     GL11.glDisable(GL11.GL_BLEND);
                     GL11.glPopMatrix();
                 }
@@ -446,14 +470,16 @@
             var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
             var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
             var8.drawStringWithShadow(this.mc.getWorldProviderName(), 2, 42, 16777215);
-            long var39 = Runtime.getRuntime().maxMemory();
-            long var37 = Runtime.getRuntime().totalMemory();
-            long var41 = Runtime.getRuntime().freeMemory();
-            long var44 = var37 - var41;
-            String var45 = "Used memory: " + var44 * 100L / var39 + "% (" + var44 / 1024L / 1024L + "MB) of " + var39 / 1024L / 1024L + "MB";
-            this.drawString(var8, var45, var6 - var8.getStringWidth(var45) - 2, 2, 14737632);
-            var45 = "Allocated memory: " + var37 * 100L / var39 + "% (" + var37 / 1024L / 1024L + "MB)";
-            this.drawString(var8, var45, var6 - var8.getStringWidth(var45) - 2, 12, 14737632);
+            long var36 = Runtime.getRuntime().maxMemory();
+            long var40 = Runtime.getRuntime().totalMemory();
+            long var43 = Runtime.getRuntime().freeMemory();
+            long var44 = var40 - var43;
+            String var46 = "Used memory: " + var44 * 100L / var36 + "% (" + var44 / 1024L / 1024L + "MB) of " + var36 / 1024L / 1024L + "MB";
+            this.drawString(var8, var46, var6 - var8.getStringWidth(var46) - 2, 2, 14737632);
+            var46 = "Allocated memory: " + var40 * 100L / var36 + "% (" + var40 / 1024L / 1024L + "MB)";
+            this.drawString(var8, var46, var6 - var8.getStringWidth(var46) - 2, 12, 14737632);
+            // FCMOD: Removed (client only)
+            /*
             var47 = MathHelper.floor_double(this.mc.thePlayer.posX);
             var22 = MathHelper.floor_double(this.mc.thePlayer.posY);
             var23 = MathHelper.floor_double(this.mc.thePlayer.posZ);
@@ -465,11 +491,16 @@
 
             if (this.mc.theWorld != null && this.mc.theWorld.blockExists(var47, var22, var23))
             {
-                Chunk var50 = this.mc.theWorld.getChunkFromBlockCoords(var47, var23);
-                this.drawString(var8, "lc: " + (var50.getTopFilledSegment() + 15) + " b: " + var50.getBiomeGenForWorldCoords(var47 & 15, var23 & 15, this.mc.theWorld.getWorldChunkManager()).biomeName + " bl: " + var50.getSavedLightValue(EnumSkyBlock.Block, var47 & 15, var22, var23 & 15) + " sl: " + var50.getSavedLightValue(EnumSkyBlock.Sky, var47 & 15, var22, var23 & 15) + " rl: " + var50.getBlockLightValue(var47 & 15, var22, var23 & 15, 0), 2, 96, 14737632);
+                Chunk var52 = this.mc.theWorld.getChunkFromBlockCoords(var47, var23);
+                this.drawString(var8, "lc: " + (var52.getTopFilledSegment() + 15) + " b: " + var52.getBiomeGenForWorldCoords(var47 & 15, var23 & 15, this.mc.theWorld.getWorldChunkManager()).biomeName + " bl: " + var52.getSavedLightValue(EnumSkyBlock.Block, var47 & 15, var22, var23 & 15) + " sl: " + var52.getSavedLightValue(EnumSkyBlock.Sky, var47 & 15, var22, var23 & 15) + " rl: " + var52.getBlockLightValue(var47 & 15, var22, var23 & 15, 0), 2, 96, 14737632);
             }
 
             this.drawString(var8, String.format("ws: %.3f, fs: %.3f, g: %b, fl: %d", new Object[] {Float.valueOf(this.mc.thePlayer.capabilities.getWalkSpeed()), Float.valueOf(this.mc.thePlayer.capabilities.getFlySpeed()), Boolean.valueOf(this.mc.thePlayer.onGround), Integer.valueOf(this.mc.theWorld.getHeightValue(var47, var23))}), 2, 104, 14737632);
+            */
+            // END FCMOD
+            // FCMOD: Added (client only)
+            RenderModDebugOverlay();
+            // END FCMOD
             GL11.glPopMatrix();
             this.mc.mcProfiler.endSection();
         }
@@ -527,12 +558,12 @@
         if (this.mc.gameSettings.keyBindPlayerList.pressed && (!this.mc.isIntegratedServerRunning() || this.mc.thePlayer.sendQueue.playerInfoList.size() > 1 || var42 != null))
         {
             this.mc.mcProfiler.startSection("playerList");
-            NetClientHandler var38 = this.mc.thePlayer.sendQueue;
-            List var43 = var38.playerInfoList;
-            var36 = var38.currentServerMaxPlayers;
-            var40 = var36;
+            NetClientHandler var39 = this.mc.thePlayer.sendQueue;
+            List var41 = var39.playerInfoList;
+            var38 = var39.currentServerMaxPlayers;
+            var37 = var38;
 
-            for (var16 = 1; var40 > 20; var40 = (var36 + var16 - 1) / var16)
+            for (var16 = 1; var37 > 20; var37 = (var38 + var16 - 1) / var16)
             {
                 ++var16;
             }
@@ -545,59 +576,59 @@
             }
 
             var18 = (var6 - var16 * var17) / 2;
-            byte var46 = 10;
-            drawRect(var18 - 1, var46 - 1, var18 + var17 * var16, var46 + 9 * var40, Integer.MIN_VALUE);
+            byte var45 = 10;
+            drawRect(var18 - 1, var45 - 1, var18 + var17 * var16, var45 + 9 * var37, Integer.MIN_VALUE);
 
-            for (var20 = 0; var20 < var36; ++var20)
+            for (var20 = 0; var20 < var38; ++var20)
             {
                 var47 = var18 + var20 % var16 * var17;
-                var22 = var46 + var20 / var16 * 9;
+                var22 = var45 + var20 / var16 * 9;
                 drawRect(var47, var22, var47 + var17 - 1, var22 + 8, 553648127);
                 GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                 GL11.glEnable(GL11.GL_ALPHA_TEST);
 
-                if (var20 < var43.size())
+                if (var20 < var41.size())
                 {
-                    GuiPlayerInfo var48 = (GuiPlayerInfo)var43.get(var20);
-                    ScorePlayerTeam var49 = this.mc.theWorld.getScoreboard().getPlayersTeam(var48.name);
-                    String var51 = ScorePlayerTeam.func_96667_a(var49, var48.name);
-                    var8.drawStringWithShadow(var51, var47, var22, 16777215);
+                    GuiPlayerInfo var49 = (GuiPlayerInfo)var41.get(var20);
+                    ScorePlayerTeam var48 = this.mc.theWorld.getScoreboard().getPlayersTeam(var49.name);
+                    String var53 = ScorePlayerTeam.func_96667_a(var48, var49.name);
+                    var8.drawStringWithShadow(var53, var47, var22, 16777215);
 
                     if (var42 != null)
                     {
-                        var26 = var47 + var8.getStringWidth(var51) + 5;
-                        var52 = var47 + var17 - 12 - 5;
+                        var26 = var47 + var8.getStringWidth(var53) + 5;
+                        var50 = var47 + var17 - 12 - 5;
 
-                        if (var52 - var26 > 5)
+                        if (var50 - var26 > 5)
                         {
-                            Score var55 = var42.getScoreboard().func_96529_a(var48.name, var42);
-                            String var57 = EnumChatFormatting.YELLOW + "" + var55.func_96652_c();
-                            var8.drawStringWithShadow(var57, var52 - var8.getStringWidth(var57), var22, 16777215);
+                            Score var56 = var42.getScoreboard().func_96529_a(var49.name, var42);
+                            String var57 = EnumChatFormatting.YELLOW + "" + var56.func_96652_c();
+                            var8.drawStringWithShadow(var57, var50 - var8.getStringWidth(var57), var22, 16777215);
                         }
                     }
 
                     GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                     this.mc.renderEngine.bindTexture("/gui/icons.png");
-                    byte var54 = 0;
-                    boolean var56 = false;
+                    byte var55 = 0;
+                    boolean var54 = false;
 
-                    if (var48.responseTime < 0)
+                    if (var49.responseTime < 0)
                     {
                         var27 = 5;
                     }
-                    else if (var48.responseTime < 150)
+                    else if (var49.responseTime < 150)
                     {
                         var27 = 0;
                     }
-                    else if (var48.responseTime < 300)
+                    else if (var49.responseTime < 300)
                     {
                         var27 = 1;
                     }
-                    else if (var48.responseTime < 600)
+                    else if (var49.responseTime < 600)
                     {
                         var27 = 2;
                     }
-                    else if (var48.responseTime < 1000)
+                    else if (var49.responseTime < 1000)
                     {
                         var27 = 3;
                     }
@@ -607,7 +638,7 @@
                     }
 
                     this.zLevel += 100.0F;
-                    this.drawTexturedModalRect(var47 + var17 - 12, var22, 0 + var54 * 10, 176 + var27 * 8, 10, 8);
+                    this.drawTexturedModalRect(var47 + var17 - 12, var22, 0 + var55 * 10, 176 + var27 * 8, 10, 8);
                     this.zLevel -= 100.0F;
                 }
             }
@@ -637,8 +668,8 @@
 
             int var22 = var6.size() * par4FontRenderer.FONT_HEIGHT;
             int var23 = par2 / 2 + var22 / 3;
-            byte var24 = 3;
-            int var25 = par3 - var7 - var24;
+            byte var25 = 3;
+            int var24 = par3 - var7 - var25;
             int var12 = 0;
             Iterator var13 = var6.iterator();
 
@@ -650,17 +681,17 @@
                 String var16 = ScorePlayerTeam.func_96667_a(var15, var14.func_96653_e());
                 String var17 = EnumChatFormatting.RED + "" + var14.func_96652_c();
                 int var19 = var23 - var12 * par4FontRenderer.FONT_HEIGHT;
-                int var20 = par3 - var24 + 2;
-                drawRect(var25 - 2, var19, var20, var19 + par4FontRenderer.FONT_HEIGHT, 1342177280);
-                par4FontRenderer.drawString(var16, var25, var19, 553648127);
+                int var20 = par3 - var25 + 2;
+                drawRect(var24 - 2, var19, var20, var19 + par4FontRenderer.FONT_HEIGHT, 1342177280);
+                par4FontRenderer.drawString(var16, var24, var19, 553648127);
                 par4FontRenderer.drawString(var17, var20 - par4FontRenderer.getStringWidth(var17), var19, 553648127);
 
                 if (var12 == var6.size())
                 {
                     String var21 = par1ScoreObjective.getDisplayName();
-                    drawRect(var25 - 2, var19 - par4FontRenderer.FONT_HEIGHT - 1, var20, var19 - 1, 1610612736);
-                    drawRect(var25 - 2, var19 - 1, var20, var19, 1342177280);
-                    par4FontRenderer.drawString(var21, var25 + var7 / 2 - par4FontRenderer.getStringWidth(var21) / 2, var19 - par4FontRenderer.FONT_HEIGHT, 553648127);
+                    drawRect(var24 - 2, var19 - par4FontRenderer.FONT_HEIGHT - 1, var20, var19 - 1, 1610612736);
+                    drawRect(var24 - 2, var19 - 1, var20, var19, 1342177280);
+                    par4FontRenderer.drawString(var21, var24 + var7 / 2 - par4FontRenderer.getStringWidth(var21) / 2, var19 - par4FontRenderer.FONT_HEIGHT, 553648127);
                 }
             }
         }
@@ -809,8 +840,24 @@
                 GL11.glTranslatef((float)(-(par2 + 8)), (float)(-(par3 + 12)), 0.0F);
             }
 
+            // FCMOD: Added (client only)
+    		int iItemID = var5.getItem().itemID;
+    		
+	        if ( iItemID == Item.compass.itemID )
+	        {
+	        	TextureCompass.compassTexture.UpdateActive();
+	        }
+            // END FCMOD
+	        
             itemRenderer.renderItemAndEffectIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, var5, par2, par3);
 
+            // FCMOD: Added (client only)
+	        if ( iItemID == Item.compass.itemID )
+	        {
+	        	TextureCompass.compassTexture.UpdateInert();
+	        }
+            // END FCMOD
+	        
             if (var6 > 0.0F)
             {
                 GL11.glPopMatrix();
@@ -875,4 +922,627 @@
     {
         return this.updateCounter;
     }
+
+    // FCMOD: Added New (client only)
+	static final int m_iTrueSightRange = 10;
+	
+    private int m_iFoodLevelOnLastGUIUpdate = 0;
+    private float m_fFatOnLastGUIUpdate = 0F;
+    
+    public void RenderModDebugOverlay()
+    {
+    	AddChunkBoundaryDisplay( 64 );
+    	
+    	//AddMovementSpeedDisplay( 74 );
+    	
+    	//AddCurrentBiomeDisplay( 74 );
+    	
+    	AddLoadedChunksOnServerDisplay( 84 );        
 }
+    
+    private void AddChunkBoundaryDisplay( int iYPos )
+    {
+        FontRenderer fontRenderer = mc.fontRenderer;
+        
+        int chunkX = MathHelper.floor_double(mc.thePlayer.posX) % 16;
+        
+        if ( chunkX < 0 )
+        {
+        	chunkX = 16 + chunkX;
+        }
+        
+        int iDistToChunkBndryX = chunkX;
+        
+        if ( 15 - chunkX < chunkX )
+        {
+        	iDistToChunkBndryX = 15 - chunkX;
+        }
+        
+        int chunkZ = MathHelper.floor_double(mc.thePlayer.posZ) % 16;
+        
+        if ( chunkZ < 0 )
+        {
+        	chunkZ = 16 + chunkZ;
+        }
+        
+        int iDistToChunkBndryZ = chunkZ;
+        
+        if ( 15 - chunkZ < chunkZ )
+        {
+        	iDistToChunkBndryZ = 15 - chunkZ;
+        }
+        
+        int iDistToChunkBndry = iDistToChunkBndryX;
+        
+        if ( iDistToChunkBndryZ < iDistToChunkBndryX )
+        {
+        	iDistToChunkBndry = iDistToChunkBndryZ;
+        }
+        
+        drawString(fontRenderer, String.format("Dist To Chnk Bndry: %d", new Object[]
+			{
+			     Integer.valueOf( iDistToChunkBndry )
+			}), 2, iYPos, 0xe0e0e0);
+    }
+    
+    private void AddCurrentBiomeDisplay( int iYPos )
+    {
+        FontRenderer fontRenderer = mc.fontRenderer;        
+        EntityPlayer player = mc.thePlayer;
+        
+        String sBiomeDescriptor;        
+        
+        BiomeGenBase biomeGen = player.worldObj.getBiomeGenForCoords( MathHelper.floor_double( player.posX ),
+        	MathHelper.floor_double( player.posZ ) );        
+        
+        if ( biomeGen != null )
+        {
+        	sBiomeDescriptor = biomeGen.getClass().getName(); 
+        }
+        else
+        {
+        	sBiomeDescriptor = "unknown";
+        }
+        
+        drawString( fontRenderer, "Biome: " + sBiomeDescriptor, 2, iYPos, 0xe0e0e0 );
+        
+    }
+    
+    private void AddMovementSpeedDisplay( int iYPos )
+    {
+        FontRenderer fontRenderer = mc.fontRenderer;
+        
+        double playerSpeed = Math.sqrt( ( mc.thePlayer.motionX * mc.thePlayer.motionX ) + ( mc.thePlayer.motionZ * mc.thePlayer.motionZ ) );
+        
+        
+        String sPlayerSpeedString = String.format("Player Speed: %.5f", new Object[] {
+    		Double.valueOf(playerSpeed) } ); 
+        	
+        drawString(fontRenderer, sPlayerSpeedString , 2, iYPos, 0xe0e0e0);
+                                                                                
+        double riddenSpeed = 0D;
+        
+        if ( mc.thePlayer.ridingEntity != null )
+        {
+        	riddenSpeed = Math.sqrt( ( mc.thePlayer.ridingEntity.motionX * mc.thePlayer.ridingEntity.motionX ) + ( mc.thePlayer.ridingEntity.motionZ * mc.thePlayer.ridingEntity.motionZ ) );
+        }
+        
+        
+        String sRiddenSpeedString = String.format("Ridden Speed: %.5f", new Object[] {
+    		Double.valueOf(riddenSpeed) } );
+        
+        ScaledResolution resolution = new ScaledResolution( mc.gameSettings, 
+        	mc.displayWidth, mc.displayHeight );
+        
+        int iXPos = 12 + fontRenderer.getStringWidth( sPlayerSpeedString );
+        
+        drawString(fontRenderer, String.format("Ridden Speed: %.5f", new Object[]
+			{
+        		Double.valueOf(riddenSpeed)
+			}), iXPos, iYPos, 0xe0e0e0);
+    }
+    
+    private void AddLoadedChunksOnServerDisplay( int iYPos )
+    {
+        if ( net.minecraft.server.MinecraftServer.getServer() != null )
+        {
+            FontRenderer fontrenderer = mc.fontRenderer;
+            
+        	if ( net.minecraft.server.MinecraftServer.getServer().worldServers[0] != null )
+        	{
+	            IChunkProvider provider = 
+	            	net.minecraft.server.MinecraftServer.getServer().worldServers[0].getChunkProvider();
+	            
+	            drawString( fontrenderer, "Overworld " + provider.makeString(), 2, 84, 0xe0e0e0 );
+        	}
+        	
+        	if ( net.minecraft.server.MinecraftServer.getServer().worldServers[1] != null )
+        	{
+	            IChunkProvider provider = 
+	            	net.minecraft.server.MinecraftServer.getServer().worldServers[1].getChunkProvider();
+	            
+	            drawString( fontrenderer, "Nether " + provider.makeString(), 2, 94, 0xe0e0e0 );
+        	}
+        	
+        	if ( net.minecraft.server.MinecraftServer.getServer().worldServers[2] != null )
+        	{
+	            IChunkProvider provider = 
+	            	net.minecraft.server.MinecraftServer.getServer().worldServers[2].getChunkProvider();
+	            
+	            drawString( fontrenderer, "End " + provider.makeString(), 2, 104, 0xe0e0e0 );
+        	}
+        }
+    }
+    
+    private void renderEnderSpectaclesBlur()
+    {
+        ScaledResolution resolution = new ScaledResolution( mc.gameSettings, 
+        	mc.displayWidth, mc.displayHeight);
+        
+        int iScreenWidth = resolution.getScaledWidth();
+        int iScreenHeight = resolution.getScaledHeight();
+        
+        GL11.glDisable(GL11.GL_DEPTH_TEST);
+        GL11.glDepthMask(false);
+        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GL11.glDisable(GL11.GL_ALPHA_TEST);
+        mc.renderEngine.bindTexture("%blur%/btwmodtex/spectaclesblur.png");
+        Tessellator tessellator = Tessellator.instance;
+        tessellator.startDrawingQuads();
+        tessellator.addVertexWithUV(0.0D, iScreenHeight, -90D, 0.0D, 1.0D);
+        tessellator.addVertexWithUV(iScreenWidth, iScreenHeight, -90D, 1.0D, 1.0D);
+        tessellator.addVertexWithUV(iScreenWidth, 0.0D, -90D, 1.0D, 0.0D);
+        tessellator.addVertexWithUV(0.0D, 0.0D, -90D, 0.0D, 0.0D);
+        tessellator.draw();
+        GL11.glDepthMask(true);
+        GL11.glEnable(GL11.GL_DEPTH_TEST);
+        GL11.glEnable(GL11.GL_ALPHA_TEST);
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);        
+    }
+    
+    public void RenderGameOverlayWithGuiDisabled(float fSmoothCameraPartialTicks, boolean bScreenActive, int iMouseX, int iMouseY )
+    {
+    	// Renders anything that has a gameplay effect when the player has the GUI turned off
+    	
+        ScaledResolution resolution = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
+        int iScreenWidth = resolution.getScaledWidth();
+        int iScreenHeight = resolution.getScaledHeight();
+        FontRenderer fontRenderer = this.mc.fontRenderer;
+        
+        mc.entityRenderer.setupOverlayRendering();
+        GL11.glEnable(GL11.GL_BLEND);
+
+        if (Minecraft.isFancyGraphicsEnabled())
+        {
+            this.renderVignette(this.mc.thePlayer.getBrightness(fSmoothCameraPartialTicks), iScreenWidth, iScreenHeight);
+        }
+        else
+        {
+            GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+        }
+
+        ItemStack var9 = this.mc.thePlayer.inventory.armorItemInSlot(3);
+
+        if (this.mc.gameSettings.thirdPersonView == 0 && var9 != null && var9.itemID == Block.pumpkin.blockID)
+        {
+            this.renderPumpkinBlur(iScreenWidth, iScreenHeight);
+        }
+
+        RenderModSpecificPlayerSightEffects();
+
+        if (!this.mc.thePlayer.isPotionActive(Potion.confusion))
+        {
+            float var10 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * fSmoothCameraPartialTicks;
+
+            if (var10 > 0.0F)
+            {
+                this.renderPortalOverlay(var10, iScreenWidth, iScreenHeight);
+            }
+        }
+
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GL11.glDisable(GL11.GL_LIGHTING);
+        GL11.glEnable(GL11.GL_ALPHA_TEST);
+    }
+    
+    private void RenderModSpecificPlayerSightEffects()
+    {
+        if ( mc.gameSettings.thirdPersonView == 0 )
+        {
+		    if ( mc.thePlayer.IsWearingEnderSpectacles() )
+		    {
+		        renderEnderSpectaclesBlur();
+		        
+		        AddTrueSightParticles();
+		        
+		    	// Decided against this as it may trivialize base measurement too much.
+		        //AddSpawnChunksParticles();
+		    }
+		    else if ( mc.thePlayer.isPotionActive( FCBetterThanWolves.potionTrueSight ) )
+		    {
+		        AddTrueSightParticles();
+		        
+		        AddSpawnChunksParticles();
+		    }
+        }
+    }
+    
+    private void AddTrueSightParticles()
+    {
+        // create particles where mobs can spawn
+        
+        if ( !mc.isGamePaused )
+        {
+            EntityPlayer player = mc.thePlayer;
+            World world = mc.theWorld;
+            int iParticleSetting = mc.gameSettings.particleSetting;
+            
+			int iPlayerI = MathHelper.floor_double( player.posX );
+			int iPlayerJ = MathHelper.floor_double( player.posY );
+			int iPlayerK = MathHelper.floor_double( player.posZ );
+			
+			for ( int iTempI = iPlayerI - m_iTrueSightRange; iTempI <= iPlayerI + m_iTrueSightRange; iTempI++ )
+			{
+				for ( int iTempJ = iPlayerJ - m_iTrueSightRange; iTempJ <= iPlayerJ + m_iTrueSightRange; iTempJ++ )
+				{
+					for ( int iTempK = iPlayerK - m_iTrueSightRange; iTempK <= iPlayerK + m_iTrueSightRange; iTempK++ )
+					{
+						if ( FCUtilsWorld.CanMobsSpawnHere( world, iTempI, iTempJ, iTempK ) )
+						{
+							double dVerticalOffset = 0D;
+							
+							Block blockBelow = Block.blocksList[world.getBlockId( 
+								iTempI, iTempJ - 1, iTempK )];
+							
+							if ( blockBelow != null )
+							{
+								dVerticalOffset = blockBelow.MobSpawnOnVerticalOffset( 
+									world, iTempI, iTempJ - 1, iTempK );
+							}
+							
+							if ( rand.nextInt( 12 ) <= ( 2 - iParticleSetting ) )
+							{
+								double particleX = (double)iTempI + rand.nextDouble();
+								
+								double particleY = (double)iTempJ + dVerticalOffset + 
+									rand.nextDouble() * 0.25D;
+								
+								double particleZ = (double)iTempK + rand.nextDouble();
+								
+								SpawnTrueSightParticle( world, particleX, particleY, particleZ );								
+							}
+						}
+					}
+				}
+			}
+        }        
+    }
+    
+    private void SpawnTrueSightParticle( World world, double dXPos, double dYPos, double dZPos )
+    {
+        EntityFX particleEntity = (EntityFX) EntityList.createEntityOfType(EntitySpellParticleFX.class, world, dXPos, dYPos, dZPos, 0.0D, 0.0D, 0.0D);
+        
+        particleEntity.setRBGColorF( 0F, 0F, 0F );
+        
+        mc.effectRenderer.addEffect( (EntityFX)particleEntity );
+    }
+    
+    private void AddSpawnChunksParticles()
+    {
+        World world = mc.theWorld;
+        EntityPlayer player = mc.thePlayer;
+        
+        if ( !mc.isGamePaused && player.GetSpawnChunksVisualizationLocationJ() != 0 &&
+        	world.provider.dimensionId == 0 ) // is overworld
+        {   
+        	// Note that world.GetClampedViewDistanceInChunks() is not accurate on the client
+        	// and will always be 10, regardless of view-distance parameter on dedicated server
+        	int iViewDistanceChunks = world.GetClampedViewDistanceInChunks();
+        	
+        	int iFirstPassRange = ( iViewDistanceChunks + 2 ) * 16; // player has to be within these bounds
+        	
+            int iPlayerX = MathHelper.floor_double( player.posX );            
+            int iDeltaPosX = iPlayerX - player.GetSpawnChunksVisualizationLocationI();
+            
+            if ( iDeltaPosX >= -iFirstPassRange && iDeltaPosX <= iFirstPassRange )
+            {
+                int iPlayerZ = MathHelper.floor_double( player.posZ );            
+                int iDeltaPosZ = iPlayerZ - player.GetSpawnChunksVisualizationLocationK();
+                
+                if ( iDeltaPosZ >= -iFirstPassRange && iDeltaPosZ <= iFirstPassRange )
+                {
+                    int iParticleSetting = mc.gameSettings.particleSetting;
+                    
+                	int iNumParticles = 200 - ( iParticleSetting * 100 );
+                	
+                	for ( int iTempCount = 0; iTempCount < iNumParticles; iTempCount++ )
+                	{
+						double particleY = player.posY -(double)m_iTrueSightRange + 
+							( rand.nextDouble() * (double)m_iTrueSightRange * 2D );
+						
+						if ( particleY > 0D && particleY <= 256D )
+						{
+							double particleX = player.posX -(double)m_iTrueSightRange + 
+							( rand.nextDouble() * (double)m_iTrueSightRange * 2D );
+						
+							double particleZ = player.posZ -(double)m_iTrueSightRange + 
+							( rand.nextDouble() * (double)m_iTrueSightRange * 2D );
+						
+					    	int iSpawnChunkX = player.GetSpawnChunksVisualizationLocationI() >> 4;
+	            			int iSpawnChunkZ = player.GetSpawnChunksVisualizationLocationK() >> 4;
+	                	
+							if ( IsPosInSpawnChunkZone( particleX, particleY, particleZ,
+								iSpawnChunkX, iSpawnChunkZ, iViewDistanceChunks ) )
+							{
+								if ( IsPosInSpawnChunkZone( particleX, particleY, particleZ,
+									iSpawnChunkX, iSpawnChunkZ, iViewDistanceChunks - 2 ) )
+								{
+									if ( IsPosInSpawnBlock( player, particleX, particleY, particleZ ) )
+									{
+										SpawnSpawnPointParticle( world, particleX, particleY, particleZ );
+									}
+									else
+									{
+										SpawnSpawnChunkInnerParticle( world, particleX, particleY, particleZ );
+									}
+								}
+								else
+								{
+									SpawnSpawnChunkOuterParticle( world, particleX, particleY, particleZ );
+								}
+							}
+                		}
+                	}
+                }
+            }
+        }
+    }    
+    
+    private void SpawnSpawnChunkOuterParticle( World world, double dXPos, double dYPos, double dZPos )
+    {
+        EntityFX particleEntity = (EntityFX) EntityList.createEntityOfType(EntityPortalFX.class, world, dXPos, dYPos, dZPos, 0.0D, 0.0D, 0.0D);
+        
+        particleEntity.setRBGColorF( 0F, 0F, 0.5F );
+        particleEntity.setAlphaF(0.5F);
+        
+        mc.effectRenderer.addEffect( (EntityFX)particleEntity );
+    }
+    
+    private void SpawnSpawnChunkInnerParticle( World world, double dXPos, double dYPos, double dZPos )
+    {
+        EntityFX particleEntity = (EntityFX) EntityList.createEntityOfType(EntityCritFX.class, world, dXPos, dYPos, dZPos, 0.0D, 0.0D, 0.0D);
+        
+        particleEntity.setRBGColorF( 0.5F, 0F, 0.5F );
+        particleEntity.setAlphaF(0.25F);
+        
+        mc.effectRenderer.addEffect( (EntityFX)particleEntity );
+    }
+    
+    private void SpawnSpawnPointParticle( World world, double dXPos, double dYPos, double dZPos )
+    {
+        //EntityFX particleEntity = new EntityAuraFX( world, dXPos, dYPos, dZPos, 0.0D, 0.0D, 0.0D);
+        //EntityFX particleEntity = new EntityCritFX( world, dXPos, dYPos, dZPos, 0.0D, 0.0D, 0.0D);
+        //EntityFX particleEntity = new EntityPortalFX( world, dXPos, dYPos, dZPos, 0.0D, 0.0D, 0.0D);
+        EntityFX particleEntity = (EntityFX) EntityList.createEntityOfType(EntityEnchantmentTableParticleFX.class, world, dXPos, dYPos, dZPos, 0.0D, 0.0D, 0.0D);
+        
+        particleEntity.setRBGColorF( 0.75F, 0F, 0F );
+        particleEntity.setAlphaF(0.5F);
+        
+        mc.effectRenderer.addEffect( (EntityFX)particleEntity );
+    }
+    
+    public boolean IsPosInSpawnChunkZone( double posX, double posY, double posZ, 
+    	int iSpawnChunkX, int iSpawnChunkZ, int iChunkRange )
+    {
+    	int iPosChunkX = MathHelper.floor_double( posX / 16D );
+    	int iDeltaX = iPosChunkX - iSpawnChunkX;  
+    	
+    	if ( iDeltaX >= -iChunkRange && iDeltaX <= iChunkRange )
+    	{    	
+    		int iPosChunkZ = MathHelper.floor_double( posZ / 16D );
+        	int iDeltaZ = iPosChunkZ - iSpawnChunkZ;  
+    		
+        	if ( iDeltaZ >= -iChunkRange && iDeltaZ <= iChunkRange )
+        	{
+        		return true;
+        	}
+    	}
+    	
+    	return false;
+    }
+    
+    public boolean IsPosInSpawnBlock( EntityPlayer player, double posX, double posY, double posZ )
+    {
+    	int iDeltaX = MathHelper.floor_double( posX ) - player.GetSpawnChunksVisualizationLocationI();
+    	
+    	if ( iDeltaX >= -1 && iDeltaX <= 1 )
+    	{
+    		int iDeltaZ = MathHelper.floor_double( posZ ) - player.GetSpawnChunksVisualizationLocationK();
+    		
+        	if ( iDeltaZ >= -1 && iDeltaZ <= 1 )
+        	{
+        		return true;
+        	}
+    	}
+    	
+    	return false;
+    }
+    
+    private int m_iFoodOverlayShakeCounter = 0;
+    
+    private void DrawFoodOverlay( int iScreenX, int iScreenY )
+    {
+        FoodStats stats = mc.thePlayer.getFoodStats();
+        
+        int iHungerPenalty = mc.thePlayer.GetHungerPenaltyLevel();
+        
+        int iFoodLevel = stats.getFoodLevel();
+        float fSaturationLevel = stats.getSaturationLevel();
+        int iSaturationPips = (int)( ( stats.getSaturationLevel() + 0.124F ) * 4F );
+        
+        int iFullHungerPips = iFoodLevel / 6;
+        
+        if ( mc.thePlayer.m_bExhaustionAddedSinceLastGuiUpdate )
+        {
+        	m_iFoodOverlayShakeCounter = 20;
+        	
+        	mc.thePlayer.m_bExhaustionAddedSinceLastGuiUpdate = false;
+        }
+        else if ( m_iFoodOverlayShakeCounter > 0 )
+        {
+        	m_iFoodOverlayShakeCounter--;
+        }
+        
+        for ( int iTempCount = 0; iTempCount < 10; ++iTempCount )
+        {
+            int iShankScreenY = iScreenY;
+            int iShankTextureOffsetX = 16;
+            byte iBackgroundTextureOffsetX = 0;
+
+            if ( mc.thePlayer.isPotionActive( Potion.hunger ) )
+            {
+                iShankTextureOffsetX += 36;
+                iBackgroundTextureOffsetX = 13;
+            }
+            else if ( iTempCount < iSaturationPips >> 3 )
+            {
+            	iBackgroundTextureOffsetX = 1;
+            }
+
+            if ( iHungerPenalty > 0 && updateCounter % ( iFoodLevel * 5 + 1 ) == 0 )
+            {
+                iShankScreenY = iScreenY + (this.rand.nextInt(3) - 1);
+            }
+            else if ( m_iFoodOverlayShakeCounter > 0 )
+            {
+            	int iShakeAmount = /*rand.nextInt( 2 ) +*/ 1;
+            	
+            	if ( rand.nextInt( 2 ) == 0 )
+            	{
+            		iShakeAmount = -iShakeAmount;
+            	}
+            	
+                iShankScreenY = iScreenY + iShakeAmount;
+            }
+
+            int iShankScreenX = iScreenX - iTempCount * 8 - 9;
+            
+            drawTexturedModalRect( iShankScreenX, iShankScreenY, 16 + iBackgroundTextureOffsetX * 9, 27, 9, 9 );
+            
+            if ( iTempCount == iSaturationPips >> 3 )
+            {
+            	if ( !mc.thePlayer.isPotionActive( Potion.hunger ) )
+            	{
+	            	int iPartialPips = iSaturationPips % 8;
+	            	
+	            	if ( iPartialPips != 0 )
+	            	{
+		            	// draw partial pips
+		            	
+		                drawTexturedModalRect( iShankScreenX + 8 - iPartialPips, iShankScreenY, 25 + 8 - iPartialPips, 27, 1 + iPartialPips, 9 );
+	            	}
+            	}
+            }
+
+            if ( iTempCount < iFullHungerPips )
+            {
+                drawTexturedModalRect( iShankScreenX, iShankScreenY, iShankTextureOffsetX + 36, 27, 9, 9);
+            }
+            else if ( iTempCount == iFullHungerPips )
+            {
+            	int iPartialPips = iFoodLevel % 6;
+            	
+            	if ( iPartialPips != 0 )
+            	{
+            		drawTexturedModalRect( iShankScreenX + 7 - iPartialPips, iShankScreenY, iShankTextureOffsetX + 36 + 7 - iPartialPips, 27, 3 + iPartialPips, 9);
+            	}
+            }
+        }        
+    }
+    
+    public static final String[] sHealthPenaltyDescriptions = new String[] { "Invalid", "Hurt", "Injured", "Wounded", "Crippled", "Dying" };
+    public static final String[] sHungerPenaltyDescriptions = new String[] { "Invalid", "Peckish", "Hungry", "Famished", "Starving", "Dying" };
+    public static final String[] sFatPenaltyDescriptions = new String[] { "Invalid", "Plump", "Chubby", "Fat", "Obese", "Invalid" };
+    
+	private boolean DrawPenaltyText( int iScreenX, int iScreenY )
+	{
+		if ( mc.thePlayer.isDead )
+		{
+			return false;
+		}
+		
+        FontRenderer rednerer = this.mc.fontRenderer;
+        String sPenaltyString = null;
+        
+        int iHealthPenalty = mc.thePlayer.GetHealthPenaltyLevel();
+        int iHungerPenalty = mc.thePlayer.GetHungerPenaltyLevel();
+        int iFatPenalty = mc.thePlayer.GetFatPenaltyLevel();
+        
+        if ( iHealthPenalty > 0 && iHealthPenalty >= iHungerPenalty && iHealthPenalty >= iFatPenalty )
+        {
+        	sPenaltyString = sHealthPenaltyDescriptions[iHealthPenalty];
+        }
+        else if ( iHungerPenalty > 0 && iHungerPenalty >= iFatPenalty )
+        {
+        	sPenaltyString = sHungerPenaltyDescriptions[iHungerPenalty];
+        }
+        else if ( iFatPenalty > 0 )
+        {
+        	sPenaltyString = sFatPenaltyDescriptions[iFatPenalty];
+        }        
+        
+        if ( sPenaltyString != null )
+        {
+            int iStringWidth = rednerer.getStringWidth( sPenaltyString );
+
+            rednerer.drawStringWithShadow( sPenaltyString, iScreenX - iStringWidth , iScreenY, 0XFFFFFF );
+            
+            return true;
+        }        
+        
+        return false;
+	}
+	
+	private void DrawSightlessText( int iScreenX, int iScreenY )
+	{
+        int iGloomLevel = mc.thePlayer.GetGloomLevel();
+        
+        if ( mc.thePlayer.GetGloomLevel() > 0 && !mc.thePlayer.isDead )
+        {
+            FontRenderer rednerer = this.mc.fontRenderer;
+            String sPenaltyString = null;
+            
+        	switch ( iGloomLevel )
+        	{
+        		case 2:
+        			
+	            	sPenaltyString = "Dread";
+	            	
+	            	break;
+	            	
+        		case 3:
+        			
+	            	sPenaltyString = "Terror";
+	            	
+	            	break;
+	            	
+	        	default:
+	        		
+	            	sPenaltyString = "Gloom";
+	            	
+	            	break;
+        	}
+        	
+            int iStringWidth = rednerer.getStringWidth( sPenaltyString );
+
+            rednerer.drawStringWithShadow( sPenaltyString, iScreenX - iStringWidth , iScreenY, 0XFFFFFF );
+        }
+	}
+	
+    static public boolean InstallationIntegrityTest()
+    {
+    	return true;
+    }
+    // END FCMOD
+}
