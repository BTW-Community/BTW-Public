--- a/minecraft/net/minecraft/src/EntityItem.java
+++ b/minecraft/net/minecraft/src/EntityItem.java
@@ -2,6 +2,8 @@
 
 import java.util.Iterator;
 
+import net.minecraft.server.MinecraftServer;
+
 public class EntityItem extends Entity
 {
     /**
@@ -77,7 +79,19 @@
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
         this.motionY -= 0.03999999910593033D;
+        // FCMOD: Added
+        UpdateHardcoreBuoy();
+        // END FCMOD
+        // FCMOD: Changed this to reverse Mojang's "fix" to items getting stuck in blocks
+        // and to reduce discrepancies between client and server by pushing only on server
+        /*
         this.noClip = this.pushOutOfBlocks(this.posX, (this.boundingBox.minY + this.boundingBox.maxY) / 2.0D, this.posZ);
+        */
+        if ( !worldObj.isRemote )
+        {
+        	pushOutOfBlocks( posX, ( boundingBox.minY + boundingBox.maxY) / 2D, posZ );
+        }
+        // END FCMOD
         this.moveEntity(this.motionX, this.motionY, this.motionZ);
         boolean var1 = (int)this.prevPosX != (int)this.posX || (int)this.prevPosY != (int)this.posY || (int)this.prevPosZ != (int)this.posZ;
 
@@ -121,10 +135,15 @@
 
         ++this.age;
 
+        // FCMOD: Code change
+        /*
         if (!this.worldObj.isRemote && this.age >= 6000)
         {
             this.setDead();
         }
+        */
+        CheckForItemDespawn();
+        // END FCMOD
     }
 
     /**
@@ -238,6 +257,14 @@
         else
         {
             this.setBeenAttacked();
+	        // FCMOD: Code added
+	        if ( !worldObj.isRemote && !isDead && getEntityItem().getItem().itemID == FCBetterThanWolves.fcItemBlastingOil.itemID )
+	        {
+	    		DetonateBlastingOil();
+	    		
+	    		return false;
+		    }
+	        // END FCMOD
             this.health -= par2;
 
             if (this.health <= 0)
@@ -261,6 +288,10 @@
         {
             par1NBTTagCompound.setCompoundTag("Item", this.getEntityItem().writeToNBT(new NBTTagCompound()));
         }
+        
+        // FCMOD: Code added
+        par1NBTTagCompound.setLong( "fcDespawnTime", m_lAbsoluteItemDespawnTime );
+	    // END FCMOD    
     }
 
     /**
@@ -273,10 +304,18 @@
         NBTTagCompound var2 = par1NBTTagCompound.getCompoundTag("Item");
         this.setEntityItemStack(ItemStack.loadItemStackFromNBT(var2));
 
+        // FCMOD: Code added
+	    if ( par1NBTTagCompound.hasKey( "fcDespawnTime" ) )
+	    {
+	    	m_lAbsoluteItemDespawnTime = par1NBTTagCompound.getLong( "fcDespawnTime" );
+	    }
+	    // END FCMOD	    
+        
         if (this.getEntityItem() == null)
         {
             this.setDead();
         }
+        
     }
 
     /**
@@ -382,4 +421,343 @@
         this.getDataWatcher().updateObject(10, par1ItemStack);
         this.getDataWatcher().setObjectWatched(10);
     }
+
+    // FCMOD: Code added    
+    private long m_lAbsoluteItemDespawnTime = 0;
+    
+    private void UpdateHardcoreBuoy()
+    {
+        if ( FCBetterThanWolves.IsHardcoreBuoyEnabled( worldObj ) )
+        {
+	        int numDepthChecks = 10;
+	        double d = 0.0D;
+	        double dBoundingYOffset = 0.10D;
+	
+	        for ( int j = 0; j < numDepthChecks; j++ )
+	        {
+	            double d2 = ( boundingBox.minY + ( ( boundingBox.maxY - boundingBox.minY) * (double)(j + 0) ) * ( 0.375D ) ) + dBoundingYOffset;
+	            double d8 = ( boundingBox.minY + ( ( boundingBox.maxY - boundingBox.minY) * (double)(j + 1) ) * ( 0.375D ) ) + dBoundingYOffset;
+	            
+	            AxisAlignedBB axisalignedbb = AxisAlignedBB.getAABBPool().getAABB(boundingBox.minX, d2, boundingBox.minZ, boundingBox.maxX, d8, boundingBox.maxZ);
+	
+	            if ( worldObj.isAABBInMaterial( axisalignedbb, Material.water ) )
+	            {
+	                d += 1.0D / (double)numDepthChecks;
 }
+	            else 
+	            {
+	            	break;
+	            }
+	        }
+	        
+	        if ( d > 0.001D )
+	        {
+	    		if ( !IsInUndertow() )
+	    		{
+		        	float fBuoyancyShifted = getEntityItem().getItem().GetBuoyancy( getEntityItem().getItemDamage() ) + 1.0F;
+		        	
+		        	// positive velocity due to boyancy
+		        	
+		        	motionY += 0.04D * fBuoyancyShifted * d;
+	    		}
+		  
+		        // drag due to being in water
+		        
+	        	motionX *= 0.90F;
+	        	motionY *= 0.90F;
+	        	motionZ *= 0.90F;	        	
+	        }	        
+        }
+    }
+
+    @Override
+    protected void doBlockCollisions()
+    {
+		//Inherited function added so that blocks like Hoppers get collision events with items on top.  
+    	// Copy of code from Entity.java, changes marked with FCMOD.
+
+        int i = MathHelper.floor_double(boundingBox.minX + 0.001D);
+        // FCMOD: code change
+        /*
+        int j = MathHelper.floor_double(boundingBox.minY + 0.001D);
+        */
+        int j = MathHelper.floor_double(boundingBox.minY - 0.01D);
+        // END FCMOD
+        int k = MathHelper.floor_double(boundingBox.minZ + 0.001D);
+        int l = MathHelper.floor_double(boundingBox.maxX - 0.001D);
+        int i1 = MathHelper.floor_double(boundingBox.maxY - 0.001D);
+        int j1 = MathHelper.floor_double(boundingBox.maxZ - 0.001D);
+
+        if (worldObj.checkChunksExist(i, j, k, l, i1, j1))
+        {
+            for (int k1 = i; k1 <= l; k1++)
+            {
+                for (int l1 = j; l1 <= i1; l1++)
+                {
+                    for (int i2 = k; i2 <= j1; i2++)
+                    {
+                        int j2 = worldObj.getBlockId(k1, l1, i2);
+
+                        if (j2 > 0)
+                        {
+                            Block.blocksList[j2].onEntityCollidedWithBlock(worldObj, k1, l1, i2, this);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    private boolean IsInUndertow()
+    {
+        int minI = MathHelper.floor_double( boundingBox.minX);
+        int maxI = MathHelper.floor_double( boundingBox.maxX + 1.0D);
+        
+        int minJ = MathHelper.floor_double( boundingBox.minY);
+        int maxJ = MathHelper.floor_double( boundingBox.maxY + 1.0D);
+        
+        int minK = MathHelper.floor_double( boundingBox.minZ);
+        int maxK = MathHelper.floor_double( boundingBox.maxZ + 1.0D );
+
+        for ( int i = minI; i < maxI; i++ )
+        {
+            for ( int j = minJ; j < maxJ; j++ )
+            {
+                for ( int k = minK; k < maxK; k++ )
+                {
+                	if ( DoesBlockHaveUndertow( i, j, k ) )
+            		{
+                		return true;
+            		}                	
+                }
+            }
+        }
+
+        return false;
+    }
+    
+    private boolean DoesBlockHaveUndertow( int i, int j, int k )
+    {
+		int iBlockID = worldObj.getBlockId( i, j, k );
+		
+		if (  iBlockID == Block.waterMoving.blockID || iBlockID == Block.waterStill.blockID )
+		{
+			int iFluidHeight = worldObj.getBlockMetadata( i, j, k );
+			
+			if ( iFluidHeight >= 8 )
+			{
+				return true;
+			}
+	    		
+			iBlockID = worldObj.getBlockId( i, j - 1, k );
+	    		
+    		if (  iBlockID == Block.waterMoving.blockID || iBlockID == Block.waterStill.blockID )
+    		{
+    			iFluidHeight = worldObj.getBlockMetadata( i, j - 1, k );
+    			
+    			if ( iFluidHeight >= 8 )
+    			{
+    				return true;
+    			}
+    		}	    	 
+	    		
+    		iBlockID = worldObj.getBlockId( i, j + 1, k );
+    		
+    		if (  iBlockID == Block.waterMoving.blockID || iBlockID == Block.waterStill.blockID )
+    		{
+    			iFluidHeight = worldObj.getBlockMetadata( i, j + 1, k );
+    			
+    			if ( iFluidHeight >= 8 )
+    			{
+    				return true;
+    			}
+    		}	    	 
+		}
+		
+		return false;
+    }    
+    
+    @Override
+    protected void fall( float fFallDistance )
+    {
+        super.fall( fFallDistance );
+
+        if ( !worldObj.isRemote )
+        {
+	        if ( getEntityItem().getItem().itemID == FCBetterThanWolves.fcItemBlastingOil.itemID )
+	        {
+	        	if ( fFallDistance > 3F )
+	        	{
+	        		DetonateBlastingOil();
+	        	}
+		    }
+        }
+    }
+    
+    private void DetonateBlastingOil()
+    {
+		int iStackSize = getEntityItem().stackSize;
+		
+    	health = 0;
+		setDead();
+		
+		if ( iStackSize > 0 )
+		{
+			// cap the explosion size at that of TNT to avoid overly weaponzing Blasting Oil
+			
+	        float fExplosionSize = 1.5F + ( ( iStackSize - 1 ) * 2.5F / 63.0F );
+
+	        worldObj.createExplosion( null, posX, posY, posZ, fExplosionSize, true );
+		}
+    }
+
+    @Override
+    protected boolean pushOutOfBlocks(double par1, double par3, double par5)
+    {
+    	// Inherited function added to revert Mojang's changes 
+
+        int var7 = MathHelper.floor_double(par1);
+        int var8 = MathHelper.floor_double(par3);
+        int var9 = MathHelper.floor_double(par5);
+        double var10 = par1 - (double)var7;
+        double var12 = par3 - (double)var8;
+        double var14 = par5 - (double)var9;
+
+        if (this.worldObj.isBlockNormalCube(var7, var8, var9))
+        {
+            boolean var16 = !this.worldObj.isBlockNormalCube(var7 - 1, var8, var9);
+            boolean var17 = !this.worldObj.isBlockNormalCube(var7 + 1, var8, var9);
+            boolean var18 = !this.worldObj.isBlockNormalCube(var7, var8 - 1, var9);
+            boolean var19 = !this.worldObj.isBlockNormalCube(var7, var8 + 1, var9);
+            boolean var20 = !this.worldObj.isBlockNormalCube(var7, var8, var9 - 1);
+            boolean var21 = !this.worldObj.isBlockNormalCube(var7, var8, var9 + 1);
+            byte var22 = -1;
+            double var23 = 9999.0D;
+
+            if (var16 && var10 < var23)
+            {
+                var23 = var10;
+                var22 = 0;
+            }
+
+            if (var17 && 1.0D - var10 < var23)
+            {
+                var23 = 1.0D - var10;
+                var22 = 1;
+            }
+
+            if (var18 && var12 < var23)
+            {
+                var23 = var12;
+                var22 = 2;
+            }
+
+            if (var19 && 1.0D - var12 < var23)
+            {
+                var23 = 1.0D - var12;
+                var22 = 3;
+            }
+
+            if (var20 && var14 < var23)
+            {
+                var23 = var14;
+                var22 = 4;
+            }
+
+            if (var21 && 1.0D - var14 < var23)
+            {
+                var23 = 1.0D - var14;
+                var22 = 5;
+            }
+
+            float var25 = this.rand.nextFloat() * 0.2F + 0.1F;
+
+            if (var22 == 0)
+            {
+                this.motionX = (double)(-var25);
+            }
+
+            if (var22 == 1)
+            {
+                this.motionX = (double)var25;
+            }
+
+            if (var22 == 2)
+            {
+                this.motionY = (double)(-var25);
+            }
+
+            if (var22 == 3)
+            {
+                this.motionY = (double)var25;
+            }
+
+            if (var22 == 4)
+            {
+                this.motionZ = (double)(-var25);
+            }
+
+            if (var22 == 5)
+            {
+                this.motionZ = (double)var25;
+            }
+
+            return true;
+        }
+        else
+        {
+            return false;
+        }
+    }
+    
+    @Override
+    public boolean IsItemEntity()
+    {
+    	return true;
+    }
+    
+    @Override
+    public boolean CanEntityTriggerTripwire()
+    {
+    	return false;
+    }
+    
+    private void CheckForItemDespawn()
+    {
+        if ( !worldObj.isRemote )
+        {
+	        if ( m_lAbsoluteItemDespawnTime > 0 )
+	        {
+	        	// using getTotalWorldTime() here so that /time commands and time advancement due to HC Spawn don't affect it
+	        	
+				long lOverworldTime = MinecraftServer.getServer().worldServers[0].getTotalWorldTime();
+				
+				if ( lOverworldTime >= m_lAbsoluteItemDespawnTime  )
+				{
+					setDead();
+				}				
+	        }
+	        else
+	        {
+		        if ( age >= 6000 )
+		        {
+		            setDead();
+		        }
+	        }
+        }
+    }
+    
+    public void SetEntityItemAsDroppedOnPlayerDeath( EntityPlayer player )
+    {
+    	// set items dropped on player death to despawn 1 Minecraft day (20 minutes) later
+    	// using getTotalWorldTime() here so that /time commands and time advancement due to HC Spawn don't affect it
+    	
+    	m_lAbsoluteItemDespawnTime = MinecraftServer.getServer().worldServers[0].getTotalWorldTime() + 24000L;
+    }
+    
+    static public boolean InstallationIntegrityTestEntityItem()
+    {
+    	return true;
+    }
+    // END FCMOD    
+}
