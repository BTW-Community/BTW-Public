--- a/minecraft/net/minecraft/src/EntityMob.java
+++ b/minecraft/net/minecraft/src/EntityMob.java
@@ -13,7 +13,14 @@
      * use this to react to sunlight and start to burn.
      */
     public void onLivingUpdate()
+    // FCMOD: Addded so that method can be called directly regardless of hierarchy
     {
+    	EntityMobOnLivingUpdate();
+    }
+    
+    public void EntityMobOnLivingUpdate()
+    // END FCMOD
+    {
         this.updateArmSwingProgress();
         float var1 = this.getBrightness(1.0F);
 
@@ -52,7 +59,14 @@
      * Called when the entity is attacked.
      */
     public boolean attackEntityFrom(DamageSource par1DamageSource, int par2)
+    // FCMOD: Addded so that method can be called directly regardless of hierarchy
     {
+    	return EntityMobAttackEntityFrom(par1DamageSource, par2);
+    }
+    
+    public boolean EntityMobAttackEntityFrom(DamageSource par1DamageSource, int par2)
+    // END FCMOD
+    {
         if (this.isEntityInvulnerable())
         {
             return false;
@@ -65,6 +79,9 @@
             {
                 if (var3 != this)
                 {
+                	// FCMOD: Code added so that mobs won't lose their target if they take damage from an environmental source
+                	if ( var3 != null )
+            		// END FCMOD
                     this.entityToAttack = var3;
                 }
 
@@ -81,6 +98,8 @@
         }
     }
 
+    // FCMOD: Removed and moved up in hiearchy
+	/*
     public boolean attackEntityAsMob(Entity par1Entity)
     {
         int var2 = this.getAttackStrength(par1Entity);
@@ -120,6 +139,12 @@
             {
                 par1Entity.setFire(var5 * 4);
             }
+            // FCMOD: Added so all mobs set fire to others when burning, not just zombies
+            else if ( isBurning() && rand.nextFloat() < 0.6F )
+            {
+                par1Entity.setFire( 4 );
+            }
+            // END FCMOD
 
             if (par1Entity instanceof EntityLiving)
             {
@@ -129,12 +154,21 @@
 
         return var4;
     }
+    */
+    // END FCMOD
 
     /**
      * Basic mob attack. Default to touch of death in EntityCreature. Overridden by each mob to define their attack.
      */
     protected void attackEntity(Entity par1Entity, float par2)
+    // FCMOD: Addded so that method can be called directly regardless of hierarchy
     {
+    	EntityMobAttackEntity( par1Entity, par2 );
+    }
+    
+    protected void EntityMobAttackEntity(Entity par1Entity, float par2)
+    // END FCMOD
+    {
         if (this.attackTime <= 0 && par2 < 2.0F && par1Entity.boundingBox.maxY > this.boundingBox.minY && par1Entity.boundingBox.minY < this.boundingBox.maxY)
         {
             this.attackTime = 20;
@@ -154,38 +188,41 @@
     /**
      * Checks to make sure the light is not too bright where the mob is spawning
      */
-    protected boolean isValidLightLevel()
-    {
-        int var1 = MathHelper.floor_double(this.posX);
-        int var2 = MathHelper.floor_double(this.boundingBox.minY);
-        int var3 = MathHelper.floor_double(this.posZ);
+    protected boolean isValidLightLevel() {
+        int x = MathHelper.floor_double(this.posX);
+        int y = MathHelper.floor_double(this.boundingBox.minY);
+        int z = MathHelper.floor_double(this.posZ);
 
-        if (this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, var1, var2, var3) > this.rand.nextInt(32))
-        {
+        if (this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, x, y, z) > this.rand.nextInt(32)) {
             return false;
         }
-        else
-        {
-            int var4 = this.worldObj.getBlockLightValue(var1, var2, var3);
+        else {
+            int blockLightValue = this.worldObj.getBlockLightValueNoSky(x, y, z);
 
-            if (this.worldObj.isThundering())
-            {
-                int var5 = this.worldObj.skylightSubtracted;
-                this.worldObj.skylightSubtracted = 10;
-                var4 = this.worldObj.getBlockLightValue(var1, var2, var3);
-                this.worldObj.skylightSubtracted = var5;
+            if (blockLightValue > 0) {
+            	return false;
             }
+            else {
+                int naturalLightValue = this.worldObj.GetBlockNaturalLightValue(x, y, z);
 
-            return var4 <= this.rand.nextInt(8);
+                if (this.worldObj.isThundering()) {
+                	naturalLightValue = Math.min(naturalLightValue, 5);
         }
+                
+                return naturalLightValue <= this.rand.nextInt(8);
     }
+        }
+    }
 
     /**
      * Checks if the entity's current position is a valid location to spawn this entity.
      */
     public boolean getCanSpawnHere()
     {
-        return this.isValidLightLevel() && super.getCanSpawnHere();
+    	// FCMOD: Changed
+        //return this.isValidLightLevel() && super.getCanSpawnHere();
+    	return isValidLightLevel() && super.getCanSpawnHere() && CanSpawnOnBlockBelow();
+        // END FCMOD
     }
 
     /**
@@ -195,4 +232,60 @@
     {
         return 2;
     }
+    
+    // FCMOD: Added New
+    @Override
+    public int GetMeleeAttackStrength( Entity target )
+    {
+    	return getAttackStrength( target );
 }
+    
+    protected boolean CanSpawnOnBlockBelow()
+    {
+        int i = MathHelper.floor_double( posX );
+        int j = (int)boundingBox.minY - 1;
+        int k = MathHelper.floor_double( posZ );
+        
+        return CanSpawnOnBlock( worldObj.getBlockId( i, j, k ) );        
+    }
+    
+    protected boolean CanSpawnOnBlock( int iBlockID )
+    {
+    	return iBlockID != Block.leaves.blockID;
+    }
+
+    protected void CheckForCatchFireInSun()
+    {
+        if ( !worldObj.isRemote && worldObj.isDaytime() && !isChild() && !inWater )
+        {
+            float fBrightness = getBrightness( 1F );
+
+            if ( fBrightness > 0.5F && rand.nextFloat() * 30F < ( fBrightness - 0.4F ) * 2F && 
+            	worldObj.canBlockSeeTheSky( MathHelper.floor_double( posX ), 
+            		MathHelper.floor_double( posY + (double)getEyeHeight() ), 
+            		MathHelper.floor_double( posZ ) ) )
+            {
+            	// check to make sure water isn't directly below to prevent catching fire while bobbing
+            	
+            	int iBlockBelowID = worldObj.getBlockId( MathHelper.floor_double( posX ), 
+            		MathHelper.floor_double( posY - 0.1F ), MathHelper.floor_double( posZ ) );
+            	
+            	Block blockBelow = Block.blocksList[iBlockBelowID];
+            	
+            	if ( blockBelow == null || blockBelow.blockMaterial != Material.water ) 
+            	{            	                                    
+	            	// client
+	                ItemStack headStack = getCurrentItemOrArmor( 4 );
+	            	// server
+	                //ItemStack headStack = getEquipmentInSlot( 4 );
+	
+	                if ( headStack == null && !HasHeadCrabbedSquid() )
+	                {
+	                    setFire( 8 );
+	                }
+            	}
+            }
+        }
+    }    
+    // END FCMOD
+}
