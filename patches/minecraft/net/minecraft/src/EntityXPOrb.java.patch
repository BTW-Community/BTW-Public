--- a/minecraft/net/minecraft/src/EntityXPOrb.java
+++ b/minecraft/net/minecraft/src/EntityXPOrb.java
@@ -2,6 +2,10 @@
 
 public class EntityXPOrb extends Entity
 {
+    // FCMOD: Code added
+    public boolean m_bNotPlayerOwned = false;
+    // END FCMOD
+    
     /**
      * A constantly increasing value that RenderXPOrb uses to control the colour shifting (Green / yellow)
      */
@@ -15,7 +19,12 @@
     private int xpOrbHealth = 5;
 
     /** This is how much XP this orb has. */
+    // FCMOD: Changed to public
+	/*
     private int xpValue;
+	*/
+    public int xpValue;
+    // END FCMOD
 
     /** The closest EntityPlayer to this orb. */
     private EntityPlayer closestPlayer;
@@ -23,10 +32,23 @@
     /** Threshold color for tracking players */
     private int xpTargetColor;
 
+    // FCMOD: Method added
+    public EntityXPOrb(World par1World, double par2, double par4, double par6, int par8, boolean bNotPlayerOwned )
+    {
+    	this( par1World, par2, par4, par6, par8 );
+        m_bNotPlayerOwned = bNotPlayerOwned;
+    }
+    // END FCMOD
+
     public EntityXPOrb(World par1World, double par2, double par4, double par6, int par8)
     {
         super(par1World);
+        // FCMOD: Line changed so XP orbs will fit through tight spaces (set to same size as items)
+		/*
         this.setSize(0.5F, 0.5F);
+		*/
+        setSize(0.25F, 0.25F);
+        // END FCMOD
         this.yOffset = this.height / 2.0F;
         this.setPosition(par2, par4, par6);
         this.rotationYaw = (float)(Math.random() * 360.0D);
@@ -106,13 +128,23 @@
             this.playSound("random.fizz", 0.4F, 2.0F + this.rand.nextFloat() * 0.4F);
         }
 
-        this.pushOutOfBlocks(this.posX, (this.boundingBox.minY + this.boundingBox.maxY) / 2.0D, this.posZ);
+        // FCMOD: Changed to reduce discrepancies between client and server by 
+        // pusing only on server
+        //this.pushOutOfBlocks(this.posX, (this.boundingBox.minY + this.boundingBox.maxY) / 2.0D, this.posZ);
+        if ( !worldObj.isRemote )
+        {
+            pushOutOfBlocks( posX, ( boundingBox.minY + boundingBox.maxY) / 2D, posZ );
+        }
+    	// END FCMOD
         double var1 = 8.0D;
 
         if (this.xpTargetColor < this.xpColor - 20 + this.entityId % 100)
         {
             if (this.closestPlayer == null || this.closestPlayer.getDistanceSqToEntity(this) > var1 * var1)
             {
+				// FCMOD: Added
+		        if ( !m_bNotPlayerOwned )
+	        	// END FCMOD
                 this.closestPlayer = this.worldObj.getClosestPlayerToEntity(this, var1);
             }
 
@@ -124,11 +156,21 @@
             double var3 = (this.closestPlayer.posX - this.posX) / var1;
             double var5 = (this.closestPlayer.posY + (double)this.closestPlayer.getEyeHeight() - this.posY) / var1;
             double var7 = (this.closestPlayer.posZ - this.posZ) / var1;
+            // FCMOD: Code Changed for optimization
+            /*
             double var9 = Math.sqrt(var3 * var3 + var5 * var5 + var7 * var7);
             double var11 = 1.0D - var9;
 
             if (var11 > 0.0D)
             {
+            */
+            double dDistanceSq = var3 * var3 + var5 * var5 + var7 * var7;
+
+            if (dDistanceSq < 1.0D)
+            {
+                double var9 = Math.sqrt( dDistanceSq );
+                double var11 = 1.0D - var9;
+            // 	END FCMOD
                 var11 *= var11;
                 this.motionX += var3 / var9 * var11 * 0.1D;
                 this.motionY += var5 / var9 * var11 * 0.1D;
@@ -216,6 +258,9 @@
         par1NBTTagCompound.setShort("Health", (short)((byte)this.xpOrbHealth));
         par1NBTTagCompound.setShort("Age", (short)this.xpOrbAge);
         par1NBTTagCompound.setShort("Value", (short)this.xpValue);
+        // FCMOD: Code added        
+        par1NBTTagCompound.setBoolean("m_bNotPlayerOwned", m_bNotPlayerOwned);
+        // END FCMOD
     }
 
     /**
@@ -226,13 +271,25 @@
         this.xpOrbHealth = par1NBTTagCompound.getShort("Health") & 255;
         this.xpOrbAge = par1NBTTagCompound.getShort("Age");
         this.xpValue = par1NBTTagCompound.getShort("Value");
+        // FCMOD: Code added        
+        if ( par1NBTTagCompound.hasKey( "m_bNotPlayerOwned" ) )
+        {
+        	m_bNotPlayerOwned = par1NBTTagCompound.getBoolean( "m_bNotPlayerOwned" );
     }
+        // END FCMOD
+    }
 
     /**
      * Called by a player entity when they collide with an entity
      */
     public void onCollideWithPlayer(EntityPlayer par1EntityPlayer)
     {
+        // FCMOD: Code added
+    	if ( m_bNotPlayerOwned )
+    	{
+    		return;
+    	}
+    	// END FCMOD
         if (!this.worldObj.isRemote)
         {
             if (this.field_70532_c == 0 && par1EntityPlayer.xpCooldown == 0)
@@ -278,4 +335,42 @@
     {
         return false;
     }
+    
+    // FCMOD: inherited function added so that blocks like Hoppers get collision events with items on top.  
+    // Copy of code from Entity.java, changes marked with FCMOD.
+    @Override
+    protected void doBlockCollisions()
+    {
+        int i = MathHelper.floor_double(boundingBox.minX + 0.001D);
+        // FCMOD: code change
+        /*
+        int j = MathHelper.floor_double(boundingBox.minY + 0.001D);
+        */
+        int j = MathHelper.floor_double(boundingBox.minY - 0.01D);
+        // END FCMOD
+        int k = MathHelper.floor_double(boundingBox.minZ + 0.001D);
+        int l = MathHelper.floor_double(boundingBox.maxX - 0.001D);
+        int i1 = MathHelper.floor_double(boundingBox.maxY - 0.001D);
+        int j1 = MathHelper.floor_double(boundingBox.maxZ - 0.001D);
+
+        if (worldObj.checkChunksExist(i, j, k, l, i1, j1))
+        {
+            for (int k1 = i; k1 <= l; k1++)
+            {
+                for (int l1 = j; l1 <= i1; l1++)
+                {
+                    for (int i2 = k; i2 <= j1; i2++)
+                    {
+                        int j2 = worldObj.getBlockId(k1, l1, i2);
+
+                        if (j2 > 0)
+                        {
+                            Block.blocksList[j2].onEntityCollidedWithBlock(worldObj, k1, l1, i2, this);
 }
+                    }
+                }
+            }
+        }
+    }
+    // END FCMOD
+}
