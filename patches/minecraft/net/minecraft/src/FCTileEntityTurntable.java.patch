--- /dev/null
+++ b/minecraft/net/minecraft/src/FCTileEntityTurntable.java
@@ -0,0 +1,217 @@
+// FCMOD
+
+package net.minecraft.src;
+
+import java.util.List;
+
+public class FCTileEntityTurntable extends TileEntity {
+	private final int maxHeightOfBlocksRotated = 2;
+	
+	private int rotationTickCount;
+	public int m_iCraftingRotationCount;
+	
+    private static int ticksToRotate[];
+    
+	private int switchOverride; // legacy support for old data value
+	
+    static {
+    	ticksToRotate = (new int[] {
+			10, 
+			20, 40, 80, 200, 600,
+			1200, 2400, 6000, 12000, 24000
+        });
+    }
+    
+    public FCTileEntityTurntable() {
+    	rotationTickCount = 0;
+    	m_iCraftingRotationCount = 0;
+    	
+    	switchOverride = -1;
+    }
+    
+    @Override
+    public void readFromNBT(NBTTagCompound nbttagcompound) {
+        super.readFromNBT(nbttagcompound);
+        
+    	rotationTickCount = nbttagcompound.getInteger("m_iRotationCount"); // legacy name
+    	
+        if (nbttagcompound.hasKey("m_iSwitchSetting")) {
+        	// legacy data format support
+        	switchOverride = nbttagcompound.getInteger("m_iSwitchSetting");
+	    	
+	    	if (switchOverride > 3) {
+	    		switchOverride = 3;
+	    	}
+        }
+    	
+        if(nbttagcompound.hasKey("m_iPotteryRotationCount")) { // legacy name
+        	m_iCraftingRotationCount = nbttagcompound.getInteger("m_iPotteryRotationCount"); // legacy name
+        }
+    }
+    
+    @Override
+    public void writeToNBT(NBTTagCompound nbttagcompound) {
+        super.writeToNBT(nbttagcompound);
+        
+        nbttagcompound.setInteger("m_iRotationCount", rotationTickCount); // legacy name        
+        nbttagcompound.setInteger("m_iPotteryRotationCount", m_iCraftingRotationCount); // legacy name   
+    }
+        
+    @Override
+    public void updateEntity() {
+    	// Remove the following block for the server
+    	if (worldObj.isRemote) {
+        	if (((FCBlockTurntable) FCBetterThanWolves.fcTurntable).IsBlockMechanicalOn(worldObj, xCoord, yCoord, zCoord))
+        	{
+        		rotationTickCount++;
+        		
+        		if (rotationTickCount >= GetTicksToRotate()) {
+                    worldObj.playSound((double)xCoord + 0.5D, (double)yCoord + 0.5D, (double)zCoord + 0.5D, "random.click", 0.05F, 1.0F);
+        			
+            		rotationTickCount = 0;    	
+        		}
+        	}
+        	else {
+        		rotationTickCount = 0;    	
+    		}
+        	
+    		return;
+    	}
+    	
+    	if (switchOverride >= 0) {
+    		// support for legacy data format
+    		((FCBlockTurntable)FCBetterThanWolves.fcTurntable).SetSwitchSetting(worldObj, xCoord, yCoord, zCoord, switchOverride);
+				
+			switchOverride = -1;
+    	}
+    	
+        byte updateOffset = 9; // standard block update range + 1 to take into account stuff that may be attached
+
+        if (!worldObj.checkChunksExist(xCoord - updateOffset, yCoord - updateOffset, zCoord - updateOffset, 
+        		xCoord + updateOffset, yCoord + updateOffset, zCoord + updateOffset))
+        {
+        	return;
+    	}
+
+    	if (((FCBlockTurntable)FCBetterThanWolves.fcTurntable).
+			IsBlockMechanicalOn(worldObj, xCoord, yCoord, zCoord))
+    	{
+    		rotationTickCount++;
+    		
+    		if (rotationTickCount >= GetTicksToRotate()) {
+    			RotateTurntable();
+        		rotationTickCount = 0;    	
+    		}
+    	}
+    	else {
+    		rotationTickCount = 0;    	
+		}
+    }
+    
+	//------------- Class Specific Methods ------------//
+    
+    private int GetTicksToRotate() {
+    	return ticksToRotate[((FCBlockTurntable)FCBetterThanWolves.fcTurntable).GetSwitchSetting(worldObj, xCoord, yCoord, zCoord)];
+    }
+    
+    private void RotateTurntable() {        
+    	boolean reverseDirection = ((FCBlockTurntable) FCBetterThanWolves.fcTurntable).IsBlockRedstoneOn(worldObj, xCoord, yCoord, zCoord);
+    	
+    	int craftingCounter = m_iCraftingRotationCount;
+    	
+    	for (int j = yCoord + 1; j <= yCoord + maxHeightOfBlocksRotated; j++) {
+        	Block targetBlock = Block.blocksList[worldObj.getBlockId(xCoord, j, zCoord)];
+
+        	if (targetBlock != null && targetBlock.CanRotateOnTurntable(worldObj, xCoord, j, zCoord)) {
+	    		// have to store the transmission capacity as rotation may affect it (like with crafter blocks)
+	    		boolean canTransmitHorizontally = targetBlock.CanTransmitRotationHorizontallyOnTurntable(worldObj, xCoord, j, zCoord);
+	    		
+	    		boolean canTransmitVertically = targetBlock.CanTransmitRotationVerticallyOnTurntable(worldObj, xCoord, j, zCoord);
+	    		
+	    		craftingCounter = targetBlock.RotateOnTurntable(worldObj, xCoord, j, zCoord, reverseDirection, craftingCounter);
+				
+		    	if (canTransmitHorizontally) {
+			    	RotateBlocksAttachedToBlock(xCoord, j, zCoord, reverseDirection);
+		    	}
+		    	
+		    	if (!canTransmitVertically){
+		    		break;
+		    	}
+        	}
+        	else {
+        		break;
+        	}
+    	}
+    	
+    	if (craftingCounter > m_iCraftingRotationCount) {
+    		m_iCraftingRotationCount = craftingCounter;
+    	}
+    	else {
+    		m_iCraftingRotationCount = 0;
+    	}
+    	
+    	// notify the neighbours so Buddy can pick up on this change
+    	
+    	worldObj.notifyBlocksOfNeighborChange(xCoord, yCoord, zCoord, FCBetterThanWolves.fcTurntable.blockID);
+    }   
+    
+	private void RotateBlocksAttachedToBlock(int x, int y, int z, boolean reverseDirection) {
+		int newBlockIDs[] = new int[4];
+		int newMetadataArray[] = new int[4];
+		
+		for (int i = 0; i < 4; i++) {
+			newBlockIDs[i] = 0;
+			newMetadataArray[i] = 0;
+		}
+		
+		for (int i = 2; i <=5; i++) {
+			FCUtilsBlockPos pos = new FCUtilsBlockPos(x, y, z, i);
+			
+			int blockID = worldObj.getBlockId(pos.i, pos.j, pos.k);
+			Block block = Block.blocksList[blockID];
+			
+			if (block != null) {
+				int oppositeFacing = Block.GetOppositeFacing(i);
+				
+				if (block.CanRotateAroundBlockOnTurntableToFacing(worldObj, pos.i, pos.j, pos.k, oppositeFacing)) {
+					if (block.OnRotatedAroundBlockOnTurntableToFacing(worldObj, pos.i, pos.j, pos.k, oppositeFacing )) {
+						int destinationFacing = Block.RotateFacingAroundJ(i, reverseDirection);
+						
+						newBlockIDs[destinationFacing - 2] = blockID;
+						
+						newMetadataArray[destinationFacing - 2] = block.GetNewMetadataRotatedAroundBlockOnTurntableToFacing(
+							worldObj, pos.i, pos.j, pos.k, 
+							oppositeFacing, Block.GetOppositeFacing(destinationFacing));
+						
+						worldObj.setBlockWithNotify(pos.i, pos.j, pos.k, 0);
+					}
+				}
+			}
+		}
+		
+		for (int i = 0; i < 4; i++) {
+			int blockID = newBlockIDs[i];
+			
+			if (blockID != 0) {
+				int facing = i + 2;
+				int metadata = newMetadataArray[i];
+				
+				FCUtilsBlockPos pos = new FCUtilsBlockPos(x, y, z);				
+				pos.AddFacingAsOffset(facing);
+				
+				if (FCUtilsWorld.IsReplaceableBlock(worldObj, pos.i, pos.j, pos.k)) {
+					worldObj.setBlockAndMetadataWithNotify(pos.i, pos.j, pos.k, blockID, metadata);
+				}
+				else {
+					// target block is occupied.  Eject rotated block as item at old location
+					Block block = Block.blocksList[blockID];
+					
+					int oldFacing = Block.RotateFacingAroundJ(facing, !reverseDirection);
+					FCUtilsBlockPos oldPos = new FCUtilsBlockPos(x, y, z, oldFacing);
+					
+					block.dropBlockAsItem(worldObj, oldPos.i, oldPos.j, oldPos.k, blockID, 0);
+				}
+			}
+		}
+	}	
+}
\ No newline at end of file
