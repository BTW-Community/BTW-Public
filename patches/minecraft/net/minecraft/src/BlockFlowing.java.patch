--- a/minecraft/net/minecraft/src/BlockFlowing.java
+++ b/minecraft/net/minecraft/src/BlockFlowing.java
@@ -65,6 +65,12 @@
             var12 = this.getSmallestFlowDecay(par1World, par2 + 1, par3, par4, var12);
             var12 = this.getSmallestFlowDecay(par1World, par2, par3, par4 - 1, var12);
             var12 = this.getSmallestFlowDecay(par1World, par2, par3, par4 + 1, var12);
+            
+            // FCMOD: Code added
+        	var12 = GetSmallestFlowDecayFromCustomSources( par1World, par2, par3, par4, var12 );          
+        	int iTickRate = tickRate(par1World);
+            // END FCMOD
+        	
             var10 = var12 + var7;
 
             if (var10 >= 8 || var12 < 0)
@@ -98,11 +104,19 @@
                 }
             }
 
+        	// FCMOD: Code change to import 1.6 lava flow fix with additional variability so it doesn't look as weird
+            /*
             if (this.blockMaterial == Material.lava && var6 < 8 && var10 < 8 && var10 > var6 && par5Random.nextInt(4) != 0)
             {
                 var10 = var6;
                 var8 = false;
             }
+            */
+            if ( this.blockMaterial == Material.lava && var6 < 8 && var10 < 8 && var10 > var6 )
+            {
+            	iTickRate += iTickRate * ( 1 + par5Random.nextInt( 4 ) );
+            }
+            // END FCMOD
 
             if (var10 == var6)
             {
@@ -122,7 +136,12 @@
                 else
                 {
                     par1World.setBlockMetadataWithNotify(par2, par3, par4, var10, 2);
+                	// FCMOD: Code change to import 1.6 lava flow fix with additional variability so it doesn't look as weird
+                    /*
                     par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
+                    */
+                    par1World.scheduleBlockUpdate( par2, par3, par4, this.blockID, iTickRate );
+                    // END FCMOD
                     par1World.notifyBlocksOfNeighborChange(par2, par3, par4, this.blockID);
                 }
             }
@@ -136,7 +155,11 @@
         {
             if (this.blockMaterial == Material.lava && par1World.getBlockMaterial(par2, par3 - 1, par4) == Material.water)
             {
-                par1World.setBlock(par2, par3 - 1, par4, Block.stone.blockID);
+            	// FCMOD: Changed
+                //par1World.setBlock(par2, par3 - 1, par4, Block.stone.blockID);
+                par1World.setBlock( par2, par3 - 1, par4, 
+                	FCBetterThanWolves.fcBlockLavaPillow.blockID );
+                // END FCMOD
                 this.triggerLavaMixEffects(par1World, par2, par3 - 1, par4);
                 return;
             }
@@ -205,7 +228,10 @@
                 }
                 else
                 {
-                    Block.blocksList[var6].dropBlockAsItem(par1World, par2, par3, par4, par1World.getBlockMetadata(par2, par3, par4), 0);
+                	// FCMOD: Changed                	
+                    //Block.blocksList[var6].dropBlockAsItem(par1World, par2, par3, par4, par1World.getBlockMetadata(par2, par3, par4), 0);
+                	Block.blocksList[var6].OnFluidFlowIntoBlock( par1World, par2, par3, par4, this );
+                	// END FCMOD
                 }
             }
 
@@ -342,6 +368,8 @@
     /**
      * Returns true if block at coords blocks fluids
      */
+    // FCMOD: Removed and replaced later
+    /*
     private boolean blockBlocksFlow(World par1World, int par2, int par3, int par4)
     {
         int var5 = par1World.getBlockId(par2, par3, par4);
@@ -363,6 +391,8 @@
             return true;
         }
     }
+    */
+    // END FCMOD
 
     /**
      * getSmallestFlowDecay(World world, intx, int y, int z, int currentSmallestFlowDecay) - Looks up the flow decay at
@@ -420,4 +450,58 @@
     {
         return false;
     }
+    
+    // FCMOD: Added New   
+    @Override
+    public void onNeighborBlockChange( World world, int i, int j, int k, int iNeighborBlockID )
+    {
+    	super.onNeighborBlockChange( world, i, j, k, iNeighborBlockID );
+    	
+    	// these blocks normally have an update scheduled, and randomly get ticked to 
+    	// ensure they don't get stalled on chunk load, but can sit there for extend periods
+    	// until that happens, so this ensures player interaction will get them going again
+    	
+    	if ( !world.IsUpdatePendingThisTickForBlock( i, j, k, blockID ) )
+    	{
+    		world.scheduleBlockUpdate( i, j, k, blockID, tickRate( world ) );
 }
+    }
+
+	private int GetSmallestFlowDecayFromCustomSources( World world, int i, int j, int k, int iSmallestFlowDecay )
+	{
+		// note that this function doesn't update numAdjacentSources as that is used for new source block creation
+		
+        if ( iSmallestFlowDecay != 0 )
+        {
+        	for ( int iFacing = 0; iFacing < 6; iFacing++ )
+        	{
+        		int iTargetDecay = FCUtilsWorld.IsValidSourceForFluidBlockToFacing( world, i, j, k, iFacing );
+        		
+				if ( iTargetDecay == 0 )
+				{
+					iSmallestFlowDecay = 0;
+					
+					break;
+				}
+				
+				if ( iTargetDecay > 0 )
+				{
+					if ( iSmallestFlowDecay < 0 || iTargetDecay < iSmallestFlowDecay )
+					{
+						iSmallestFlowDecay = iTargetDecay;
+					}
+				}
+        	}
+        }
+        
+		return iSmallestFlowDecay;
+	}
+	
+    public boolean blockBlocksFlow( World world, int i, int j, int k )
+    {
+        Block block = blocksList[world.getBlockId( i, j, k )];
+        
+        return block != null && block.GetPreventsFluidFlow( world, i, j, k, this );
+    }
+	// END FCMOD
+}
