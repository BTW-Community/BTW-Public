--- a/minecraft/net/minecraft/src/ContainerMerchant.java
+++ b/minecraft/net/minecraft/src/ContainerMerchant.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.Iterator;
+
 public class ContainerMerchant extends Container
 {
     /** Instance of Merchant. */
@@ -14,22 +16,42 @@
         this.theMerchant = par2IMerchant;
         this.theWorld = par3World;
         this.merchantInventory = new InventoryMerchant(par1InventoryPlayer.player, par2IMerchant);
+    	// FCMOD: Changed y offset of GUI
+    	/*
         this.addSlotToContainer(new Slot(this.merchantInventory, 0, 36, 53));
         this.addSlotToContainer(new Slot(this.merchantInventory, 1, 62, 53));
         this.addSlotToContainer(new SlotMerchantResult(par1InventoryPlayer.player, par2IMerchant, this.merchantInventory, 2, 120, 53));
+        */
+        this.addSlotToContainer(new Slot(this.merchantInventory, 0, 36, 119));
+        this.addSlotToContainer(new Slot(this.merchantInventory, 1, 62, 119));
+        this.addSlotToContainer(new SlotMerchantResult(par1InventoryPlayer.player, par2IMerchant, this.merchantInventory, 2, 120, 119));
+        // END FCMOD
         int var4;
 
         for (var4 = 0; var4 < 3; ++var4)
         {
             for (int var5 = 0; var5 < 9; ++var5)
             {
+            	// FCMOD: Changing y offset of GUI
+            	/*
                 this.addSlotToContainer(new Slot(par1InventoryPlayer, var5 + var4 * 9 + 9, 8 + var5 * 18, 84 + var4 * 18));
+                */
+                this.addSlotToContainer(new Slot(par1InventoryPlayer, 
+                	var5 + var4 * 9 + 9, 
+                	8 + var5 * 18, 
+                	157 + var4 * 18));
+            	// END FCMOD
             }
         }
 
         for (var4 = 0; var4 < 9; ++var4)
         {
+        	// FCMOD: Changing y offset of GUI
+        	/*
             this.addSlotToContainer(new Slot(par1InventoryPlayer, var4, 8 + var4 * 18, 142));
+            */
+            this.addSlotToContainer(new Slot(par1InventoryPlayer, var4, 8 + var4 * 18, 215));
+        	// END FCMOD
         }
     }
 
@@ -41,6 +63,10 @@
     public void addCraftingToCrafters(ICrafting par1ICrafting)
     {
         super.addCraftingToCrafters(par1ICrafting);
+        
+        // FCMOD: Added (Note that uses different function name on client and server)
+        OnCrafterAdded( par1ICrafting );
+        // END FCMOD
     }
 
     /**
@@ -49,6 +75,10 @@
     public void detectAndSendChanges()
     {
         super.detectAndSendChanges();
+        
+        // FCMOD: Added        
+        DetectAndSendChangesToBTSMTradeVariables();
+        // END FCMOD
     }
 
     /**
@@ -65,7 +95,11 @@
         this.merchantInventory.setCurrentRecipeIndex(par1);
     }
 
+    // FCMOD: Code removed and replaced by mod functionality later (client only)
+    /*
     public void updateProgressBar(int par1, int par2) {}
+    */
+    // END FCMOD
 
     public boolean canInteractWith(EntityPlayer par1EntityPlayer)
     {
@@ -75,62 +109,86 @@
     /**
      * Called when a player shift-clicks on a slot. You must override this or you will crash when someone does that.
      */
-    public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer, int par2)
+    public ItemStack transferStackInSlot(EntityPlayer player, int slotNum)
     {
-        ItemStack var3 = null;
-        Slot var4 = (Slot)this.inventorySlots.get(par2);
+        ItemStack stackCopy = null;
+        Slot slot = (Slot)this.inventorySlots.get(slotNum);
 
-        if (var4 != null && var4.getHasStack())
+        if (slot != null && slot.getHasStack())
         {
-            ItemStack var5 = var4.getStack();
-            var3 = var5.copy();
+            ItemStack stack = slot.getStack();
+            stackCopy = stack.copy();
 
-            if (par2 == 2)
+            if (slotNum == 2)
             {
-                if (!this.mergeItemStack(var5, 3, 39, true))
+            	// FCMOD: Code added to abort trade if it's used up
+            	if ( merchantInventory.getCurrentRecipe().func_82784_g() )
                 {
+                    slot.putStack((ItemStack)null);
+
                     return null;
                 }
+            	// END FCMOD
 
-                var4.onSlotChange(var5, var3);
+                if (!this.mergeItemStack(stack, 3, 39, true))
+                {
+                    return null;
             }
-            else if (par2 != 0 && par2 != 1)
+
+                slot.onSlotChange(stack, stackCopy);
+            }
+            else if (slotNum != 0 && slotNum != 1)
             {
-                if (par2 >= 3 && par2 < 30)
+                if (slotNum >= 3 && slotNum < 30)
                 {
+                	// FCMOD: Changed to allow shift-click transfer to merchant slots
+                	/*
                     if (!this.mergeItemStack(var5, 30, 39, false))
+                	*/
+                    if (!this.mergeItemStack(stack, 0, 2, false))
+                	// END FCMOD
                     {
                         return null;
                     }
                 }
+                // FCMOD: Changed to allow shift-click transfer to merchant slots
+                /*
                 else if (par2 >= 30 && par2 < 39 && !this.mergeItemStack(var5, 3, 30, false))
+                */
+                else if (slotNum >= 30 && slotNum < 39 && !this.mergeItemStack(stack, 0, 2, false))
+            	// END FCMOD
                 {
                     return null;
                 }
             }
+        	// FCMOD: Changed to prioritize player hotbar
+        	/*
             else if (!this.mergeItemStack(var5, 3, 39, false))
+            */
+            else if (!this.mergeItemStack(stack, 3, 39, true))
+        	// END FCMOD
             {
                 return null;
             }
 
-            if (var5.stackSize == 0)
+            if (stack.stackSize == 0)
             {
-                var4.putStack((ItemStack)null);
+                slot.putStack((ItemStack)null);
             }
             else
             {
-                var4.onSlotChanged();
+                slot.onSlotChanged();
             }
 
-            if (var5.stackSize == var3.stackSize)
+            if (stack.stackSize == stackCopy.stackSize)
             {
                 return null;
             }
 
-            var4.onPickupFromSlot(par1EntityPlayer, var5);
+            slot.onPickupFromSlot(player, stack);
         }
 
-        return var3;
+        return stackCopy;
     }
 
     /**
@@ -159,4 +217,78 @@
             }
         }
     }
+    
+    // FCMOD: Added
+    public int m_iAssociatedVillagerTradeLevel = 0;
+    public int m_iAssociatedVillagerTradeXP = 0;
+    public int m_iAssociatedVillagerTradeMaxXP = 0;
+    
+    private void DetectAndSendChangesToBTSMTradeVariables()
+    {
+        int iCurrentTradeLevel = theMerchant.GetCurrentTradeLevel();
+        
+        if ( iCurrentTradeLevel != m_iAssociatedVillagerTradeLevel )
+        {
+        	SendProgressBarUpdateToAllCrafters( 0, iCurrentTradeLevel );
+        	
+        	m_iAssociatedVillagerTradeLevel = iCurrentTradeLevel;        	
 }
+        
+        int iCurrentTradeXP = theMerchant.GetCurrentTradeXP();
+        
+        if ( iCurrentTradeXP != m_iAssociatedVillagerTradeXP )
+        {
+        	SendProgressBarUpdateToAllCrafters( 1, iCurrentTradeXP );
+        	
+        	m_iAssociatedVillagerTradeXP = iCurrentTradeXP;         	
+        }
+        
+        int iCurrentTradeMaxXP = theMerchant.GetCurrentTradeMaxXP();
+        
+        if ( iCurrentTradeMaxXP != m_iAssociatedVillagerTradeMaxXP )
+        {
+        	SendProgressBarUpdateToAllCrafters( 2, iCurrentTradeMaxXP );
+        	
+        	m_iAssociatedVillagerTradeMaxXP = iCurrentTradeMaxXP;         	
+        }
+    }
+    
+    public void SendProgressBarUpdateToAllCrafters( int iVariableIndex, int iValue )
+    {
+        Iterator iterator = crafters.iterator();
+
+        while( iterator.hasNext() )
+        {
+            ICrafting icrafting = (ICrafting)iterator.next();
+
+            icrafting.sendProgressBarUpdate( this, iVariableIndex, iValue );
+        }
+    }
+    
+    public void OnCrafterAdded( ICrafting crafter )
+    {
+        crafter.sendProgressBarUpdate( this, 0, m_iAssociatedVillagerTradeLevel );
+        crafter.sendProgressBarUpdate( this, 1, m_iAssociatedVillagerTradeXP );
+        crafter.sendProgressBarUpdate( this, 2, m_iAssociatedVillagerTradeMaxXP );
+    }
+    
+	//----------- Client Side Functionality -----------//
+	
+	@Override
+    public void updateProgressBar( int iVariableIndex, int iValue )
+    {
+        if ( iVariableIndex == 0 )
+        {
+        	m_iAssociatedVillagerTradeLevel = iValue;
+        }
+        else if ( iVariableIndex == 1 )
+        {
+            m_iAssociatedVillagerTradeXP = iValue;
+        }
+        else if ( iVariableIndex == 2 )
+        {
+            m_iAssociatedVillagerTradeMaxXP = iValue;
+        }
+    }
+    // END FCMOD
+}
