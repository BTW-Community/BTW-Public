--- a/minecraft/net/minecraft/src/ShapedRecipes.java
+++ b/minecraft/net/minecraft/src/ShapedRecipes.java
@@ -11,6 +11,8 @@
     /** Is a array of ItemStack that composes the recipe. */
     private ItemStack[] recipeItems;
 
+    private ItemStack[] recipeSecondaryOutputs;
+
     /** Is the ItemStack that you get when craft the recipe. */
     private ItemStack recipeOutput;
 
@@ -37,10 +39,18 @@
      */
     public boolean matches(InventoryCrafting par1InventoryCrafting, World par2World)
     {
+    	// FCMOD: Changed the following to support 4X4 crafting grid
+    	/*
         for (int var3 = 0; var3 <= 3 - this.recipeWidth; ++var3)
         {
             for (int var4 = 0; var4 <= 3 - this.recipeHeight; ++var4)
             {
+        */    	
+        for (int var3 = 0; var3 <= 4 - this.recipeWidth; ++var3)
+        {
+            for (int var4 = 0; var4 <= 4 - this.recipeHeight; ++var4)
+            {
+    	// END FCMOD
                 if (this.checkMatch(par1InventoryCrafting, var3, var4, true))
                 {
                     return true;
@@ -61,10 +71,18 @@
      */
     private boolean checkMatch(InventoryCrafting par1InventoryCrafting, int par2, int par3, boolean par4)
     {
+    	// FCMOD: Changed the following to support 4X4 crafting grid
+    	/*
         for (int var5 = 0; var5 < 3; ++var5)
         {
             for (int var6 = 0; var6 < 3; ++var6)
             {
+        */
+        for (int var5 = 0; var5 < 4; ++var5)
+        {
+            for (int var6 = 0; var6 < 4; ++var6)
+            {
+    	// END FCMOD
                 int var7 = var5 - par2;
                 int var8 = var6 - par3;
                 ItemStack var9 = null;
@@ -83,6 +101,13 @@
 
                 ItemStack var10 = par1InventoryCrafting.getStackInRowAndColumn(var5, var6);
 
+                // FCMOD: Code added to ignore Moulds                
+                if ( var10 != null && var10.itemID == FCBetterThanWolves.fcItemMould.itemID )
+                {
+                	var10 = null;
+                }
+                // END FCMOD
+                
                 if (var10 != null || var9 != null)
                 {
                     if (var10 == null && var9 != null || var10 != null && var9 == null)
@@ -142,4 +167,67 @@
         this.field_92101_f = true;
         return this;
     }
+
+    // FCMOD: Added
+    private boolean m_bHasSecondaryOutput = false;
+    
+    @Override
+    public boolean matches( IRecipe recipe )
+    {
+    	if ( recipe instanceof ShapedRecipes )
+    	{
+    		ShapedRecipes shapedRecipe = (ShapedRecipes)recipe;
+    		
+    		if ( recipeWidth == shapedRecipe.recipeWidth  && recipeHeight == shapedRecipe.recipeHeight )
+    		{
+    			if ( recipeOutputItemID == shapedRecipe.recipeOutputItemID &&
+    				recipeOutput.stackSize == shapedRecipe.recipeOutput.stackSize && 
+    				recipeOutput.getItemDamage() == shapedRecipe.recipeOutput.getItemDamage() )
+    			{
+    				if ( recipeItems.length == shapedRecipe.recipeItems.length )
+    				{
+	    				for ( int iTempIndex = 0; iTempIndex < recipeItems.length; iTempIndex++ )
+	    				{
+	    					ItemStack item1 = recipeItems[iTempIndex];
+	    					ItemStack item2 = shapedRecipe.recipeItems[iTempIndex]; 
+	    						
+	    					if ( item1 == null || item2 == null )
+	    					{
+	    						if ( item1 != null || item2 != null )
+	    						{
+	    							return false;
 }
+	    					}
+	    					else if ( item1.getItem().itemID != item2.getItem().itemID ||
+	    							item1.stackSize != item2.stackSize ||
+	    							item1.getItemDamage() != item2.getItemDamage() )
+	    					{
+	    						return false;
+	    					}
+	    				}
+	    				
+	    				return true;
+    				}
+    			}
+    		}
+    	}
+    	
+    	return false;
+    }
+    
+    @Override
+    public boolean HasSecondaryOutput()
+    {
+    	return recipeSecondaryOutputs != null;
+    }
+    
+    public void SetSecondaryOutput(ItemStack[] secondaryOutput)
+    {
+    	this.recipeSecondaryOutputs = secondaryOutput;
+    }
+    
+    public ItemStack[] getSecondaryOutput(IInventory inventory) {
+    	return this.recipeSecondaryOutputs;
+    }
+    // END FCMOD    
+}
