--- a/minecraft/net/minecraft/src/SpawnerAnimals.java
+++ b/minecraft/net/minecraft/src/SpawnerAnimals.java
@@ -1,17 +1,24 @@
 package net.minecraft.src;
 
+import java.lang.reflect.InvocationTargetException;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
 import java.util.Random;
 
 public final class SpawnerAnimals
 {
     /** The 17x17 area around the player where mobs can spawn */
-    private static HashMap eligibleChunksForSpawning = new HashMap();
+	// FCMOD: Removed in favor of using the world's active chunk list	
+	//private static HashMap eligibleChunksForSpawning = new HashMap();
+	// END FCMOD
 
     /** An array of entity classes that spawn at night. */
-    protected static final Class[] nightSpawnEntities = new Class[] {EntitySpider.class, EntityZombie.class, EntitySkeleton.class};
+	// FCMOD: Removed due to deprecation
+	//protected static final Class[] nightSpawnEntities = new Class[] {EntitySpider.class, EntityZombie.class, EntitySkeleton.class};
+	// END FCMOD
 
     /**
      * Given a chunk, find a random position in it.
@@ -37,6 +44,8 @@
         }
         else
         {
+			// FCMOD: Changed
+			/*
             eligibleChunksForSpawning.clear();
             int var4;
             int var7;
@@ -66,9 +75,17 @@
                     }
                 }
             }
+			 */
+			LinkedList<ChunkCoordIntPair> activeChunks = par0WorldServer.GetActiveChunksCoordsList();
 
+			int var4;
+			int var7;
+			// END FCMOD
+
             var4 = 0;
-            ChunkCoordinates var32 = par0WorldServer.getSpawnPoint();
+			// FCMOD: Removed
+			//ChunkCoordinates var32 = par0WorldServer.getSpawnPoint();
+			// END FCMOD
             EnumCreatureType[] var33 = EnumCreatureType.values();
             var7 = var33.length;
 
@@ -76,23 +93,41 @@
             {
                 EnumCreatureType var35 = var33[var34];
 
-                if ((!var35.getPeacefulCreature() || par2) && (var35.getPeacefulCreature() || par1) && (!var35.getAnimal() || par3) && par0WorldServer.countEntities(var35.getCreatureClass()) <= var35.getMaxNumberOfCreature() * eligibleChunksForSpawning.size() / 256)
+				// FCMOD: Changed to use custom spawn cap counting
+				//if ((!var35.getPeacefulCreature() || par2) && (var35.getPeacefulCreature() || par1) && (!var35.getAnimal() || par3) && par0WorldServer.countEntities(var35.getCreatureClass()) <= var35.getMaxNumberOfCreature() * eligibleChunksForSpawning.size() / 256)
+				if ( ( !var35.getPeacefulCreature() || par2 ) && 
+						( var35.getPeacefulCreature() || par1 ) && 
+						( !var35.getAnimal() || par3 ) && 
+						par0WorldServer.CountEntitiesThatApplyToSpawnCap( var35.getCreatureClass() ) <= 
+						var35.getMaxNumberOfCreature() * activeChunks.size() / 256 )
+					// END FCMOD
                 {
-                    Iterator var36 = eligibleChunksForSpawning.keySet().iterator();
+					// FCMOD: Changed
+					//Iterator var37 = eligibleChunksForSpawning.keySet().iterator();
+					Iterator var37 = activeChunks.iterator();                    
+					// END FCMOD
                     label110:
 
-                    while (var36.hasNext())
+						while (var37.hasNext())
                     {
-                        ChunkCoordIntPair var37 = (ChunkCoordIntPair)var36.next();
+							ChunkCoordIntPair var36 = (ChunkCoordIntPair)var37.next();
 
-                        if (!((Boolean)eligibleChunksForSpawning.get(var37)).booleanValue())
+							// FCMOD: Removed
+							//if (!((Boolean)eligibleChunksForSpawning.get(var36)).booleanValue())
+							// END FCMOD
                         {
-                            ChunkPosition var38 = getRandomSpawningPointInChunk(par0WorldServer, var37.chunkXPos, var37.chunkZPos);
+								ChunkPosition var38 = getRandomSpawningPointInChunk(par0WorldServer, var36.chunkXPos, var36.chunkZPos);
                             int var13 = var38.x;
                             int var14 = var38.y;
                             int var15 = var38.z;
 
-                            if (!par0WorldServer.isBlockNormalCube(var13, var14, var15) && par0WorldServer.getBlockMaterial(var13, var14, var15) == var35.getCreatureMaterial())
+								// FCMOD: Changed as this was preventing spawns in weird circumstances
+								// like superflat worlds with snow cover.
+								//if (!par0WorldServer.isBlockNormalCube(var13, var14, var15) && par0WorldServer.getBlockMaterial(var13, var14, var15) == var35.getCreatureMaterial())
+								if ( !par0WorldServer.isBlockNormalCube(var13, var14, var15) && 
+										CanCreatureTypeSpawnInMaterial( var35, 
+												par0WorldServer.getBlockMaterial( var13, var14, var15 ) ) )
+									// END FCMOD
                             {
                                 int var16 = 0;
                                 int var17 = 0;
@@ -113,6 +148,8 @@
                                             label103:
                                             {
                                                 var18 += par0WorldServer.rand.nextInt(var21) - par0WorldServer.rand.nextInt(var21);
+												// FCNOTE: The following results in 0 all the time.  
+												// Bug?  Check if leaves world bounds if fix?
                                                 var19 += par0WorldServer.rand.nextInt(1) - par0WorldServer.rand.nextInt(1);
                                                 var20 += par0WorldServer.rand.nextInt(var21) - par0WorldServer.rand.nextInt(var21);
 
@@ -120,16 +157,27 @@
                                                 {
                                                     float var24 = (float)var18 + 0.5F;
                                                     float var25 = (float)var19;
+													// FCMOD: Added
+													var25 += GetVerticalOffsetForPos( var35, par0WorldServer, var18, var19, var20 );
+													var25 += 0.01F; // wiggle
+													// END FCMOD
                                                     float var26 = (float)var20 + 0.5F;
 
                                                     if (par0WorldServer.getClosestPlayer((double)var24, (double)var25, (double)var26, 24.0D) == null)
                                                     {
+														// FCCHUNK: Decide on updates around original spawn
+														// FCMOD: Removed distance check from creature to 
+														// original spawn which prevents spawning 
+														// within 24 blocks (root of 576)
+														/*
                                                         float var27 = var24 - (float)var32.posX;
                                                         float var28 = var25 - (float)var32.posY;
                                                         float var29 = var26 - (float)var32.posZ;
                                                         float var30 = var27 * var27 + var28 * var28 + var29 * var29;
 
                                                         if (var30 >= 576.0F)
+														 */
+														// END FCMOD
                                                         {
                                                             if (var22 == null)
                                                             {
@@ -153,6 +201,10 @@
                                                                 return var4;
                                                             }
 
+															// FCMOD: Added
+															var39.PreInitCreature();
+															// END FCMOD
+
                                                             var39.setLocationAndAngles((double)var24, (double)var25, (double)var26, par0WorldServer.rand.nextFloat() * 360.0F, 0.0F);
 
                                                             if (var39.getCanSpawnHere())
@@ -194,6 +246,8 @@
     /**
      * Returns whether or not the specified creature type can spawn at the specified location.
      */
+	// FCMOD: Removed and replaced
+	/*
     public static boolean canCreatureTypeSpawnAtLocation(EnumCreatureType par0EnumCreatureType, World par1World, int par2, int par3, int par4)
     {
         if (par0EnumCreatureType.getCreatureMaterial() == Material.water)
@@ -210,6 +264,8 @@
             return var5 != Block.bedrock.blockID && !par1World.isBlockNormalCube(par2, par3, par4) && !par1World.getBlockMaterial(par2, par3, par4).isLiquid() && !par1World.isBlockNormalCube(par2, par3 + 1, par4);
         }
     }
+	 */
+	// END FCMOD
 
     /**
      * determines if a skeleton spawns on a spider, and if a sheep is a different color
@@ -245,7 +301,7 @@
                     {
                         int var17 = par0World.getTopSolidOrLiquidBlock(var10, var11);
 
-                        if (canCreatureTypeSpawnAtLocation(EnumCreatureType.creature, par0World, var10, var17, var11))
+						if (checkIfAnimalCanSpawn(var8, par0World, var10, var17, var11))
                         {
                             float var18 = (float)var10 + 0.5F;
                             float var19 = (float)var17;
@@ -262,6 +318,9 @@
                                 continue;
                             }
 
+							// FCMOD: Added
+							var21.PreInitCreature();
+							// END FCMOD
                             var21.setLocationAndAngles((double)var18, (double)var19, (double)var20, par6Random.nextFloat() * 360.0F, 0.0F);
                             par0World.spawnEntityInWorld(var21);
                             creatureSpecificInit(var21, par0World, var18, var19, var20);
@@ -279,4 +338,138 @@
             }
         }
     }
+
+	public static boolean checkIfAnimalCanSpawn(SpawnListEntry entry, World world, int x, int y, int z) {
+		return canEntitySpawnDuringWorldGen(entry.entityClass, world, x, y, z);
 }
+
+	public static boolean canCreatureTypeSpawnAtLocation( EnumCreatureType type, 
+			World world, int i, int j, int k )
+	{
+		if ( type.getCreatureMaterial() == Material.water )
+		{
+			return world.getBlockMaterial( i, j, k ).isLiquid() && 
+					world.getBlockMaterial( i, j - 1, k ).isLiquid() && 
+					!world.isBlockNormalCube( i, j + 1, k );
+		}
+
+		if ( !world.isBlockNormalCube( i, j, k ) && 
+				!world.getBlockMaterial( i, j, k ).isLiquid() )
+		{
+			Block blockBelow = Block.blocksList[world.getBlockId( i, j - 1, k )];
+
+			return blockBelow != null && blockBelow.CanMobsSpawnOn( world, i, j - 1, k );
+		}
+
+		return false;
+	}
+
+	public static float GetVerticalOffsetForPos( EnumCreatureType type, 
+			World world, int i, int j, int k )
+	{
+		if ( type.getCreatureMaterial() != Material.water )
+		{
+			Block blockBelow = Block.blocksList[world.getBlockId( i, j - 1, k )];
+
+			if ( blockBelow != null )
+			{
+				return blockBelow.MobSpawnOnVerticalOffset( world, i, j - 1, k );
+			}
+		}
+
+		return 0F;
+	}
+
+	public static boolean CanCreatureTypeSpawnInMaterial( EnumCreatureType type, Material material ) 
+	{
+		if ( material == Material.water )
+		{
+			return type.getCreatureMaterial() == Material.water;
+		}
+		else
+		{
+			return type.getCreatureMaterial() != Material.water;
+		}
+	}
+    
+    //------ World Gen Spawning Behavior ------//
+    private static SpawnBehavior defaultSpawnBehavior;
+    private static Map<Class<? extends EntityLiving>, SpawnBehavior> worldGenSpawnBehaviors = new HashMap();
+    
+    static {
+    	defaultSpawnBehavior = new SpawnBehavior() {
+			@Override
+			public boolean canSpawnAtLocationDuringWorldGen(World world, int x, int y, int z) {
+				// modified and trimmed down version of canCreatureTypeSpawnAtLocation() so that animals 
+		    	// don't initially spawn buried in leaves and to reduce the overall number of tests 
+		    	// performed
+		    	
+		    	int blockID = world.getBlockId(x, y, z);
+		    	
+		    	if (!Block.isNormalCube(blockID) && !world.getBlockMaterial(x, y, z).isLiquid() && blockID != Block.leaves.blockID)
+		    	{
+		    		int blockAboveID = world.getBlockId(x, y + 1, z);
+		    		
+		    		if (!Block.isNormalCube(blockAboveID) && blockAboveID != Block.leaves.blockID)
+		    		{
+			            int blockBelowID = world.getBlockId(x, y - 1, z);
+			            
+			            return Block.isNormalCube(blockBelowID) && blockBelowID != Block.bedrock.blockID;
+		    		}
+		    	}
+		        
+		        return false;
+			}
+		};
+		
+		setWorldGenSpawnBehavior(FCEntityWitch.class, new SpawnBehavior() {
+			@Override
+			public boolean canSpawnAtLocationDuringWorldGen(World world, int x, int y, int z) {
+				// modified version of default spawn behavior that allows
+				// witches to spawn over water and leaves to maximize chances they'll find a spot
+				// around generated witch huts
+		    	
+		    	int blockID = world.getBlockId(x, y, z);
+		    	
+		    	if (!Block.isNormalCube(blockID) && !world.getBlockMaterial(x, y, z).isLiquid() && blockID != Block.leaves.blockID)
+		    	{
+		    		int blockAboveID = world.getBlockId(x, y + 1, z);
+		    		
+		    		if (!Block.isNormalCube(blockAboveID) && blockAboveID != Block.leaves.blockID)
+		    		{
+			            int blockBelowID = world.getBlockId(x, y - 1, z);
+			            
+			            return blockBelowID != Block.bedrock.blockID && (Block.isNormalCube(blockBelowID) || world.getBlockMaterial(x, y - 1, z) == Material.water || blockBelowID == Block.leaves.blockID);
+		    		}
+		    	}
+		        
+		        return false;
+			}
+		});
+    }
+    
+    public static boolean canEntitySpawnDuringWorldGen(Class<? extends EntityLiving> entityClass, World world, int x, int y, int z) {
+    	SpawnBehavior spawnBehavior = worldGenSpawnBehaviors.get(entityClass);
+    	
+    	if (spawnBehavior != null) {
+    		return spawnBehavior.canSpawnAtLocationDuringWorldGen(world, x, y, z);
+    	}
+    	else {
+    		return defaultSpawnBehavior.canSpawnAtLocationDuringWorldGen(world, x, y, z);
+    	}
+    }
+    
+    public static void setWorldGenSpawnBehavior(Class<? extends EntityLiving> entityClass, SpawnBehavior spawnBehavior) {
+    	worldGenSpawnBehaviors.put(entityClass, spawnBehavior);
+    }
+    
+    public static void removeCustomWorldGenSpawnBehavior(Class<? extends EntityLiving> entityClass) {
+    	worldGenSpawnBehaviors.remove(entityClass);
+    }
+	
+	public static abstract class SpawnBehavior {
+		public abstract boolean canSpawnAtLocationDuringWorldGen(World world, int x, int y, int z);
+	}
+	
+	// END FCMOD
+}
\ No newline at end of file
