--- /dev/null
+++ b/minecraft/net/minecraft/src/FCBlockCandle.java
@@ -0,0 +1,197 @@
+package net.minecraft.src;
+
+public class FCBlockCandle extends Block {
+	private int idDropped;
+	private int metaDropped;
+	
+	protected FCBlockCandle(int id, int idDropped, int metaDropped, String name) {
+		super(id, FCBetterThanWolves.fcMaterialCandle);
+        
+        setHardness(0F);
+    	SetPicksEffectiveOn(true);
+        SetAxesEffectiveOn(true);
+        
+        setLightValue(1F);
+    	
+        setStepSound(soundStoneFootstep);
+        
+        setUnlocalizedName(name);
+        
+        this.idDropped = idDropped;
+        this.metaDropped = metaDropped;
+	}
+    
+    @Override
+    public boolean isOpaqueCube() {
+        return false;
+    }
+    
+    @Override
+    public boolean renderAsNormalBlock() {
+        return false;
+    }
+    
+	@Override
+    public AxisAlignedBB getCollisionBoundingBoxFromPool( World world, int i, int j, int k ) {
+		return null;
+    }
+	
+	@Override
+	public int getLightValue(IBlockAccess blockAccess, int x, int y, int z) {
+		if (isLit(blockAccess, x, y, z)) {
+			int candleCount = this.getCandleCount(blockAccess, x, y, z);
+			
+			return (int) (lightValue[this.blockID] / ((float) 4 - candleCount));
+		}
+		else {
+			return 0;
+		}
+    }
+
+	public boolean CanConvertBlock(ItemStack stack, World world, int x, int y, int z) {
+		return true;
+	}
+
+	/**
+	 * Returns false if the block has not been replaced with another, and should be removed
+	 */
+	public boolean ConvertBlock(ItemStack stack, World world, int x, int y, int z, int fromSide) {
+		int candleCount = this.getCandleCount(world, x, y, z);
+		this.setCandleCount(world, x, y, z, candleCount - 1);
+		this.dropBlockAsItem(world, x, y, z, 0, 0);
+		
+		return true;
+	}
+	
+	//------ Class specific methods ------//
+	
+	public int getCandleCount(IBlockAccess blockAccess, int x, int y, int z) {
+		int meta = blockAccess.getBlockMetadata(x, y, z);
+		return (meta & 3) + 1;
+	}
+	
+	public void setCandleCount(World world, int x, int y, int z, int count) {
+		if (count == 0) {
+			world.setBlock(x, y, z, 0);
+			return;
+		}
+		
+		if (count > 4) {
+			Exception e = new IllegalArgumentException("Cannot set candle count higher than 4");
+			e.printStackTrace();
+			
+			count = 4;
+		}
+		
+		int meta = world.getBlockMetadata(x, y, z);
+		int newMeta = meta & 4;
+		
+		newMeta += count - 1;
+		
+		world.setBlockMetadataWithNotify(x, y, z, newMeta);
+	}
+	
+	public boolean isLit(IBlockAccess blockAccess, int x, int y, int z) {
+		return blockAccess.getBlockMetadata(x, y, z) >> 2 > 1;
+	}
+	
+	public void setLit(World world, int x, int y, int z, boolean isLit) {
+		int meta = world.getBlockMetadata(x, y, z);
+		int newMeta;
+		
+		if (isLit) {
+			newMeta = meta | 4;
+		}
+		else {
+			newMeta = meta & 3;
+		}
+		
+		world.setBlockMetadata(x, y, z, newMeta);
+	}
+	
+	//------ Client side functionality ------//
+	
+	@Override
+	public boolean RenderBlock(RenderBlocks render, int x, int y, int z) {
+		int candleCount = this.getCandleCount(render.blockAccess, x, y, z);
+		
+		float xOffset = 0;
+		float yOffset = 0;
+		float zOffset = 0;
+		
+		switch (candleCount) {
+		case 4:
+			xOffset = -2/16F;
+			yOffset = -2/16F;
+			zOffset = 1/16F;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+			
+			xOffset = -1/16F;
+			yOffset = -1/16F;
+			zOffset = -2/16F;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+
+			xOffset = 2/16F;
+			yOffset = 0;
+			zOffset = -2/16F;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+			
+			xOffset = 0;
+			yOffset = -3/16F;
+			zOffset = 1/16F;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+			break;
+		case 3:
+			xOffset = -1/16F;
+			yOffset = -1/16F;
+			zOffset = -1/16F;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+
+			xOffset = 2/16F;
+			yOffset = 0;
+			zOffset = 0;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+			
+			xOffset = 0;
+			yOffset = -3/16F;
+			zOffset = 2/16F;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+			break;
+		case 2:
+			xOffset = -2/16F;
+			yOffset = -1/16F;
+			zOffset = -1/16F;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+
+			xOffset = 2/16F;
+			yOffset = 0;
+			zOffset = 0;
+			
+			render.setRenderBounds(7/16F + xOffset, 0, 7/16F + zOffset, 9/16F + xOffset, 6/16F + yOffset, 9/16F + zOffset);
+			render.renderStandardBlock(this, x, y, z);
+			break;
+		case 1:
+			render.setRenderBounds(7/16F, 0, 7/16F, 9/16F, 6/16F, 9/16F);
+			render.renderStandardBlock(this, x, y, z);
+			break;
+		}
+		
+		return false;
+	}
+}
\ No newline at end of file
