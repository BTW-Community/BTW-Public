--- a/minecraft/net/minecraft/src/EntityBoat.java
+++ b/minecraft/net/minecraft/src/EntityBoat.java
@@ -4,6 +4,7 @@
 
 public class EntityBoat extends Entity
 {
+	// FCNOTE: The following seems to be false if the boat is ridden by the local player
     private boolean field_70279_a;
     private double speedMultiplier;
     private int boatPosRotationIncrements;
@@ -225,6 +226,15 @@
             }
         }
 
+        // FCMOD: Added
+        if ( var2 > 0.1F )
+        {
+        	// var 2 tracks how deep the boat is resting in the water
+            fallDistance = 0.0F;
+            extinguish();
+        }
+        // END FCMOD
+
         double var23 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
         double var6;
         double var8;
@@ -259,6 +269,7 @@
         double var12;
         double var25;
 
+        // FCNOTE: The below test is "if remote and not ridden by the local player" (field_70279_a is false if ridden by local player)
         if (this.worldObj.isRemote && this.field_70279_a)
         {
             if (this.boatPosRotationIncrements > 0)
@@ -309,6 +320,8 @@
                 this.motionY += 0.007000000216066837D;
             }
 
+            // FCMOD: modify boat speed by whether player is holding a sail
+            /*
             if (this.riddenByEntity != null)
             {
                 this.motionX += this.riddenByEntity.motionX * this.speedMultiplier;
@@ -324,7 +337,41 @@
                 this.motionZ *= var8;
                 var6 = 0.35D;
             }
+            */
+            double dMaxSpeed = 0.35D;
 
+            if ( riddenByEntity != null )
+            {
+            	dMaxSpeed *= riddenByEntity.MovementModifierWhenRidingBoat();
+            	
+                this.motionX += this.riddenByEntity.motionX * this.speedMultiplier;
+                this.motionZ += this.riddenByEntity.motionZ * this.speedMultiplier;
+                
+            	if ( riddenByEntity.AppliesConstantForceWhenRidingBoat() )
+            	{
+            		motionX -= Math.cos( (double)rotationYaw * Math.PI / 180.0D ) * dMaxSpeed * 0.02;
+            		motionZ -= Math.sin( (double)rotationYaw * Math.PI / 180.0D ) * dMaxSpeed * 0.02;
+            	}
+            }
+
+            var6 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);
+
+            if ( var6 > dMaxSpeed )
+            {
+                double dSpeedModifier = dMaxSpeed / var6;
+                
+                if ( dSpeedModifier < 0.9D )
+                {
+                	dSpeedModifier = 0.9D;
+                }
+                
+                motionX *= dSpeedModifier;
+                motionZ *= dSpeedModifier;
+                
+                var6 *= dSpeedModifier;
+            }
+            // END FCMOD
+
             if (var6 > var23 && this.speedMultiplier < 0.35D)
             {
                 this.speedMultiplier += (0.35D - this.speedMultiplier) / 35.0D;
@@ -355,6 +402,8 @@
 
             if (this.isCollidedHorizontally && var23 > 0.2D)
             {
+            	// FCMOD: Changed
+            	/*
                 if (!this.worldObj.isRemote && !this.isDead)
                 {
                     this.setDead();
@@ -370,6 +419,9 @@
                         this.dropItemWithOffset(Item.stick.itemID, 1, 0.0F);
                     }
                 }
+                */
+            	BreakBoat();
+            	// END FCMOD
             }
             else
             {
@@ -431,7 +483,14 @@
                         int var21 = MathHelper.floor_double(this.posY) + var20;
                         int var22 = this.worldObj.getBlockId(var27, var21, var19);
 
+                        // FCMOD: Changed
+                        /*
                         if (var22 == Block.snow.blockID)
+                        */
+                        Block tempBlock = Block.blocksList[var22];
+                        
+                        if ( tempBlock != null && tempBlock.IsGroundCover( ) )
+                        // END FCMOD
                         {
                             this.worldObj.setBlockToAir(var27, var21, var19);
                         }
@@ -547,4 +606,40 @@
     {
         this.field_70279_a = par1;
     }
+    
+    // FCMOD: Code added
+    @Override
+    public boolean CanCollideWithEntity( Entity entity )
+    {
+    	return !entity.IsItemEntity();
 }
+    
+    @Override
+    protected void fall( float fFallDistance )
+    {
+    	super.fall( fFallDistance );
+    	
+    	if ( fFallDistance > 5F )
+    	{
+    		BreakBoat();
+    	}
+    }
+    
+    public void BreakBoat()
+    {
+        if ( !worldObj.isRemote && !isDead )
+        {
+            setDead();
+
+            for ( int iCount = 0; iCount < 4; iCount++ )
+            {
+                dropItemWithOffset( Item.stick.itemID, 1, 0.0F );
+                
+                dropItemWithOffset( FCBetterThanWolves.fcItemSawDust.itemID, 1, 0.0F );
+            }
+            
+            playSound( "mob.zombie.woodbreak", 0.5F, 0.50F + ( rand.nextFloat() * 0.25F ) );
+        }
+    }    
+    // END FCMOD
+}
