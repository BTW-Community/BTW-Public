--- a/minecraft/net/minecraft/src/EntityDropParticleFX.java
+++ b/minecraft/net/minecraft/src/EntityDropParticleFX.java
@@ -1,12 +1,16 @@
 package net.minecraft.src;
 
+import com.prupe.mcpatcher.cc.ColorizeBlock;
+import com.prupe.mcpatcher.cc.ColorizeEntity;
+import com.prupe.mcpatcher.cc.Colorizer;
+
 public class EntityDropParticleFX extends EntityFX
 {
     /** the material type for dropped items/blocks */
     private Material materialType;
 
     /** The height of the current bob */
-    private int bobTimer;
+    protected int bobTimer;
 
     public EntityDropParticleFX(World par1World, double par2, double par4, double par6, Material par8Material)
     {
@@ -15,10 +19,19 @@
 
         if (par8Material == Material.water)
         {
-            this.particleRed = 0.0F;
-            this.particleGreen = 0.0F;
+        	if (ColorizeBlock.computeWaterColor(true, (int)this.posX, (int)this.posY, (int)this.posZ))
+            {
+                this.particleRed = Colorizer.setColor[0];
+                this.particleGreen = Colorizer.setColor[1];
+                this.particleBlue = Colorizer.setColor[2];
+            }
+            else
+            {
+                this.particleRed = 0.2F;
+                this.particleGreen = 0.3F;
             this.particleBlue = 1.0F;
         }
+        }
         else
         {
             this.particleRed = 1.0F;
@@ -35,9 +48,34 @@
         this.motionX = this.motionY = this.motionZ = 0.0D;
     }
 
+    /**
+     *  Use this constructor to define custom color dropping particles
+     * @param world
+     * @param x
+     * @param y
+     * @param z
+     * @param material
+     * @param bobTimer
+     * @param red
+     * @param green
+     * @param blue
+     * @param alpha
+     */
+    public EntityDropParticleFX(World world, double x, double y, double z, Material material, int bobTimer, float red, float green, float blue, float alpha) {
+        this(world, x, y, z, material);
+        
+		this.particleRed = red;
+		this.particleGreen = green;
+		this.particleBlue = blue;
+
+        this.bobTimer = bobTimer;
+        setAlphaF(alpha);
+        
+    }
+
     public int getBrightnessForRender(float par1)
     {
-        return this.materialType == Material.water ? super.getBrightnessForRender(par1) : 257;
+        return this.materialType == Material.lava ? 257 : super.getBrightnessForRender(par1);
     }
 
     /**
@@ -45,7 +83,7 @@
      */
     public float getBrightness(float par1)
     {
-        return this.materialType == Material.water ? super.getBrightness(par1) : 1.0F;
+        return this.materialType == Material.lava ? 1.0F : super.getBrightness(par1);
     }
 
     /**
@@ -57,11 +95,13 @@
         this.prevPosY = this.posY;
         this.prevPosZ = this.posZ;
 
-        if (this.materialType == Material.water)
+        if (this.materialType == Material.lava)
         {
-            this.particleRed = 0.2F;
-            this.particleGreen = 0.3F;
-            this.particleBlue = 1.0F;
+        	if (ColorizeEntity.computeLavaDropColor(40 - this.bobTimer))
+            {
+                this.particleRed = Colorizer.setColor[0];
+                this.particleGreen = Colorizer.setColor[1];
+                this.particleBlue = Colorizer.setColor[2];
         }
         else
         {
@@ -69,6 +109,7 @@
             this.particleGreen = 16.0F / (float)(40 - this.bobTimer + 16);
             this.particleBlue = 4.0F / (float)(40 - this.bobTimer + 8);
         }
+        }
 
         this.motionY -= (double)this.particleGravity;
 
