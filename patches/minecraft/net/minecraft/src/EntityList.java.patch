--- a/minecraft/net/minecraft/src/EntityList.java
+++ b/minecraft/net/minecraft/src/EntityList.java
@@ -1,9 +1,15 @@
 package net.minecraft.src;
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.Map;
 
+import com.prupe.mcpatcher.cc.ColorizeItem;
+
 public class EntityList
 {
     /** Provides a mapping between entity classes and a string */
@@ -27,7 +33,12 @@
     /**
      * adds a mapping between Entity classes and both a string representation and an ID
      */
+    // FCMOD: Code change
+    /*
     private static void addMapping(Class par0Class, String par1Str, int par2)
+    */
+    public static void addMapping(Class par0Class, String par1Str, int par2)
+    // END FCMOD
     {
         stringToClassMapping.put(par1Str, par0Class);
         classToStringMapping.put(par0Class, par1Str);
@@ -39,8 +50,12 @@
     /**
      * Adds a entity mapping with egg info.
      */
-    private static void addMapping(Class par0Class, String par1Str, int par2, int par3, int par4)
+    public static void addMapping(Class par0Class, String par1Str, int par2, int par3, int par4)
     {
+    	//Client only
+    	ColorizeItem.setupSpawnerEgg(par1Str, par2, par3, par4);
+    	//
+    	
         addMapping(par0Class, par1Str, par2);
         entityEggs.put(Integer.valueOf(par2), new EntityEggInfo(par2, par3, par4));
     }
@@ -58,9 +73,14 @@
 
             if (var3 != null)
             {
+            	if (FCEntityVillager.class.equals(var3)) {
+            		var2 = FCEntityVillager.createVillager(par1World);
+            	}
+            	else {
                 var2 = (Entity)var3.getConstructor(new Class[] {World.class}).newInstance(new Object[] {par1World});
             }
         }
+        }
         catch (Exception var4)
         {
             var4.printStackTrace();
@@ -101,9 +121,19 @@
 
             if (var3 != null)
             {
+            	if (FCEntityVillager.class.equals(var3)) {
+            		int profession = par0NBTTagCompound.getInteger("Profession");
+
+            		var2 = FCEntityVillager.createVillagerFromProfession(par1World, profession);
+            	}
+            	else if (EntityPlayerMP.class.equals(var3)) {
+            		return null;
+            	}
+            	else {
                 var2 = (Entity)var3.getConstructor(new Class[] {World.class}).newInstance(new Object[] {par1World});
             }
         }
+        }
         catch (Exception var4)
         {
             var4.printStackTrace();
@@ -115,7 +145,10 @@
         }
         else
         {
+        	//Client
             par1World.getWorldLogAgent().logWarning("Skipping Entity with id " + par0NBTTagCompound.getString("id"));
+            //Server
+            //par1World.getWorldLogAgent().func_98236_b("Skipping Entity with id " + par0NBTTagCompound.getString("id"));
         }
 
         return var2;
@@ -134,9 +167,14 @@
 
             if (var3 != null)
             {
+            	if (FCEntityVillager.class.equals(var3)) {
+            		var2 = FCEntityVillager.createVillager(par1World);
+            	}
+            	else {
                 var2 = (Entity)var3.getConstructor(new Class[] {World.class}).newInstance(new Object[] {par1World});
             }
         }
+        }
         catch (Exception var4)
         {
             var4.printStackTrace();
@@ -144,7 +182,10 @@
 
         if (var2 == null)
         {
+        	//Client
             par1World.getWorldLogAgent().logWarning("Skipping Entity with id " + par0);
+            //Server
+            //par1World.getWorldLogAgent().func_98236_b("Skipping Entity with id " + par0);
         }
 
         return var2;
@@ -240,5 +281,211 @@
         addMapping(EntityIronGolem.class, "VillagerGolem", 99);
         addMapping(EntityVillager.class, "Villager", 120, 5651507, 12422002);
         addMapping(EntityEnderCrystal.class, "EnderCrystal", 200);
+        
+        //Only used for entity factory
+        //Dummy ids only for entity replacing
+        int id = -1;
+        
+        addMapping(EntityPlayerMP.class, "PlayerMP", id--);
+        addMapping(FCEntityLightningBolt.class, "LightningBolt", id--);
+        
+        // Client only
+        addMapping(EntityClientPlayerMP.class, "ClientPlayerMP", id--);
+        addMapping(EntityOtherPlayerMP.class, "OtherPlayerMP", id--);
+        
+        addMapping(EntityAuraFX.class, "AuraFX", id--);
+        addMapping(EntityBreakingFX.class, "BreakingFX", id--);
+        addMapping(EntityBubbleFX.class, "BubbleFX", id--);
+        addMapping(FCClientEntityCindersFX.class, "CindersFX", id--);
+        addMapping(EntityCloudFX.class, "CloudFX", id--);
+        addMapping(EntityCritFX.class, "CritFX", -id--);
+        addMapping(EntityCrit2FX.class, "Crit2FX", -id--);
+        addMapping(EntityDiggingFX.class, "DiggingFX", id--);
+        addMapping(EntityDropParticleFX.class, "DropFX", id--);
+        addMapping(EntityEnchantmentTableParticleFX.class, "EnchantmentTableFX", id--);
+        addMapping(EntityExplodeFX.class, "ExplodeFX", id--);
+        addMapping(EntityFlameFX.class, "FlameFX", id--);
+        addMapping(EntityFireworkOverlayFX.class, "FireworkOverlayFX", id--);
+        addMapping(EntityFireworkSparkFX.class, "FireworkSparkFX", id--);
+        addMapping(EntityFireworkStarterFX.class, "FireworkStarterFX", id--);
+        addMapping(EntityFootStepFX.class, "FootStepFX", id--);
+        addMapping(EntityHeartFX.class, "HeartFX", id--);
+        addMapping(EntityHugeExplodeFX.class, "HugeExplodeFX", id--);
+        addMapping(EntityLargeExplodeFX.class, "LargeExplodeFX", id--);
+        addMapping(EntityLavaFX.class, "LavaFX", id--);
+        addMapping(EntityNoteFX.class, "NoteFX", id--);
+        addMapping(EntityPickupFX.class, "PickupFX", id--);
+        addMapping(EntityPortalFX.class, "PortalFX", id--);
+        addMapping(EntityRainFX.class, "RainFX", id--);
+        addMapping(EntityReddustFX.class, "RedDustFX", id--);
+        addMapping(FCClientEntitySmallFlameFX.class, "SmallFlameFX", id--);
+        addMapping(EntitySmokeFX.class, "SmokeFX", id--);
+        addMapping(EntitySnowShovelFX.class, "SnowShovelFX", id--);
+        addMapping(EntitySpellParticleFX.class, "SpellFX", id--);
+        addMapping(EntitySplashFX.class, "SplashFX", id--);
+        addMapping(EntitySuspendFX.class, "SuspendFX", id--);
+        addMapping(FCClientEntityWhiteSmokeFX.class, "WhiteSmokeFX", id--);
+        addMapping(FCClientEntityWhiteCloudFX.class, "WhiteCloudFX", id--);
     }
+
+    public static void AddMapping( Class entityClass, String sName, int iID )
+    {
+    	addMapping( entityClass, sName, iID );
 }
+
+    public static boolean RemoveMapping( String sName, boolean bRemoveEgg )
+    {
+    	Integer iID = (Integer)stringToIDMapping.get( sName );
+
+    	if ( iID != null )
+    	{
+	    	Class mappedClass = (Class)IDtoClassMapping.get( Integer.valueOf( iID ) );
+
+	    	if ( mappedClass != null )
+	    	{
+	    		stringToClassMapping.remove( sName );
+	    		classToStringMapping.remove( mappedClass );
+	    		IDtoClassMapping.remove( iID );
+	    		classToIDMapping.remove( mappedClass );
+	    		stringToIDMapping.remove( sName );
+
+	    		if ( bRemoveEgg )
+	    		{
+		    		// may or may not have an egg, but this is a safe operation
+
+	    			entityEggs.remove( iID );
+	    		}
+
+	    		return true;
+	    	}
+    	}
+
+    	return false;
+    }
+
+    public static boolean ReplaceExistingMapping( Class newClass, String sName )
+    {    	
+    	Integer iID = (Integer)stringToIDMapping.get( sName );
+
+    	if ( iID != null )
+    	{
+    		if ( RemoveMapping( sName, false ) ) // egg mapping intentionally left in place
+    		{    		
+    			addMapping( newClass, sName, iID );
+    		}
+    	}
+
+    	return false;
+    }
+
+    /**
+     * Replaces entity mapping but leaves the mapping from class to id so the game won't crash if it tries to spawn something of a class which has been replaced
+     * Does not handle spawnable mobs
+     * @param newClass The new class to be added to the mapping
+     * @param entityName The internal name of the entity
+     * @return
+     */
+    public static boolean replaceExistingMappingSafe(Class newClass, String entityName) {
+        int id = (Integer) stringToIDMapping.get(entityName);
+
+        if (removeMappingSafe(entityName, false)) {
+            addMapping(newClass, entityName, id);
+        }
+
+        return false;
+    }
+
+    public static boolean removeMappingSafe(String var0, boolean var1)
+    {
+        Integer var2 = (Integer)stringToIDMapping.get(var0);
+
+        if (var2 != null)
+        {
+            Class var3 = (Class)IDtoClassMapping.get(Integer.valueOf(var2.intValue()));
+
+            if (var3 != null)
+            {
+                stringToClassMapping.remove(var0);
+                IDtoClassMapping.remove(var2);
+
+                if (var1)
+                {
+                    entityEggs.remove(var2);
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+    
+    public static Entity createEntityOfType(Class<? extends Entity> entityClass, Object ... parameters) {
+    	Entity entity = null; 
+    	
+    	Class[] parameterTypes = new Class[parameters.length];
+		Object[] parameterValues = new Object[parameters.length];
+		
+		for (int i = 0; i < parameters.length; i++) {
+			Class<?> type = parameters[i].getClass();
+			
+			Class<?> primitiveType = FCUtilsReflection.getPrimitiveFromBoxedClass(type);
+			
+			if (primitiveType != null) {
+				type = primitiveType;
+			}
+			
+			parameterTypes[i] = type;
+			parameterValues[i] = parameters[i];
+		}
+		
+		entityClass = getRegisteredReplacement(entityClass);
+		
+		if (EntityItem.class.isAssignableFrom(entityClass)) {
+			for (Object o : parameters) {
+				if (o instanceof ItemStack) {
+					Item item = ((ItemStack) o).getItem();
+					
+					if (item.hasCustomItemEntity()) {
+						entityClass = item.getCustomItemEntity(); 
+					}
+					
+					break;
+				}
+			}
+		}
+		
+		Constructor constructorToUse = FCUtilsReflection.findMatchingConstructor(entityClass, parameterTypes);
+        
+        if (constructorToUse == null) {
+        	String message = "No appropriate constructor found for " + classToStringMapping.get(entityClass) + ": ";
+            
+            for (Class<?> paramType : parameterTypes) {
+            	message += paramType.getSimpleName() + ", ";
+            }
+            
+            throw new RuntimeException(message);
+        }
+		
+		try {
+			constructorToUse.setAccessible(true);
+			entity = (Entity) constructorToUse.newInstance(parameterValues);
+		} catch (InstantiationException e) {
+			throw new RuntimeException("A problem has occured attempting to instantiate replacement for " + classToStringMapping.get(entityClass));
+		} catch (IllegalArgumentException e) {
+			e.printStackTrace();
+			
+			throw new RuntimeException("Incompatible types passed to specified constructor for " + classToStringMapping.get(entityClass));
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+    	
+    	return entity;
+    }
+    
+    private static Class<? extends Entity> getRegisteredReplacement(Class<? extends Entity> entityClass) {
+    	int id = (Integer) classToIDMapping.get(entityClass);
+    	
+    	return (Class<? extends Entity>) IDtoClassMapping.get(id);
+    }
+}
\ No newline at end of file
