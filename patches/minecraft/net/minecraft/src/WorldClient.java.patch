--- a/minecraft/net/minecraft/src/WorldClient.java
+++ b/minecraft/net/minecraft/src/WorldClient.java
@@ -2,6 +2,8 @@
 
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Random;
 import java.util.Set;
 import net.minecraft.client.Minecraft;
@@ -28,7 +30,11 @@
      */
     private Set entitySpawnQueue = new HashSet();
     private final Minecraft mc = Minecraft.getMinecraft();
-    private final Set previousActiveChunkSet = new HashSet();
+    // FCMOD: Changed (client only)
+    //private final Set previousActiveChunkSet = new HashSet();
+    protected LinkedList<ChunkCoordIntPair> m_prevActiveChunksCoordsList = 
+    	new LinkedList<ChunkCoordIntPair>(); 
+    // END FCMOD
 
     public WorldClient(NetClientHandler par1NetClientHandler, WorldSettings par2WorldSettings, int par3, int par4, Profiler par5Profiler, ILogAgent par6ILogAgent)
     {
@@ -67,7 +73,16 @@
         this.theProfiler.endStartSection("tiles");
         this.tickBlocksAndAmbiance();
         this.theProfiler.endSection();
+        // FCMOD: Added (client only) so that internal light levels used for 
+        // creature spawning are updated on the client
+        int i = calculateSkylightSubtracted(1.0F);
+
+        if (i != skylightSubtracted)
+        {
+            skylightSubtracted = i;
     }
+        // END FCMOD        
+    }
 
     /**
      * Invalidates an AABB region of blocks from the receive queue, in the event that the block has been modified
@@ -91,21 +106,37 @@
     protected void tickBlocksAndAmbiance()
     {
         super.tickBlocksAndAmbiance();
+        // FCMOD: Changed (client only)
+        /*
         this.previousActiveChunkSet.retainAll(this.activeChunkSet);
 
         if (this.previousActiveChunkSet.size() == this.activeChunkSet.size())
         {
             this.previousActiveChunkSet.clear();
         }
+        */
+        m_prevActiveChunksCoordsList.retainAll( m_activeChunksCoordsList );
 
+        if ( m_prevActiveChunksCoordsList.size() == m_activeChunksCoordsList.size() )
+        {
+        	m_prevActiveChunksCoordsList.clear();
+        }
+        // END FCMOD
+
         int var1 = 0;
-        Iterator var2 = this.activeChunkSet.iterator();
+        // FCMOD: Changed (client only)
+        //Iterator var2 = this.activeChunkSet.iterator();
+        Iterator var2 = m_activeChunksCoordsList.iterator();
+        // END FCMOD
 
         while (var2.hasNext())
         {
             ChunkCoordIntPair var3 = (ChunkCoordIntPair)var2.next();
 
-            if (!this.previousActiveChunkSet.contains(var3))
+            // FCMOD: Changed (client only)
+            //if (!this.previousActiveChunkSet.contains(var3))
+            if ( !m_prevActiveChunksCoordsList.contains( var3 ) )
+        	// END FCMOD
             {
                 int var4 = var3.chunkXPos * 16;
                 int var5 = var3.chunkZPos * 16;
@@ -113,7 +144,10 @@
                 Chunk var6 = this.getChunkFromChunkCoords(var3.chunkXPos, var3.chunkZPos);
                 this.moodSoundAndLightCheck(var4, var5, var6);
                 this.theProfiler.endSection();
-                this.previousActiveChunkSet.add(var3);
+                // FCMOD: Changed (client only)
+                //this.previousActiveChunkSet.add(var3);
+                m_prevActiveChunksCoordsList.add(var3);
+                // END FCMOD
                 ++var1;
 
                 if (var1 >= 10)
@@ -246,6 +280,23 @@
     public boolean setBlockAndMetadataAndInvalidate(int par1, int par2, int par3, int par4, int par5)
     {
         this.invalidateBlockReceiveRegion(par1, par2, par3, par1, par2, par3);
+        
+        // FCMOD: Added (client only)
+        int iOldBlockID = getBlockId( par1 , par2, par3 );
+        
+        if ( iOldBlockID == par4 )
+        {
+        	Block block = Block.blocksList[iOldBlockID];
+        	
+        	if ( block != null )
+        	{
+	        	int iOldBlockMetadata = getBlockMetadata( par1, par2, par3 );
+	        	
+        		block.ClientNotificationOfMetadataChange( this, par1, par2, par3, iOldBlockMetadata, par5 );
+        	}        	
+        }
+        // END FCMOD
+        
         return super.setBlock(par1, par2, par3, par4, par5, 3);
     }
 
@@ -339,6 +390,10 @@
     /**
      * also releases skins.
      */
+    /** 
+     * FCNOTE: This is not accurately named.  It only removes all entities in the unload
+     * queue, NOT all loaded entities.
+     */
     public void removeAllEntities()
     {
         this.loadedEntityList.removeAll(this.unloadedEntityList);
@@ -438,7 +493,7 @@
 
     public void func_92088_a(double par1, double par3, double par5, double par7, double par9, double par11, NBTTagCompound par13NBTTagCompound)
     {
-        this.mc.effectRenderer.addEffect(new EntityFireworkStarterFX(this, par1, par3, par5, par7, par9, par11, this.mc.effectRenderer, par13NBTTagCompound));
+        this.mc.effectRenderer.addEffect((EntityFX) EntityList.createEntityOfType(EntityFireworkStarterFX.class, this, par1, par3, par5, par7, par9, par11, this.mc.effectRenderer, par13NBTTagCompound));
     }
 
     public void func_96443_a(Scoreboard par1Scoreboard)
@@ -455,4 +510,62 @@
     {
         return par0WorldClient.entitySpawnQueue;
     }
+    
+    // FCMOD: Added New (client only)
+    @Override
+    protected void UpdateActiveChunkMap()
+    {
+    	ClearActiveChunkMap();
+    	
+    	// only add the local player, so that we don't uselessly update chunks around
+    	// other players on the client in SMP
+    	
+    	if ( mc.thePlayer != null && mc.thePlayer.worldObj == this )
+    	{
+    		AddEntityToActiveChunkMap( mc.thePlayer );
 }
+    }
+
+    @Override
+    public void unloadEntities( List entityList )
+    {
+    	// change to immediately remove entities on the client instead of adding them to a list
+    	// to hopefully prevent problems with invisible mobs
+    	// https://bugs.mojang.com/browse/MC-65040
+    	
+        loadedEntityList.removeAll( entityList );
+
+        LinkedList<Entity> removeList = new  LinkedList<Entity>();
+        
+        // need to make this copy as the list passed in can be modified during traversal
+        removeList.addAll( entityList ); 
+        
+        Iterator<Entity> entityIterator = removeList.iterator();
+
+        while ( entityIterator.hasNext() )
+        {
+        	Entity tempEntity = entityIterator.next();
+            
+            int iChunkX = tempEntity.chunkCoordX;
+            int iChunkZ = tempEntity.chunkCoordZ;
+
+            if ( tempEntity.addedToChunk && chunkExists( iChunkX, iChunkZ ) )
+            {
+                getChunkFromChunkCoords( iChunkX, iChunkZ ).removeEntity( tempEntity );
+            }
+            
+            releaseEntitySkin( tempEntity );
+        }
+    }
+    
+    @Override
+    public void markTileEntityForDespawn( TileEntity tileEntity )
+    {
+    	// change to immediately remove entities on the client instead of adding them to a list
+    	// to hopefully prevent problems with invisible mobs
+    	// https://bugs.mojang.com/browse/MC-65040
+    	
+    	loadedTileEntityList.remove( tileEntity );
+    }
+    // END FCMOD
+}
