--- /dev/null
+++ b/minecraft/net/minecraft/src/FCEntityAIVillagerMate.java
@@ -0,0 +1,187 @@
+// FCMOD
+
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class FCEntityAIVillagerMate extends EntityAIBase
+{
+	static final double m_dDistanceToCheckForMate = 8F;
+
+	private FCEntityVillager villager;
+	private FCEntityVillager mate;
+	private World world;
+
+	private int spawnBabyDelay = 0;
+	private int thrustDelay = 0;
+
+	public FCEntityAIVillagerMate(FCEntityVillager villager)
+	{
+		this.villager = villager;
+		this.world = villager.worldObj;
+		setMutexBits(3);
+	}
+
+	public boolean shouldExecute()
+	{
+		if (this.villager.GetInLove() <= 0)
+		{
+			return false;
+		}
+		else
+		{
+			this.mate = getNearbyMate();
+
+			return this.mate != null;
+		}
+	}
+
+	public void resetTask()
+	{
+		this.mate = null;
+		this.spawnBabyDelay = 0;
+	}
+
+	public boolean continueExecuting()
+	{
+		return this.mate != null && this.mate.isEntityAlive() && this.mate.GetInLove() > 0 && 
+				this.spawnBabyDelay < 100;
+	}
+
+	public void updateTask()
+	{
+		this.villager.getLookHelper().setLookPositionWithEntity(this.mate, 10F, 30F);
+
+		if (this.villager.getDistanceSqToEntity(this.mate) > 4D)
+		{
+			this.villager.getNavigator().tryMoveToEntityLiving(this.mate, 0.25F);
+
+			this.spawnBabyDelay = 0;
+
+			this.thrustDelay = this.villager.rand.nextInt(5) + 15;
+		}
+		else
+		{
+			this.spawnBabyDelay++;
+
+			if (this.spawnBabyDelay == 100)
+			{
+				giveBirth();
+			}
+			else
+			{
+				this.thrustDelay--;
+
+				if (this.thrustDelay <= 0)
+				{
+					this.world.playSoundAtEntity(this.villager, 
+							"random.classic_hurt", 1F +  this.villager.rand.nextFloat() * 0.25F, 
+							this.villager.getSoundPitch() * 2F);
+
+					this.thrustDelay = this.villager.rand.nextInt(5) + 15;
+
+					if (this.villager.onGround)
+					{
+						this.villager.jump();                		
+					}
+				}
+			}
+		}        
+
+	}
+
+	private void giveBirth()
+	{
+		int babyProfession = this.villager.getProfessionFromClass();
+
+		// 50% chance of baby inheriting profession from other parent
+
+		if (this.villager.rand.nextInt(2) == 0)
+		{
+			babyProfession = this.mate.getProfessionFromClass();
+		}
+		
+		// 33% chance of baby being of same "caste" but different profession
+
+		if (this.villager.rand.nextInt(3) == 0)
+		{
+			int casteID = FCEntityVillager.getCasteFromProfession(babyProfession);
+			ArrayList<Integer> caste = FCEntityVillager.casteMap.get(casteID);
+			
+			ArrayList<Integer> casteCopy = new ArrayList();
+			
+			for (int i : caste) {
+				casteCopy.add(i);
+			}
+			
+			//Cast to object ensures it removes the entry not the index
+			casteCopy.remove((Object) babyProfession);
+			
+			if (casteCopy.size() > 0) {
+				int index = this.villager.rand.nextInt(casteCopy.size());
+				
+				babyProfession = casteCopy.get(index);
+			}
+		}
+
+		FCEntityVillager babyVillager = this.villager.spawnBabyVillagerWithProfession(this.mate, babyProfession);
+
+		this.mate.setGrowingAge(6000);
+		this.villager.setGrowingAge(6000);
+
+		this.mate.SetInLove(0);
+		this.villager.SetInLove(0);
+
+		babyVillager.setGrowingAge(-babyVillager.GetTicksForChildToGrow());
+
+		babyVillager.setLocationAndAngles(this.villager.posX, this.villager.posY, this.villager.posZ, 
+				0F, 0F);
+
+		this.world.spawnEntityInWorld(babyVillager);
+
+		this.world.setEntityState(babyVillager, (byte)12);
+
+		// birthing effects
+
+		this.world.playAuxSFX(FCBetterThanWolves.m_iAnimalBirthingAuxFXID, 
+				MathHelper.floor_double(babyVillager.posX), 
+				MathHelper.floor_double(babyVillager.posY), 
+				MathHelper.floor_double(babyVillager.posZ), 
+				0);
+	}
+
+	private FCEntityVillager getNearbyMate()
+	{        
+		List potentialMateList = this.world.getEntitiesWithinAABB(FCEntityVillager.class, 
+				this.villager.boundingBox.expand(m_dDistanceToCheckForMate, m_dDistanceToCheckForMate, m_dDistanceToCheckForMate));
+
+		Iterator mateIterator = potentialMateList.iterator();
+
+		FCEntityVillager foundMate = null;
+
+		while (mateIterator.hasNext())
+		{
+			FCEntityVillager tempVillager = (FCEntityVillager)mateIterator.next();
+
+			if (CanMateWith(tempVillager))
+			{
+				return tempVillager;
+			}
+		}
+
+		return null;
+	}
+
+	private boolean CanMateWith(FCEntityVillager targetVillager)
+	{
+		if (targetVillager != this.villager && targetVillager.GetInLove() > 0 && 
+				!targetVillager.isLivingDead)
+		{
+			return true;
+		}
+
+		return false;
+	}
+}
\ No newline at end of file
