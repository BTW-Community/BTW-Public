--- a/minecraft/net/minecraft/src/EntityAIFollowOwner.java
+++ b/minecraft/net/minecraft/src/EntityAIFollowOwner.java
@@ -84,6 +84,13 @@
     {
         this.thePet.getLookHelper().setLookPositionWithEntity(this.theOwner, 10.0F, (float)this.thePet.getVerticalFaceSpeed());
 
+        // FCMOD: Code added to prevent pets sitting in Minecarts from teleporting
+        if ( thePet.ridingEntity != null )
+        {
+        	return;
+        }
+        // END FCMOD
+        
         if (!this.thePet.isSitting())
         {
             if (--this.field_75343_h <= 0)
@@ -94,10 +101,11 @@
                 {
                     if (this.thePet.getDistanceSqToEntity(this.theOwner) >= 144.0D)
                     {
+                        // FCMOD: Code changed
+                    	/*
                         int var1 = MathHelper.floor_double(this.theOwner.posX) - 2;
                         int var2 = MathHelper.floor_double(this.theOwner.posZ) - 2;
                         int var3 = MathHelper.floor_double(this.theOwner.boundingBox.minY);
-
                         for (int var4 = 0; var4 <= 4; ++var4)
                         {
                             for (int var5 = 0; var5 <= 4; ++var5)
@@ -110,9 +118,57 @@
                                 }
                             }
                         }
+                        */
+				        HandleTeleportation();
+				    	// END FCMOD
                     }
                 }
             }
         }
     }
+    
+    // FCMOD: Added
+    private void HandleTeleportation()
+    {
+    	if ( !thePet.IsAITryingToSit() )
+    	{
+	        // Code changed so that pets will teleport *behind* the player instead of just randomly around him
+	        Float xVector = ( MathHelper.sin((theOwner.rotationYaw / 180F) * (float)Math.PI) * 4.0F );
+	        Float zVector = -( MathHelper.cos((theOwner.rotationYaw / 180F) * (float)Math.PI) * 4.0F );
+	
+	        int var1 = MathHelper.floor_double(theOwner.posX + xVector);
+	        int var2 = MathHelper.floor_double(theOwner.posZ + zVector);
+	        int var3 = MathHelper.floor_double(theOwner.boundingBox.minY);
+	        
+	        // Changed this so that the searching starts at the center of the location
+	        
+	        for (int xCount = 0; xCount <= 4; xCount++)
+	        {
+	            for (int zCount = 0; zCount <= 4; zCount++)
+	            {
+	            	int xOffset = ( xCount + 1 ) >> 1;
+	            	int zOffset = ( zCount + 1 ) >> 1;
+	        
+	        		if ( ( xCount & 1 ) == 0 )
+	        		{
+	        			xOffset = -xOffset;
 }
+	        		
+	        		if ( ( zOffset & 1 ) == 0 )
+	        		{
+	        			zOffset = -zOffset;
+	        		}
+	        		
+	                if ( theWorld.doesBlockHaveSolidTopSurface( var1 + xOffset, var3 - 1, var2 + zOffset) && 
+	            		!theWorld.isBlockNormalCube(var1 + xOffset, var3, var2 + zOffset) && !theWorld.isBlockNormalCube(var1 + xOffset, var3 + 1, var2 + zOffset))
+	                {
+	                    thePet.setLocationAndAngles((float)(var1 + xOffset) + 0.5F, var3, (float)(var2 + zOffset) + 0.5F, thePet.rotationYaw, thePet.rotationPitch);
+	                    petPathfinder.clearPathEntity();
+	                    return;
+	                }
+	            }
+	        }
+    	}
+    }
+    // END FCMOD
+}
