--- /dev/null
+++ b/minecraft/net/minecraft/src/FCUtilsTreeGrowerForest.java
@@ -0,0 +1,254 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class FCUtilsTreeGrowerForest extends FCUtilsTreeGrower {
+	public int minTreeHeight;
+	public int maxTreeHeight;
+	
+	public int woodBlockID;
+	public int woodMetadata;
+	
+	public int stumpBlockID;
+	public int stumpMetadata;
+	
+	public int leavesBlockID;
+	public int leavesMetadata;
+	
+	public boolean growVines;
+	public boolean growCocoa;
+
+	public FCUtilsTreeGrowerForest(
+			int minTreeHeight, int maxTreeHeight,
+			int woodBlockID, int woodMetadata,
+			int stumpBlockID, int stumpMetadata,
+			int leavesBlockID, int leavesMetadata,
+			boolean growVines, boolean growCocoa) 
+	{
+		this.minTreeHeight = minTreeHeight;
+		this.maxTreeHeight = maxTreeHeight;
+		
+		this.woodBlockID = woodBlockID;
+		this.woodMetadata = woodMetadata;
+		
+		this.stumpBlockID = stumpBlockID;
+		this.stumpMetadata = stumpMetadata;
+		
+		this.leavesBlockID = leavesBlockID;
+		this.leavesMetadata = leavesMetadata;
+		
+		this.growVines = growVines;
+		this.growCocoa = growCocoa;
+	}
+
+	@Override
+	public boolean growTree(World world, Random rand, int x, int y, int z, boolean isWorldGen) {
+		int height = rand.nextInt(3) + this.minTreeHeight;
+
+		//Fail if the tree is attempting to generate outside of the valid world height
+		if (!(y >= 1 && y + height + 1 <= 256)) {
+			return false;
+		}
+
+		int clearance = this.getClearance(world, x, y, z, isWorldGen);
+
+		//Fail if there is not enough space to generate any tree here
+		if (clearance == -1) {
+			return false;
+		}
+		//Reduce the height of the tree if there isn't enough space for the tree size it tried to generate
+		else if (height > clearance) {
+			height = clearance;
+		}
+
+		int baseBlockID = world.getBlockId(x, y - 1, z);
+		Block baseBlock = Block.blocksList[baseBlockID];
+
+		//Fail if a sapling could not grow on the base block
+		//This is only relevant at world gen as otherwise a sapling could not have attempted to generate this tree
+		if (!(baseBlock.CanSaplingsGrowOnBlock(world, x, y, z) && y < 256 - height - 1)) {
+			return false;
+		}
+
+		if (baseBlockID == Block.grass.blockID) {
+			this.setBlock(world, x, y - 1, z, Block.dirt.blockID, isWorldGen);
+		}
+
+		byte leafOffset = 3;
+
+		for (int j = y + height - leafOffset; j <= y + height; ++j) {
+			int distanceToTop = j - (y + height);
+			int leafRadius = 1 - distanceToTop / 2;
+
+			for (int i = x - leafRadius; i <= x + leafRadius; ++i) {
+				int xOffset = i - x;
+
+				for (int k = z - leafRadius; k <= z + leafRadius; ++k) {
+					int zOffset = k - z;
+
+					if (Math.abs(xOffset) != leafRadius || Math.abs(zOffset) != leafRadius || rand.nextInt(2) != 0 && distanceToTop != 0) {
+						int blockID = world.getBlockId(i, j, k);
+
+						if (blockID == 0 || blockID == leavesBlockID) {
+							this.setBlockAndMetadata(world, i, j, k, leavesBlockID, this.leavesMetadata, isWorldGen);
+						}
+					}
+				}
+			}
+		}
+
+		for (int j = 0; j < height; ++j) {
+			int blockID = world.getBlockId(x, y + j, z);
+
+			if (blockID == 0 || blockID == leavesBlockID) {
+				this.setBlockAndMetadata(world, x, y + j, z, woodBlockID, this.woodMetadata, isWorldGen);
+
+				if (this.growVines && j > 0) {
+					if (rand.nextInt(3) > 0 && world.isAirBlock(x - 1, y + j, z)) {
+						this.setBlockAndMetadata(world, x - 1, y + j, z, Block.vine.blockID, 8, isWorldGen);
+					}
+
+					if (rand.nextInt(3) > 0 && world.isAirBlock(x + 1, y + j, z)) {
+						this.setBlockAndMetadata(world, x + 1, y + j, z, Block.vine.blockID, 2, isWorldGen);
+					}
+
+					if (rand.nextInt(3) > 0 && world.isAirBlock(x, y + j, z - 1)) {
+						this.setBlockAndMetadata(world, x, y + j, z - 1, Block.vine.blockID, 1, isWorldGen);
+					}
+
+					if (rand.nextInt(3) > 0 && world.isAirBlock(x, y + j, z + 1)) {
+						this.setBlockAndMetadata(world, x, y + j, z + 1, Block.vine.blockID, 4, isWorldGen);
+					}
+				}
+			}
+		}
+
+		if (this.growVines) {
+			this.growVines(world, rand, x, y, z, height, isWorldGen);
+		}
+		
+		if (this.growCocoa) {
+			this.growCocoa(world, rand, x, y, z, height, isWorldGen);
+		}
+
+		if ( height > 2 ) { // only tree with trunks 3 blocks or higher generate trunks
+			int trunkBlockId = world.getBlockId( x, y, z );
+
+			if (trunkBlockId == woodBlockID) {
+				int trunkMetadata = world.getBlockMetadata(x, y, z);
+
+				if (trunkMetadata == this.woodMetadata) {
+					this.setBlockAndMetadata(world, x, y, z, this.stumpBlockID, this.stumpMetadata, isWorldGen); 
+				}
+			}
+		}
+
+		return true;
+	}
+
+	//------ Class specific methods ------//
+	
+	public int getClearance(World world, int x, int y, int z, boolean checkLeafClearance) {
+		int j = 0;
+		
+		for (; j < y + this.maxTreeHeight; j++) {
+			int blockID = world.getBlockId(x, j, z);
+			Block block = Block.blocksList[blockID];
+			
+			if (block != null && !block.blockMaterial.isReplaceable()) {
+				j--;
+				break;
+			}
+		}
+		
+		if (checkLeafClearance) {
+			byte leafOffset = 3;
+			
+			for (int j2 = y + j - leafOffset; j2 <= y + j; ++j2) {
+				int distanceToTop = j2 - (y + j);
+				int leafRadius = 1 - distanceToTop / 2;
+
+				for (int i = x - leafRadius; i <= x + leafRadius; ++i) {
+					for (int k = z - leafRadius; k <= z + leafRadius; ++k) {
+						int blockID = world.getBlockId(x, j2, z);
+						Block block = Block.blocksList[blockID];
+						
+						if (block != null && !block.blockMaterial.isReplaceable()) {
+							return -1;
+						}
+					}
+				}
+			}
+		}
+		
+		if (j < this.minTreeHeight) {
+			return -1;
+		}
+		else {
+			return j;
+		}
+	}
+	
+	protected void growVines(World world, Random rand, int x, int y, int z, int height, boolean notify) {
+		for (int j = y - 3 + height; j <= y + height; ++j) {
+			int distanceToTop = j - (y + height);
+			int vineRadius = 2 - distanceToTop / 2;
+
+			for (int i = x - vineRadius; i <= x + vineRadius; ++i) {
+				for (int k = z - vineRadius; k <= z + vineRadius; ++k) {
+					if (world.getBlockId(i, j, k) == leavesBlockID) {
+						if (rand.nextInt(4) == 0 && world.getBlockId(i - 1, j, k) == 0) {
+							this.growVines_do(world, i - 1, j, k, 8, notify);
+						}
+
+						if (rand.nextInt(4) == 0 && world.getBlockId(i + 1, j, k) == 0) {
+							this.growVines_do(world, i + 1, j, k, 2, notify);
+						}
+
+						if (rand.nextInt(4) == 0 && world.getBlockId(i, j, k - 1) == 0) {
+							this.growVines_do(world, i, j, k - 1, 1, notify);
+						}
+
+						if (rand.nextInt(4) == 0 && world.getBlockId(i, j, k + 1) == 0) {
+							this.growVines_do(world, i, j, k + 1, 4, notify);
+						}
+					}
+				}
+			}
+		}
+	}
+
+	protected void growVines_do(World world, int x, int y, int z, int metadata, boolean notify) {
+		this.setBlockAndMetadata(world, x, y, z, Block.vine.blockID, metadata, notify);
+		int length = 4;
+
+		while (true) {
+			y--;
+
+			if (world.getBlockId(x, y, z) != 0 || length <= 0) {
+				return;
+			}
+
+			this.setBlockAndMetadata(world, x, y, z, Block.vine.blockID, metadata, notify);
+			length--;
+		}
+	}
+	
+	protected void growCocoa(World world, Random rand, int x, int y, int z, int height, boolean notify) {
+		if (rand.nextInt(5) == 0 && height > 5) {
+			for (int i = 0; i < 2; ++i) {
+				for (int k = 0; k < 4; ++k) {
+					if (rand.nextInt(4 - i) == 0) {
+						int growthStage = rand.nextInt(3);
+
+						this.setBlockAndMetadata(world, 
+								x + Direction.offsetX[Direction.rotateOpposite[k]], 
+								y + height - 5 + i, 
+								z + Direction.offsetZ[Direction.rotateOpposite[k]], 
+								Block.cocoaPlant.blockID, growthStage << 2 | k, notify);
+					}
+				}
+			}
+		}
+	}
+}
\ No newline at end of file
