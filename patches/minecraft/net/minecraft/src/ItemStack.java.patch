--- a/minecraft/net/minecraft/src/ItemStack.java
+++ b/minecraft/net/minecraft/src/ItemStack.java
@@ -137,10 +137,14 @@
     /**
      * Returns the strength of the stack against a given block.
      */
+    // FCMOD: Code removed and replaced later
+    /*
     public float getStrVsBlock(Block par1Block)
     {
         return this.getItem().getStrVsBlock(this, par1Block);
     }
+    */
+    // END FCMOD
 
     /**
      * Called whenever this item stack is equipped and right clicked. Returns the new item stack to put in the position
@@ -182,6 +186,15 @@
         this.stackSize = par1NBTTagCompound.getByte("Count");
         this.itemDamage = par1NBTTagCompound.getShort("Damage");
 
+        // FCMOD: Added
+        if ( par1NBTTagCompound.hasKey( "fcDamEx" ) )
+        {
+        	// legacy support for one release where I had exended damage on wool knit representing color
+        	
+        	itemDamage = FCItemWool.GetClosestColorIndex( par1NBTTagCompound.getInteger( "fcDamEx" ) );
+        }
+        // END FCMOD
+        
         if (this.itemDamage < 0)
         {
             this.itemDamage = 0;
@@ -303,7 +316,12 @@
             }
 
             this.itemDamage += par1;
+            // FCMOD: Code change so that items break at 0 damage, not -1
+            /*
             return this.itemDamage > this.getMaxDamage();
+            */
+            return this.itemDamage >= this.getMaxDamage();
+            // END FCMOD
         }
     }
 
@@ -372,10 +390,14 @@
     /**
      * Checks if the itemStack object can harvest a specified block
      */
+    // FCMOD: Code removed and replaced later
+    /*
     public boolean canHarvestBlock(Block par1Block)
     {
         return Item.itemsList[this.itemID].canHarvestBlock(par1Block);
     }
+    */
+    // END FCMOD
 
     public boolean interactWith(EntityLiving par1EntityLiving)
     {
@@ -449,7 +471,10 @@
      * Called each tick as long the ItemStack in on player inventory. Used to progress the pickup animation and update
      * maps.
      */
-    public void updateAnimation(World par1World, Entity par2Entity, int par3, boolean par4)
+    // FCMOD: Changed
+    //public void updateAnimation(World par1World, Entity par2Entity, int par3, boolean par4)
+    public void updateAnimation(World par1World, EntityPlayer par2Entity, int par3, boolean par4)
+    // END FCMOD
     {
         if (this.animationsToGo > 0)
         {
@@ -648,10 +673,14 @@
             }
         }
 
+        // FCMOD: Removed this numerical display of item damage as an exploit (client only)
+        /*
         if (par2 && this.isItemDamaged())
         {
             var3.add("Durability: " + (this.getMaxDamage() - this.getItemDamageForDisplay()) + " / " + this.getMaxDamage());
         }
+        */
+        // END FCMOD
 
         return var3;
     }
@@ -763,4 +792,56 @@
 
         this.stackTagCompound.setInteger("RepairCost", par1);
     }
+    
+    // FCMOD: Added
+    public boolean canHarvestBlock( World world, Block block, int i, int j, int k )
+    {
+        return Item.itemsList[this.itemID].canHarvestBlock( this, world, block, i, j, k );
 }
+    
+    public float getStrVsBlock( World world, Block par1Block, int i, int j, int k )
+    {
+        return getItem().getStrVsBlock( this, world, par1Block, i, j, k );
+    }
+    
+    public long GetTimeOfLastUse()
+    {
+    	if ( hasTagCompound() && this.stackTagCompound.hasKey( "fcLastUse" ) ) 
+    	{
+    		return stackTagCompound.getLong( "fcLastUse" );
+    	}
+    	
+        return -1;
+    }
+    
+    public void SetTimeOfLastUse( long lTime )
+    {
+        if ( !hasTagCompound() )
+        {
+            stackTagCompound = new NBTTagCompound( "tag" );
+        }
+
+        stackTagCompound.setLong( "fcLastUse", lTime );
+    }
+    
+    public float GetAccumulatedChance( float fDefault )
+    {
+    	if ( hasTagCompound() && this.stackTagCompound.hasKey( "fcChance" ) ) 
+    	{
+    		return stackTagCompound.getFloat( "fcChance" );
+    	}
+    	
+        return fDefault;
+    }
+    
+    public void SetAccumulatedChance( float fChance )
+    {
+        if ( !hasTagCompound() )
+        {
+            stackTagCompound = new NBTTagCompound( "tag" );
+        }
+
+        stackTagCompound.setFloat( "fcChance", fChance );
+    }
+    // END FCMOD
+}
