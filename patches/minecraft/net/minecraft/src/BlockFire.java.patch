--- a/minecraft/net/minecraft/src/BlockFire.java
+++ b/minecraft/net/minecraft/src/BlockFire.java
@@ -5,13 +5,24 @@
 public class BlockFire extends Block
 {
     /** The chance this block will encourage nearby blocks to catch on fire */
+	// FCMOD: Change to static, public, and extended block IDs
+	/*
     private int[] chanceToEncourageFire = new int[256];
+    */
+    static public int[] chanceToEncourageFire = new int[4096];
+    // END FCMOD
 
     /**
      * This is an array indexed by block ID the larger the number in the array the more likely a block type will catch
      * fires
      */
+	// FCMOD: Change to static, public, and extended block IDs
+    // FCNOTE: This is actually the chance of a block being DESTROYED by fire, and potentially converted to a fire block
+	/*
     private int[] abilityToCatchFire = new int[256];
+    */
+    static public int[] abilityToCatchFire = new int[4096];
+    // END FCMOD
     private Icon[] iconArray;
 
     protected BlockFire(int par1)
@@ -24,6 +35,8 @@
      * This method is called on a block after all other blocks gets already created. You can use it to reference and
      * configure something on the block that needs the others ones.
      */
+	// FCMOD: Removed in favor of the block classes themselves setting their own fire properties
+    /*
     public void initializeBlock()
     {
         this.setBurnRate(Block.planks.blockID, 5, 20);
@@ -42,6 +55,8 @@
         this.setBurnRate(Block.cloth.blockID, 30, 60);
         this.setBurnRate(Block.vine.blockID, 15, 100);
     }
+    */
+    // END FCMOD
 
     /**
      * Sets the burn rate for a block. The larger abilityToCatchFire the more easily it will catch. The larger
@@ -107,6 +122,8 @@
     /**
      * Ticks the block if it's been scheduled
      */
+    // FCMOD: Removed and replaced in child class
+    /*
     public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random)
     {
         if (par1World.getGameRules().getGameRuleBooleanValue("doFireTick"))
@@ -212,6 +229,8 @@
             }
         }
     }
+    */
+    // END FCMOD
 
     public boolean func_82506_l()
     {
@@ -226,7 +245,10 @@
         {
             boolean var9 = par1World.getBlockId(par2, par3, par4) == Block.tnt.blockID;
 
-            if (par6Random.nextInt(par7 + 10) < 5 && !par1World.canLightningStrikeAt(par2, par3, par4))
+            // FCMOD: Changed
+            //if (par6Random.nextInt(par7 + 10) < 5 && !par1World.canLightningStrikeAt(par2, par3, par4))
+            if ( par6Random.nextInt( par7 + 10 ) < 5 && !par1World.IsRainingAtPos( par2, par3, par4 ) )
+        	// END FCMOD
             {
                 int var10 = par7 + par6Random.nextInt(5) / 4;
 
@@ -252,7 +274,12 @@
     /**
      * Returns true if at least one block next to this one can burn.
      */
+	// FCMOD: Changed to protected
+	/*
     private boolean canNeighborBurn(World par1World, int par2, int par3, int par4)
+    */
+    protected boolean canNeighborBurn(World par1World, int par2, int par3, int par4)
+    // END FCMOD
     {
         return this.canBlockCatchFire(par1World, par2 + 1, par3, par4) ? true : (this.canBlockCatchFire(par1World, par2 - 1, par3, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3 - 1, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3 + 1, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3, par4 - 1) ? true : this.canBlockCatchFire(par1World, par2, par3, par4 + 1)))));
     }
@@ -260,6 +287,8 @@
     /**
      * Gets the highest chance of a neighbor block encouraging this block to catch fire
      */
+    // FCMOD: Removed and replaced in child class
+    /*
     private int getChanceOfNeighborsEncouragingFire(World par1World, int par2, int par3, int par4)
     {
         byte var5 = 0;
@@ -279,6 +308,8 @@
             return var6;
         }
     }
+    */
+    // END FCMOD
 
     /**
      * Returns if this block is collidable (only used by Fire). Args: x, y, z
@@ -301,11 +332,15 @@
      * current number passed in it will return its number instead of the passed in one.  Args: world, x, y, z,
      * curChanceToEncourageFire
      */
+    // FCMOD: Removed and replaced in child class
+    /*
     public int getChanceToEncourageFire(World par1World, int par2, int par3, int par4, int par5)
     {
         int var6 = this.chanceToEncourageFire[par1World.getBlockId(par2, par3, par4)];
         return var6 > par5 ? var6 : par5;
     }
+    */
+    // END FCMOD
 
     /**
      * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
@@ -450,4 +485,27 @@
     {
         return this.iconArray[0];
     }
+    
+    // FCMOD: Added New
+    
+	//----------- Client Side Functionality -----------//
+	
+    public boolean ShouldFirePreferToDisplayUpwards( IBlockAccess blockAccess, int i, int j, int k )
+    {
+    	return ( blockAccess.doesBlockHaveSolidTopSurface( i, j - 1, k) && Block.fire.canBlockCatchFire( blockAccess, i, j - 1, k ) ) ||
+    		IsBlockInfiniteBurnToTopForRender( blockAccess, i, j - 1, k );
 }
+    
+	public boolean IsBlockInfiniteBurnToTopForRender( IBlockAccess blockAccess, int i, int j, int k )
+	{		
+    	int iBlockID = blockAccess.getBlockId( i, j, k );    	
+    	
+    	// have to manually test for the Hibachi here as doesn't have its state
+    	// communicated to the client, and thus will not return a valid result
+    	
+		return iBlockID == Block.netherrack.blockID || 
+			iBlockID == FCBetterThanWolves.fcBBQ.blockID || 
+			DoesInfiniteBurnToFacing( blockAccess, i, j, k, 1 );
+	}
+	// END FCMOD
+}
