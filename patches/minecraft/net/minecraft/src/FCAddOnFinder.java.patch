--- /dev/null
+++ b/minecraft/net/minecraft/src/FCAddOnFinder.java
@@ -0,0 +1,164 @@
+package net.minecraft.src;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+import java.util.jar.JarInputStream;
+
+public class FCAddOnFinder {
+	private static boolean debug = false;
+	private static List<String> blacklist = Arrays.asList(new String[] { "net.minecraft.*", "argo.*", "com.jcraft.*",
+			"com.prupe.mcpatcher.*", "paulscode.*", "org.bouncycastle.*" });
+
+	public static boolean isBlackListed(String name) {
+		for (String pkg : blacklist) {
+			pkg = pkg.replace("*", "");
+			if (name.startsWith(pkg))
+				return true;
+		}
+		return false;
+	}
+
+	public static List<String> getClasses(final Enumeration<URL> resources) throws IOException {
+		assert resources != null;
+		final List<String> names = new ArrayList<String>();
+
+		while (resources.hasMoreElements()) {
+			final URL resource = resources.nextElement();
+			final String proto = resource.getProtocol();
+			if (debug) {
+				FCAddOnHandler.LogMessage("RESOURCE: " + resource.getPath() + "\n" + "PROTO: " + proto);
+			}
+
+			if ("file".equals(proto)) {
+				File file = new File(resource.getFile());
+				
+				if (file.isDirectory()) {
+					names.addAll(findFileClasses(file, ""));
+				} else {
+					names.addAll(findFileClasses(new File[] { file }, ""));
+				}
+			} else if ("jar".equals(proto)) {
+				names.addAll(findJarClasses(resource));
+			} else {
+				FCAddOnHandler.LogWarning("Protocol " + proto + " not supported");
+				continue;
+			}
+		}
+
+		return names;
+	}
+
+	private static List<String> findJarClasses(URL packageResource) {
+		final List<String> classes = new ArrayList<String>();
+		try {
+			if (debug) {
+				FCAddOnHandler.LogMessage("Jar URL Path is " + packageResource.getPath());
+			}
+			final URL fileUrl = new URL(packageResource.getPath());
+			final String proto = fileUrl.getProtocol();
+			if ("file".equals(proto)) {
+				final String filePath = fileUrl.getPath().substring(1); // skip leading /
+				int jarTagPos = filePath.indexOf(".jar!/");
+				if (jarTagPos < 0)
+					jarTagPos = filePath.indexOf(".zip!/");
+				if (jarTagPos < 0) {
+					FCAddOnHandler.LogWarning("Non-conformant jar file reference " + filePath + " !");
+				} else {
+					final String packagePath = filePath.substring(jarTagPos + 6);
+					final String jarFilename = filePath.substring(0, jarTagPos + 4);
+					if (debug) {
+						FCAddOnHandler.LogMessage("Package " + packagePath);
+						FCAddOnHandler.LogMessage("Jar file " + jarFilename);
+					}
+					final String packagePrefix = packagePath.length() == 0 ? "" : packagePath + '/';
+					try {
+						final JarInputStream jarFile = new JarInputStream(new FileInputStream(jarFilename));
+						JarEntry jarEntry;
+
+						jarLoop: while (true) {
+							jarEntry = jarFile.getNextJarEntry();
+							if (jarEntry == null) {
+								break;
+							}
+							final String classPath = jarEntry.getName();
+
+							if (classPath.startsWith(packagePrefix) && classPath.endsWith(".class")) {
+								final String className = classPath.substring(0, classPath.length() - 6).replace('/',
+										'.');
+
+								if (className.indexOf(".") < 0)
+									continue jarLoop;
+
+								if (isBlackListed(className))
+									continue jarLoop;
+
+								if (debug) {
+									FCAddOnHandler.LogMessage("Found entry " + jarEntry.getName());
+								}
+
+								classes.add(className);
+							}
+						}
+						jarFile.close();
+					} catch (final Exception e) {
+						e.printStackTrace();
+					}
+				}
+			} else {
+				FCAddOnHandler.LogWarning("Nested protocol " + proto + " not supprted!");
+			}
+		} catch (final MalformedURLException e) {
+			e.printStackTrace();
+		}
+		return classes;
+	}
+
+	private static List<String> findFileClasses(File directory, String packageName) {
+		if (!directory.exists()) {
+			FCAddOnHandler.LogWarning("Directory " + directory.getAbsolutePath() + " does not exist.");
+			return new ArrayList<String>();
+		}
+		final File[] files = directory.listFiles();
+		
+		if (debug) {
+			FCAddOnHandler
+					.LogMessage("Directory " + directory.getAbsolutePath() + " has " + files.length + " elements.");
+		}
+		
+		return findFileClasses(files, packageName);
+	}
+		
+	private static List<String> findFileClasses(File[] files, String packageName) {
+		final List<String> classes = new ArrayList<String>();
+		
+		if (packageName.length() > 0 && !packageName.endsWith("."))
+			packageName = packageName + ".";
+
+		if (isBlackListed(packageName))
+			return classes;
+
+		for (final File file : files) {
+			if (file.isDirectory()) {
+				assert !file.getName().contains(".");
+				classes.addAll(findFileClasses(file.listFiles(), packageName + file.getName()));
+			} else if (file.getName().endsWith(".class")) {
+				if (packageName.length() == 0)
+					continue;
+				final String className = packageName + file.getName().substring(0, file.getName().length() - 6);
+				classes.add(className);
+			}
+		}
+		return classes;
+	}
+}
