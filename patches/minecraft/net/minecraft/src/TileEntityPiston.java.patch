--- a/minecraft/net/minecraft/src/TileEntityPiston.java
+++ b/minecraft/net/minecraft/src/TileEntityPiston.java
@@ -21,6 +21,17 @@
     private float lastProgress;
     private List pushedObjects = new ArrayList();
 
+    // FCMOD: Added
+    private boolean m_bShoveledBlock = false;
+    
+    public TileEntityPiston( int iBlockID, int iMetadata, int iFacing, boolean bExtending, boolean bShouldHeadBeRendered, boolean bShoveledBlock )
+    {
+    	this( iBlockID, iMetadata, iFacing, bExtending, bShouldHeadBeRendered );
+    	
+    	m_bShoveledBlock = true;    	
+    }
+    // END FCMOD
+
     public TileEntityPiston() {}
 
     public TileEntityPiston(int par1, int par2, int par3, boolean par4, boolean par5)
@@ -141,6 +152,15 @@
 
             if (this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord) == Block.pistonMoving.blockID)
             {
+            	// FCMOD: Added
+            	if ( DestroyAndDropIfShoveled() )
+            	{
+            		return;
+            	}
+            	
+            	PreBlockPlaced();
+            	// END FCMOD
+            	
                 this.worldObj.setBlock(this.xCoord, this.yCoord, this.zCoord, this.storedBlockID, this.storedMetadata, 3);
                 this.worldObj.notifyBlockOfNeighborChange(this.xCoord, this.yCoord, this.zCoord, this.storedBlockID);
             }
@@ -158,11 +178,25 @@
         if (this.lastProgress >= 1.0F)
         {
             this.updatePushedObjects(1.0F, 0.25F);
+            
+            // FCMOD: Added
+            AttemptToPackItems();
+            // END FCMOD
+            
             this.worldObj.removeBlockTileEntity(this.xCoord, this.yCoord, this.zCoord);
             this.invalidate();
 
             if (this.worldObj.getBlockId(this.xCoord, this.yCoord, this.zCoord) == Block.pistonMoving.blockID)
             {
+            	// FCMOD: Added
+            	if ( DestroyAndDropIfShoveled() )
+            	{
+            		return;
+            	}
+            	
+            	PreBlockPlaced();
+            	// END FCMOD
+            	
                 this.worldObj.setBlock(this.xCoord, this.yCoord, this.zCoord, this.storedBlockID, this.storedMetadata, 3);
                 this.worldObj.notifyBlockOfNeighborChange(this.xCoord, this.yCoord, this.zCoord, this.storedBlockID);
             }
@@ -194,7 +228,14 @@
         this.storedOrientation = par1NBTTagCompound.getInteger("facing");
         this.lastProgress = this.progress = par1NBTTagCompound.getFloat("progress");
         this.extending = par1NBTTagCompound.getBoolean("extending");
+
+        // FCMOD: Added
+        if ( par1NBTTagCompound.hasKey( "fcShovel" ) )
+        {
+        	m_bShoveledBlock = par1NBTTagCompound.getBoolean( "fcShovel" );
     }
+        // END FCMOD        
+    }
 
     /**
      * Writes a tile entity to NBT.
@@ -207,5 +248,238 @@
         par1NBTTagCompound.setInteger("facing", this.storedOrientation);
         par1NBTTagCompound.setFloat("progress", this.lastProgress);
         par1NBTTagCompound.setBoolean("extending", this.extending);
+        
+        // FCMOD: Added
+        par1NBTTagCompound.setBoolean( "fcShovel", m_bShoveledBlock );
+        // END FCMOD        
     }
+    
+    // FCMOD: Added
+    private void AttemptToPackItems()
+    {
+    	if ( !worldObj.isRemote && isExtending() && ( storedBlockID == Block.pistonExtension.blockID || Block.isNormalCube( storedBlockID ) || storedBlockID == Block.glass.blockID ) )
+    	{
+	    	FCUtilsBlockPos targetPos = new FCUtilsBlockPos( xCoord, yCoord, zCoord, storedOrientation );
+	    	
+	    	if ( IsLocationSuitableForPacking( targetPos.i, targetPos.j, targetPos.k, Block.GetOppositeFacing( storedOrientation ) ) )
+			{
+	    		AxisAlignedBB targetBox = AxisAlignedBB.getAABBPool().getAABB((double)targetPos.i, (double)targetPos.j, (double)targetPos.k, 
+	    			(double)targetPos.i + 1D, (double)targetPos.j + 1D, (double)targetPos.k + 1D );
+	    		
+	    		List itemsWithinBox = worldObj.getEntitiesWithinAABB( EntityItem.class, targetBox );
+	    		
+	    		if ( !itemsWithinBox.isEmpty() )
+	    		{
+	                Iterator itemIterator = itemsWithinBox.iterator();
+	
+	                while ( itemIterator.hasNext() )
+	                {
+	        			EntityItem tempItem = (EntityItem)itemIterator.next();
+	        			
+	        			if ( !tempItem.isDead )
+	        			{
+		        			ItemStack tempStack = tempItem.getEntityItem();
+		        			
+		        			if ( IsPackableItem( tempStack ) )
+		        			{
+		        				int iRequiredCount = GetItemCountToPack( tempStack );
+		        				int iCountOfItems = CountItemsOfTypeInList( tempStack, itemsWithinBox );
+		        				
+		        				if ( iCountOfItems >= iRequiredCount )
+		        				{
+		        					RemoveItemsOfTypeFromList( tempStack, iRequiredCount, itemsWithinBox );
+		        					
+		        					CreatePackedBlockOfTypeAtLocation( tempStack, targetPos.i, targetPos.j, targetPos.k );
+		        					
+		        					break;
 }
+		        			}
+	        			}
+	                }
+	    		}
+			}
+    	}
+    }
+    
+    private boolean IsLocationSuitableForPacking( int i, int j, int k, int iPistonDirection )
+	{
+    	if ( worldObj.isAirBlock( i, j, k ) )
+    	{
+	    	for ( int iTempFacing = 0; iTempFacing < 6; iTempFacing++ )
+	    	{
+	    		if ( iTempFacing != iPistonDirection )
+	    		{
+	    			FCUtilsBlockPos tempPos = new FCUtilsBlockPos( i, j, k, iTempFacing );
+	    			
+	    			if ( !IsBlockSuitableForPackingToFacing ( tempPos.i, tempPos.j, tempPos.k, Block.GetOppositeFacing( iTempFacing ) ) )
+    				{
+	    				return false;
+    				}
+	    				
+	    		}
+	    	}
+	    	
+	    	return true;
+    	}
+    	
+    	return false;
+	}
+    
+    private boolean IsBlockSuitableForPackingToFacing( int i, int j, int k, int iFacing )
+    {
+    	Block block = Block.blocksList[worldObj.getBlockId( i, j, k )];
+    	
+    	if ( block != null )
+    	{
+    		return block.CanContainPistonPackingToFacing( worldObj, i, j, k, iFacing );
+    	}
+    	
+    	return false;    	
+    }
+    
+    private boolean IsPackableItem( ItemStack stack )
+    {
+    	return stack.getItem().IsPistonPackable( stack );    	
+    }
+    
+    private int GetItemCountToPack( ItemStack stack )
+    {
+    	return stack.getItem().GetRequiredItemCountToPistonPack( stack );
+    }
+    
+    private void CreatePackedBlockOfTypeAtLocation( ItemStack stack, int i, int j, int k )
+    {
+    	int iBlockID = stack.getItem().GetResultingBlockIDOnPistonPack( stack );;
+    	int iBlockMetadata = stack.getItem().GetResultingBlockMetadataOnPistonPack( stack );
+    	
+    	worldObj.setBlockAndMetadataWithNotify( i, j, k, iBlockID, iBlockMetadata );
+    	
+        worldObj.playAuxSFX( FCBetterThanWolves.m_iBlockPlaceAuxFXID, i, j, k, iBlockID );                            
+    }
+    
+    private int CountItemsOfTypeInList( ItemStack stack, List list )
+    {
+        Iterator itemIterator = list.iterator();
+        int iCount = 0;
+
+        while ( itemIterator.hasNext() )
+        {
+			EntityItem tempItem = (EntityItem)itemIterator.next();
+			
+			if ( !tempItem.isDead )
+			{
+				ItemStack tempStack = tempItem.getEntityItem();
+				
+				if ( tempStack.itemID == stack.itemID )
+				{
+					iCount += tempStack.stackSize;
+				}
+			}
+        }
+        
+        return iCount;
+    }
+    
+    private void RemoveItemsOfTypeFromList( ItemStack stack, int iCount, List list )
+    {
+        Iterator itemIterator = list.iterator();
+
+        while ( itemIterator.hasNext() )
+        {
+			EntityItem tempItem = (EntityItem)itemIterator.next();
+			
+			if ( !tempItem.isDead )
+			{
+				ItemStack tempStack = tempItem.getEntityItem();
+				
+				if ( tempStack.itemID == stack.itemID )
+				{
+					if ( tempStack.stackSize > iCount )
+					{
+						tempStack.stackSize -= iCount;
+						
+						break;
+					}
+					else
+					{
+						iCount -= tempStack.stackSize;
+						
+						tempStack.stackSize = 0;
+						
+						tempItem.setDead();
+						
+						if ( iCount <= 0 )
+						{
+							break;
+						}
+					}
+				}
+			}
+        }
+        
+    }
+    
+    private boolean DestroyAndDropIfShoveled()
+    {
+    	if ( m_bShoveledBlock )
+    	{
+            Block tempBlock = Block.blocksList[storedBlockID];
+            
+            if ( tempBlock != null && !worldObj.isRemote )
+            {
+            	ItemStack tempStack = null;
+            	
+	        	if ( tempBlock.canSilkHarvest( storedMetadata ) )
+	        	{
+	                tempStack = tempBlock.createStackedBlock( storedMetadata );
+	        	}
+	            else
+	            {
+	            	tempStack = new ItemStack( tempBlock.idDropped( storedMetadata, worldObj.rand, 0 ), 
+	            		tempBlock.quantityDropped( worldObj.rand ), tempBlock.damageDropped( storedMetadata ) );
+	            }
+	        	
+	        	if ( tempStack != null )
+	        	{
+	        		EjectStackOnShoveled( tempStack );
+	        	}
+            }
+        	
+            worldObj.setBlockToAir( xCoord, yCoord, zCoord );
+            worldObj.notifyBlockOfNeighborChange( xCoord, yCoord, zCoord, storedBlockID );
+            
+            return true;
+    	}
+    	
+    	return false;
+    }
+    
+    private void EjectStackOnShoveled( ItemStack stack )
+    {
+    	FCUtilsBlockPos sourcePos = new FCUtilsBlockPos( xCoord, yCoord, zCoord, Block.GetOppositeFacing( storedOrientation ) );
+    	
+    	FCUtilsItem.EjectStackFromBlockTowardsFacing( worldObj, sourcePos.i, sourcePos.j, sourcePos.k, stack, storedOrientation ); 
+    }
+    
+    private void PreBlockPlaced()
+    {
+        Block tempBlock = Block.blocksList[storedBlockID];
+        
+        if ( tempBlock != null && !worldObj.isRemote )
+        {
+	    	storedMetadata = tempBlock.OnPreBlockPlacedByPiston( worldObj, xCoord, yCoord, zCoord, 
+	    		storedMetadata, GetDirectionMoving() );
+        }
+    }
+    
+    private int GetDirectionMoving()
+    {
+    	if ( !extending )
+    	{
+    		return Block.GetOppositeFacing( storedOrientation );
+    	}
+    	
+		return storedOrientation;
+    }
+    // END FCMOD    
+}
