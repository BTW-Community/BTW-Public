--- /dev/null
+++ b/minecraft/net/minecraft/src/FCItemSword.java
@@ -0,0 +1,224 @@
+// FCMOD
+
+package net.minecraft.src;
+
+public class FCItemSword extends ItemSword implements FCIPlaceableAsItem
+{
+    private final EnumToolMaterial m_material;
+
+    public FCItemSword( int iItemID, EnumToolMaterial material )
+    {
+    	super( iItemID, material );
+    	
+    	m_material = material;
+    	
+    	if ( m_material == EnumToolMaterial.WOOD )
+    	{
+        	SetBuoyant();
+        	SetFurnaceBurnTime( FCEnumFurnaceBurnTime.WOOD_TOOLS );        	
+        	SetIncineratedInCrucible();
+    	}
+    	
+    	SetInfernalMaxEnchantmentCost( m_material.GetInfernalMaxEnchantmentCost() );
+    	SetInfernalMaxNumEnchants( m_material.GetInfernalMaxNumEnchants() );    	
+    }
+    
+    @Override
+    public boolean canHarvestBlock( ItemStack stack, World world, Block block, int i, int j, int k )
+    {
+    	return IsEfficientVsBlock( stack, world, block, i, j, k );
+    }
+    
+    @Override
+    public float getStrVsBlock( ItemStack stack, World world, Block block, int i, int j, int k )
+    {
+        if ( IsEfficientVsBlock( stack, world, block, i, j, k ) )
+        {
+            return 15.0F;
+        }
+        else
+        {
+            Material material = block.blockMaterial;
+            
+            if ( material == Material.plants || material == Material.vine || material == Material.coral || material != Material.leaves || material != Material.pumpkin )
+            {
+            	return 1.5F;
+            }            
+        }
+    	
+    	return super.getStrVsBlock( stack, world, block, i, j, k );
+    }
+    
+    @Override
+    public boolean IsEfficientVsBlock( ItemStack stack, World world, Block block, int i, int j, int k )
+    {
+        return block.blockID == Block.web.blockID || block.blockID == FCBetterThanWolves.fcBlockWeb.blockID;
+    }
+    
+    @Override
+    public boolean IsEnchantmentApplicable( Enchantment enchantment )
+    {
+    	if ( enchantment.type == EnumEnchantmentType.weapon )
+    	{
+    		return true;
+    	}
+    	
+    	return super.IsEnchantmentApplicable( enchantment );
+    }
+    
+    @Override
+    public void onCreated( ItemStack stack, World world, EntityPlayer player ) 
+    {
+		if ( player.m_iTimesCraftedThisTick == 0 && world.isRemote )
+		{
+			if ( m_material == EnumToolMaterial.WOOD )
+			{
+				player.playSound( "mob.zombie.woodbreak", 0.1F, 1.25F + ( world.rand.nextFloat() * 0.25F ) );
+			}
+			else if ( m_material == EnumToolMaterial.STONE )
+			{
+				player.playSound( "random.anvil_land", 0.5F, world.rand.nextFloat() * 0.25F + 1.75F );
+			}
+			else
+			{
+				player.playSound( "random.anvil_use", 0.5F, world.rand.nextFloat() * 0.25F + 1.25F );
+			}			
+		}
+		
+    	super.onCreated( stack, world, player );
+    }  
+    
+    /**
+     * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer
+     */
+    public ItemStack onItemRightClick(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer)
+    {
+    	if (!par3EntityPlayer.isUsingSpecialKey())
+    	{
+    		par3EntityPlayer.setItemInUse(par1ItemStack, this.getMaxItemUseDuration(par1ItemStack));
+    	}
+        
+        return par1ItemStack;
+    }
+    
+    @Override
+    public boolean onItemUse( ItemStack stack, EntityPlayer player, World world, int i, int j, int k, int iFacing, 
+    		float fClickX, float fClickY, float fClickZ )
+    {
+    	if (player.isUsingSpecialKey())
+    	{
+    		if ( player != null && player.canPlayerEdit( i, j, k, iFacing, stack ) && GetCanBePlacedAsBlock() )
+    		{
+    			FCUtilsBlockPos placementPos = new FCUtilsBlockPos( i, j, k );
+    			FCUtilsBlockPos stuckInPos = new FCUtilsBlockPos( i, j, k );
+
+    			if ( !FCUtilsWorld.IsReplaceableBlock( world, i, j, k ) )
+    			{
+    				placementPos.AddFacingAsOffset( iFacing );
+    			}
+    			else
+    			{
+    				iFacing = 1;
+    				stuckInPos.AddFacingAsOffset( 0 );
+    			}
+
+    			if ( FCUtilsWorld.DoesBlockHaveCenterHardpointToFacing( world, stuckInPos.i, stuckInPos.j, stuckInPos.k, iFacing, true ) &&        		
+    					FCBetterThanWolves.fcBlockToolPlaced.canPlaceBlockAt( world, placementPos.i, placementPos.j, placementPos.k ) )
+    			{
+    				Block blockStuckIn = Block.blocksList[world.getBlockId( stuckInPos.i, stuckInPos.j, stuckInPos.k )];
+
+    				if ( blockStuckIn != null &&
+    						blockStuckIn.CanToolsStickInBlock( world, stuckInPos.i, stuckInPos.j, stuckInPos.k ) &&
+    						CanToolStickInBlock( stack, blockStuckIn, world, stuckInPos.i, stuckInPos.j, stuckInPos.k ) )            	
+    				{
+    					int iTargetFacing;
+    					int iTargetFacingLevel;
+
+    					if ( iFacing >= 2 )
+    					{
+    						iTargetFacing = Block.GetOppositeFacing( iFacing );
+    						iTargetFacingLevel = 2;
+    					}
+    					else
+    					{
+    						iTargetFacing = FCUtilsMisc.ConvertOrientationToFlatBlockFacing( player );
+    						iTargetFacingLevel = Block.GetOppositeFacing( iFacing );            			
+    					}
+
+    					int iMetadata = FCBetterThanWolves.fcBlockToolPlaced.SetFacing( 0, iTargetFacing );     
+
+    					iMetadata = FCBetterThanWolves.fcBlockToolPlaced.SetVerticalOrientation( iMetadata, iTargetFacingLevel );
+
+    					world.setBlockAndMetadataWithNotify( placementPos.i, placementPos.j, placementPos.k, 
+    							FCBetterThanWolves.fcBlockToolPlaced.blockID, iMetadata );
+
+    					TileEntity targetTileEntity = world.getBlockTileEntity( placementPos.i, placementPos.j, placementPos.k );
+
+    					if ( targetTileEntity != null && targetTileEntity instanceof FCTileEntityToolPlaced )
+    					{
+    						((FCTileEntityToolPlaced)targetTileEntity).SetToolStack( stack );
+
+    						if ( !world.isRemote )
+    						{
+    							PlayPlacementSound( stack, blockStuckIn, world, placementPos.i, placementPos.j, placementPos.k );
+    						}
+
+    						stack.stackSize--;
+
+    						return true;
+    					}
+    				}
+    			}
+    		}
+    	}
+
+    	return false;
+    }
+
+    
+    //------------- Class Specific Methods ------------//
+    
+    protected boolean CanToolStickInBlock( ItemStack stack, Block block, World world, int i, int j, int k )
+    {
+        return block.AreShovelsEffectiveOn();
+    }
+    
+    protected void PlayPlacementSound( ItemStack stack, Block blockStuckIn, World world, int i, int j, int k )
+    {
+        world.playSoundEffect( (float)i + 0.5F, (float)j + 0.5F, (float)k + 0.5F, blockStuckIn.stepSound.getStepSound(), 
+    		( blockStuckIn.stepSound.getVolume() + 1F) / 2F, blockStuckIn.stepSound.getPitch() * 0.8F );
+    }
+    
+    protected boolean GetCanBePlacedAsBlock()
+    {
+    	return true;
+    }
+    
+    public float GetVisualVerticalOffsetAsBlock()
+    {
+    	return 0.4F;
+    }
+    
+    public float GetVisualHorizontalOffsetAsBlock()
+    {
+    	return 0.85F;
+    }
+    
+    public float GetVisualRollOffsetAsBlock()
+    {
+    	return -45F;
+    }
+    
+    public float GetBlockBoundingBoxHeight()
+    {
+    	return 0.75F;
+    }
+    
+    public float GetBlockBoundingBoxWidth()
+    {
+    	return 0.75F;
+    }
+    
+    
+	//------------ Client Side Functionality ----------//
+}
