--- /dev/null
+++ b/minecraft/net/minecraft/src/FCBlockTurntable.java
@@ -0,0 +1,280 @@
+// FCMOD
+
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class FCBlockTurntable extends BlockContainer implements FCIBlockMechanical {
+	private static final int iTurntableTickRate = 10;
+	
+	protected FCBlockTurntable(int blockID) {
+        super(blockID, Material.rock);
+
+        setHardness(2F);
+        setStepSound(soundStoneFootstep);
+        
+        setUnlocalizedName("fcBlockTurntable");
+        
+        setCreativeTab(CreativeTabs.tabRedstone);
+	}
+	
+	@Override
+    public int tickRate(World world) {
+    	return iTurntableTickRate;
+    }
+    
+	@Override
+    public TileEntity createNewTileEntity(World world) {
+        return new FCTileEntityTurntable();
+    }
+
+	@Override
+    public void onBlockAdded(World world, int x, int y, int z) {
+        super.onBlockAdded(world, x, y, z);
+        
+    	world.scheduleBlockUpdate(x, y, z, blockID, tickRate(world));
+    }
+
+	@Override
+    public void onNeighborBlockChange(World world, int x, int y, int z, int blockID) {
+		if (!world.IsUpdatePendingThisTickForBlock(x, y, z, this.blockID)) {
+			world.scheduleBlockUpdate(x, y, z, this.blockID, tickRate(world));
+		}
+    }
+    
+	@Override
+    public void updateTick(World world, int x, int y, int z, Random random) {
+    	boolean receivingMechanicalPower = IsInputtingMechanicalPower(world, x, y, z);
+    	boolean isMechanicalOn = IsBlockMechanicalOn(world, x, y, z);
+    	
+    	if (isMechanicalOn != receivingMechanicalPower) {
+	        EmitTurntableParticles(world, x, y, z, random);
+	        
+    		SetBlockMechanicalOn(world, x, y, z, receivingMechanicalPower);
+    		
+	        world.markBlockForUpdate(x, y, z);
+    	}
+    	
+    	boolean receivingRedstonePower = world.isBlockGettingPowered(x, y, z);
+    	boolean isRedstoneOn = IsBlockRedstoneOn(world, x, y, z);
+    	
+    	if (isRedstoneOn != receivingRedstonePower) {
+    		SetBlockRedstoneOn(world, x, y, z, receivingRedstonePower);    		
+    	}
+    }
+    
+	@Override
+    public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int facing, float hitX, float hitY, float hitZ) {
+    	ItemStack playerEquippedItem = player.getCurrentEquippedItem();
+    	
+    	if (playerEquippedItem != null) {
+    		return false;
+    	}
+    	
+        if (!world.isRemote) {
+        	int switchSetting = GetSwitchSetting(world, x, y, z);
+        	switchSetting++;
+        	
+        	if (switchSetting > 3) {
+        		switchSetting = 0;
+        	}
+        	
+        	SetSwitchSetting(world, x, y, z, switchSetting);
+        
+	        world.markBlockForUpdate(x, y, z);
+	        world.markBlockRangeForRenderUpdate(x, y, z, x, y, z);
+
+	        // click sound
+            world.playAuxSFX(1001, x, y, z, 0);
+        }
+        
+        return true;
+    }
+
+	@Override
+	public boolean CanRotateOnTurntable(IBlockAccess blockAccess, int x, int y, int z) {
+		return false;
+	}
+	
+	@Override
+	public boolean CanTransmitRotationHorizontallyOnTurntable(IBlockAccess blockAccess, int x, int y, int z) {
+		return false;
+	}
+	
+	@Override
+	public boolean CanTransmitRotationVerticallyOnTurntable(IBlockAccess blockAccess, int x, int y, int z) {
+		return false;
+	}
+	
+    //------------- FCIBlockMechanical -------------//
+    
+	@Override
+    public boolean CanOutputMechanicalPower() {
+    	return false;
+    }
+
+	@Override
+    public boolean CanInputMechanicalPower() {
+    	return true;
+    }
+
+	@Override
+    public boolean IsInputtingMechanicalPower(World world, int x, int y, int z) {
+    	// check for powered axles below
+    	return FCUtilsMechPower.IsBlockPoweredByAxleToSide(world, x, y, z, 0);    	
+    }    
+
+	@Override
+    public boolean IsOutputtingMechanicalPower(World world, int i, int j, int k) {
+    	return false;
+    }
+    
+	@Override
+	public boolean CanInputAxlePowerToFacing(World world, int x, int y, int z, int facing) {
+		return facing == 0;
+	}
+	
+	@Override
+	public void Overpower(World world, int x, int y, int z) {
+		breakTurntable(world, x, y, z);
+	}
+	
+    //------------- Class Specific Methods ------------//
+    
+    public boolean IsBlockMechanicalOn(IBlockAccess blockAccess, int x, int y, int z)
+    {
+    	return (blockAccess.getBlockMetadata(x, y, z) & 1) > 0;    
+	}
+    
+    public void SetBlockMechanicalOn(World world, int x, int y, int z, boolean isOn) {
+    	int metaData = world.getBlockMetadata(x, y, z) & (~1); // filter out old on state
+    	
+    	if (isOn) {
+    		metaData |= 1;
+    	}
+    	
+        world.setBlockMetadataWithNotify(x, y, z, metaData);
+    }
+    
+    public boolean IsBlockRedstoneOn(IBlockAccess blockAccess, int x, int y, int z) {
+    	return (blockAccess.getBlockMetadata(x, y, z) & 2) > 0;    
+	}
+    
+    public void SetBlockRedstoneOn(World world, int x, int y, int z, boolean isOn) {
+    	int metaData = world.getBlockMetadata(x, y, z) & (~2); // filter out old on state
+    	
+    	if (isOn) {
+    		metaData |= 2;
+    	}
+    	
+        world.setBlockMetadataWithNotify(x, y, z, metaData);
+    }
+    
+    public int GetSwitchSetting(IBlockAccess iBlockAccess, int x, int y, int z) {
+    	return (iBlockAccess.getBlockMetadata(x, y, z) & 12) >> 2;    
+    }
+    
+    public void SetSwitchSetting(World world, int x, int y, int z, int setting) {
+    	if (setting >= 4 || setting < 0) {
+    		setting = 0;
+    	}
+    	
+    	int metadata = world.getBlockMetadata(x, y, z) & (~12); // filter out old on state
+    	
+    	metadata |= (setting << 2);
+    	
+        world.setBlockMetadataWithNotify(x, y, z, metadata);
+    }
+    
+    public void EmitTurntableParticles(World world, int x, int y, int z, Random random) {
+        for (int i = 0; i < 5; i++) {
+            float smokeX = (float) x + random.nextFloat();
+            float smokeY = (float) y + random.nextFloat() * 0.5F + 1.0F;
+            float smokeZ = (float) z + random.nextFloat();
+            
+            world.spawnParticle("smoke", smokeX, smokeY, smokeZ, 0.0D, 0.0D, 0.0D);
+        }
+    }
+    
+	private void breakTurntable(World world, int x, int y, int z) {
+		FCUtilsItem.EjectSingleItemWithRandomOffset(world, x, y, z, Item.redstone.itemID, 0);
+		
+    	DropItemsIndividualy(world, x, y, z, FCBetterThanWolves.fcItemStone.itemID, 16, 0, 0.75F);
+		
+		// drop wood siding
+		for (int i = 0; i < 2; i++) {
+			FCUtilsItem.EjectSingleItemWithRandomOffset(world, x, y, z, FCBetterThanWolves.fcBlockWoodSidingItemStubID, 0);			
+		}
+		
+        world.playAuxSFX(FCBetterThanWolves.m_iMechanicalDeviceExplodeAuxFXID, x, y, z, 0);							        
+        
+		world.setBlockWithNotify(x, y, z, 0);
+	}
+	
+	//----------- Client Side Functionality -----------//
+	
+    private Icon[] iconBySideArray = new Icon[6];
+    
+    private Icon iconSwitch;
+    
+	@Override
+    public void registerIcons(IconRegister register) {
+        blockIcon = register.registerIcon("stone"); // for hit effects
+        
+        iconBySideArray[0] = register.registerIcon("fcBlockTurntable_bottom");
+        iconBySideArray[1] = register.registerIcon("fcBlockTurntable_top");
+        
+        Icon sideIcon = register.registerIcon("fcBlockTurntable_side");
+        
+        iconBySideArray[2] = sideIcon;
+        iconBySideArray[3] = sideIcon;
+        iconBySideArray[4] = sideIcon;
+        iconBySideArray[5] = sideIcon;
+        
+        iconSwitch = register.registerIcon("fcBlockTurntable_switch");
+    }
+	
+	@Override
+    public Icon getIcon(int iSide, int iMetadata) {
+		return iconBySideArray[iSide];
+    }
+	
+	@Override
+    public void randomDisplayTick(World world, int x, int y, int z, Random random) {
+    	if (IsBlockMechanicalOn(world, x, y, z)) {
+    		EmitTurntableParticles(world, x, y, z, random);	        
+    	}
+    }
+	
+	@Override
+    public boolean shouldSideBeRendered(IBlockAccess blockAccess, int neighborX, int neighborY, int neighborZ, int side) {
+		return true;
+    }
+	
+    @Override
+    public boolean RenderBlock(RenderBlocks renderBlocks, int x, int y, int z) {
+    	super.RenderBlock(renderBlocks, x, y, z);
+    	
+    	// render the switches
+    	int switchSetting = GetSwitchSetting(renderBlocks.blockAccess, x, y, z);
+    	
+    	float switchOffset = (4.0F / 16.0F) + ((float)switchSetting * (2.0F / 16.0F)); 
+        renderBlocks.setRenderBounds(switchOffset, (5.0F / 16.0F), (1.0F / 16.0F), 
+        		switchOffset + (2.0F / 16.0F), (7.0F / 16.0F), 1.0F + (1.0F / 16.0F));
+        FCClientUtilsRender.RenderStandardBlockWithTexture(renderBlocks, this, x, y, z, iconSwitch);
+        
+        renderBlocks.setRenderBounds(1.0F - (switchOffset + (2.0F / 16.0F)), (5.0F / 16.0F), 0.0F - (1.0F / 16.0F), 
+        		1.0F - switchOffset, (7.0F / 16.0F), 1.0F - (1.0F / 16.0F));
+        FCClientUtilsRender.RenderStandardBlockWithTexture(renderBlocks, this, x, y, z, iconSwitch);
+        
+        renderBlocks.setRenderBounds((1.0F / 16.0F), (5.0F / 16.0F), 1.0F - (switchOffset + (2.0F / 16.0F)), 
+        		1.0F + (1.0F / 16.0F), (7.0F / 16.0F), 1.0F - switchOffset);
+        FCClientUtilsRender.RenderStandardBlockWithTexture(renderBlocks, this, x, y, z, iconSwitch);
+        
+        renderBlocks.setRenderBounds(0.0F - (1.0F / 16.0F), (5.0F / 16.0F), switchOffset, 
+        		1.0F - (1.0F / 16.0F), (7.0F / 16.0F), switchOffset + (2.0F / 16.0F));
+        FCClientUtilsRender.RenderStandardBlockWithTexture(renderBlocks, this, x, y, z, iconSwitch);
+        
+        return true;
+    }    
+}
\ No newline at end of file
