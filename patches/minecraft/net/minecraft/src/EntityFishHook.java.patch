--- a/minecraft/net/minecraft/src/EntityFishHook.java
+++ b/minecraft/net/minecraft/src/EntityFishHook.java
@@ -51,6 +51,9 @@
         this.bobber = null;
         this.setSize(0.25F, 0.25F);
         this.ignoreFrustumCheck = true;
+        // FCMOD: Added
+        m_bIsBaited = false;
+        // END FCMOD
     }
 
     public EntityFishHook(World par1World, double par2, double par4, double par6, EntityPlayer par8EntityPlayer)
@@ -89,6 +92,9 @@
         this.motionZ = (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * MathHelper.cos(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
         this.motionY = (double)(-MathHelper.sin(this.rotationPitch / 180.0F * (float)Math.PI) * var3);
         this.calculateVelocity(this.motionX, this.motionY, this.motionZ, 1.5F, 1.0F);
+        // FCMOD: Added
+        m_bIsBaited = false;
+        // END FCMOD
     }
 
     protected void entityInit() {}
@@ -177,7 +183,15 @@
             {
                 ItemStack var1 = this.angler.getCurrentEquippedItem();
 
+                // FCMOD: Changed
+                /*
                 if (this.angler.isDead || !this.angler.isEntityAlive() || var1 == null || var1.getItem() != Item.fishingRod || this.getDistanceSqToEntity(this.angler) > 1024.0D)
+                */
+                if ( angler.isDead || !angler.isEntityAlive() || var1 == null || 
+                	!( ( var1.getItem() == Item.fishingRod && !m_bIsBaited ) || 
+            		( var1.getItem() == FCBetterThanWolves.fcItemFishingRodBaited && m_bIsBaited ) ) ||
+                	getDistanceSqToEntity( angler ) > 1024D )
+                // END FCMOD
                 {
                     this.setDead();
                     this.angler.fishEntity = null;
@@ -325,22 +339,22 @@
                     var25 = 0.5F;
                 }
 
-                byte var26 = 5;
-                double var27 = 0.0D;
+                byte var27 = 5;
+                double var26 = 0.0D;
 
-                for (int var28 = 0; var28 < var26; ++var28)
+                for (int var29 = 0; var29 < var27; ++var29)
                 {
-                    double var14 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var28 + 0) / (double)var26 - 0.125D + 0.125D;
-                    double var16 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var28 + 1) / (double)var26 - 0.125D + 0.125D;
+                    double var14 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var29 + 0) / (double)var27 - 0.125D + 0.125D;
+                    double var16 = this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(var29 + 1) / (double)var27 - 0.125D + 0.125D;
                     AxisAlignedBB var18 = AxisAlignedBB.getAABBPool().getAABB(this.boundingBox.minX, var14, this.boundingBox.minZ, this.boundingBox.maxX, var16, this.boundingBox.maxZ);
 
                     if (this.worldObj.isAABBInMaterial(var18, Material.water))
                     {
-                        var27 += 1.0D / (double)var26;
+                        var26 += 1.0D / (double)var27;
                     }
                 }
 
-                if (var27 > 0.0D)
+                if (var26 > 0.0D)
                 {
                     if (this.ticksCatchable > 0)
                     {
@@ -348,14 +362,19 @@
                     }
                     else
                     {
-                        short var29 = 500;
+                        // FCMOD: Changed
+                        /*
+                        short var28 = 500;
 
                         if (this.worldObj.canLightningStrikeAt(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY) + 1, MathHelper.floor_double(this.posZ)))
                         {
-                            var29 = 300;
+                            var28 = 300;
                         }
 
-                        if (this.rand.nextInt(var29) == 0)
+                        if (this.rand.nextInt(var28) == 0)
+                        */
+                        if ( CheckForBite() )
+                    	// END FCMOD
                         {
                             this.ticksCatchable = this.rand.nextInt(30) + 10;
                             this.motionY -= 0.20000000298023224D;
@@ -378,19 +397,26 @@
                                 var17 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width;
                                 this.worldObj.spawnParticle("splash", this.posX + (double)var31, (double)(var30 + 1.0F), this.posZ + (double)var17, this.motionX, this.motionY, this.motionZ);
                             }
+                            
+                            // FCMOD: Added
+                            if ( rand.nextInt( 5 ) == 0 )
+                            {
+                            	LoseBait();
                         }
+                            // END FCMOD
                     }
                 }
+                }
 
                 if (this.ticksCatchable > 0)
                 {
                     this.motionY -= (double)(this.rand.nextFloat() * this.rand.nextFloat() * this.rand.nextFloat()) * 0.2D;
                 }
 
-                var13 = var27 * 2.0D - 1.0D;
+                var13 = var26 * 2.0D - 1.0D;
                 this.motionY += 0.03999999910593033D * var13;
 
-                if (var27 > 0.0D)
+                if (var26 > 0.0D)
                 {
                     var25 = (float)((double)var25 * 0.9D);
                     this.motionY *= 0.8D;
@@ -460,6 +486,16 @@
             else if (this.ticksCatchable > 0)
             {
                 EntityItem var13 = new EntityItem(this.worldObj, this.posX, this.posY, this.posZ, new ItemStack(Item.fishRaw));
+            	// FCMOD: Added
+            	LoseBait();
+            	
+            	if ( this.rand.nextInt( 100 ) == 0 )
+            	{
+            		var13 = new EntityItem( worldObj, posX, posY, posZ, new ItemStack( Item.bootsLeather ) );
+            		
+            		var13.getEntityItem().setItemDamage( var13.getEntityItem().getMaxDamage() - ( 1 + this.rand.nextInt( 10 ) ) );
+            	}
+            	// END FCMOD
                 double var3 = this.angler.posX - this.posX;
                 double var5 = this.angler.posY - this.posY;
                 double var7 = this.angler.posZ - this.posZ;
@@ -470,7 +506,11 @@
                 var13.motionZ = var7 * var11;
                 this.worldObj.spawnEntityInWorld(var13);
                 this.angler.addStat(StatList.fishCaughtStat, 1);
+                // FCMOD: Removed
+                /*
                 this.angler.worldObj.spawnEntityInWorld(new EntityXPOrb(this.angler.worldObj, this.angler.posX, this.angler.posY + 0.5D, this.angler.posZ + 0.5D, this.rand.nextInt(6) + 1));
+                */
+                // END FCMOD
                 var1 = 1;
             }
 
@@ -497,4 +537,123 @@
             this.angler.fishEntity = null;
         }
     }
+    
+    // FCMOD: Added New
+    private boolean m_bIsBaited;
+    
+    public EntityFishHook( World world, EntityPlayer player, boolean bIsBaited )
+    {
+    	this( world, player );
+    	
+    	m_bIsBaited = bIsBaited;
 }
+    
+	private void LoseBait()
+	{
+		if ( m_bIsBaited )
+		{
+			m_bIsBaited = false;
+			
+            ItemStack rodStack = angler.getCurrentEquippedItem();
+            
+            if ( rodStack != null && rodStack.getItem() == FCBetterThanWolves.fcItemFishingRodBaited )
+            {
+            	ItemStack unbaitedStack = rodStack.copy();
+            	unbaitedStack.stackSize = 1;
+            	unbaitedStack.itemID = Item.fishingRod.itemID;
+            	
+            	angler.inventory.setInventorySlotContents( angler.inventory.currentItem, unbaitedStack );
+            }
+		}
+	}
+	
+	private boolean IsBodyOfWaterLargeEnoughForFishing()
+	{
+        int i = MathHelper.floor_double( posX );
+        int j = MathHelper.floor_double( posY ) - 1;
+        int k = MathHelper.floor_double( posZ );
+
+        for ( int iTempI = i - 2; iTempI <= i + 2; iTempI++ )
+        {
+            for ( int iTempJ = j - 2; iTempJ <= j; iTempJ++ )
+            {
+                for ( int iTempK = k - 2; iTempK <= k + 2; iTempK++ )
+                {
+                	if ( !FCUtilsWorld.IsWaterSourceBlock( worldObj, iTempI, iTempJ, iTempK ) )
+            		{
+                		return false;
+            		}                		
+                }
+            }
+        }
+        
+		return true;
+	}
+
+    private boolean CheckForBite()
+    {
+    	if ( m_bIsBaited )
+    	{
+	        int iBiteOdds = 1500; // previously 1000
+	        
+	        int iTimeOfDay = (int)( worldObj.worldInfo.getWorldTime() % 24000L );
+	        
+	        if ( iTimeOfDay > 14000 && iTimeOfDay < 22000 )
+	        {
+	        	// at night
+	        	
+	        	int iMoonPhase = worldObj.getMoonPhase();
+	        	
+	        	if ( iMoonPhase == 0 )
+	        	{
+	        		iBiteOdds /= 10;
+	        	}
+	        	else
+	        	{
+	        		iBiteOdds *= 4;
+	        		
+	                if ( worldObj.IsPrecipitatingAtPos( MathHelper.floor_double( posX ), 
+	                	MathHelper.floor_double( posZ ) ) )
+	                {
+		            	// in the rain
+		            	
+	                	iBiteOdds /= 2;
+	                }
+	        	}
+	        }
+	        else
+	        {
+	        	if ( iTimeOfDay < 2000 || iTimeOfDay > 22000 || 
+	        		( iTimeOfDay > 10000 && iTimeOfDay < 14000 ) ) 
+	            {
+	        		// dawn or dusk
+	        		
+	        		iBiteOdds /= 2;
+	            }
+	
+                if ( worldObj.IsPrecipitatingAtPos( MathHelper.floor_double( posX ), 
+                	MathHelper.floor_double( posZ ) ) )
+	            {
+	            	// in the rain
+	            	
+	            	iBiteOdds /= 2;
+	            }
+	        }
+	
+	        if ( rand.nextInt( iBiteOdds ) == 0 )
+	        {
+	        	if ( worldObj.canBlockSeeTheSky( MathHelper.floor_double( posX ), 
+	        		MathHelper.floor_double( posY) + 1, MathHelper.floor_double( posZ) ) )
+	        	{	        		
+		        	if ( IsBodyOfWaterLargeEnoughForFishing() )
+		        	{
+		        		return true;
+		        	}
+	        	}
+	        }
+    	}
+    	
+    	return false;
+    }
+    // END FCMOD
+}
