--- a/minecraft/net/minecraft/src/BlockHalfSlab.java
+++ b/minecraft/net/minecraft/src/BlockHalfSlab.java
@@ -15,18 +15,26 @@
         if (par2)
         {
             opaqueCubeLookup[par1] = true;
+            
+            // FCMOD: Added
+            InitBlockBounds( 0D, 0D, 0D, 1D, 1D, 1D );
+            // END FCMOD
         }
         else
         {
-            this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+        	// FCMOD: Changed
+            //this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
+            InitBlockBounds( 0D, 0D, 0D, 1D, 0.5D, 1D );
+            
+            useNeighborBrightness[par1] = true;
+            // END FCMOD
         }
 
         this.setLightOpacity(255);
     }
 
-    /**
-     * Updates the blocks bounds based on its current state. Args: world, x, y, z
-     */
+    // FCMOD: Removed
+    /*
     public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess, int par2, int par3, int par4)
     {
         if (this.isDoubleSlab)
@@ -48,9 +56,6 @@
         }
     }
 
-    /**
-     * Sets the block's bounds for rendering it as an item
-     */
     public void setBlockBoundsForItemRender()
     {
         if (this.isDoubleSlab)
@@ -63,15 +68,13 @@
         }
     }
 
-    /**
-     * Adds all intersecting collision boxes to a list. (Be sure to only add boxes to the list if they intersect the
-     * mask.) Parameters: World, X, Y, Z, mask, list, colliding entity
-     */
     public void addCollisionBoxesToList(World par1World, int par2, int par3, int par4, AxisAlignedBB par5AxisAlignedBB, List par6List, Entity par7Entity)
     {
         this.setBlockBoundsBasedOnState(par1World, par2, par3, par4);
         super.addCollisionBoxesToList(par1World, par2, par3, par4, par5AxisAlignedBB, par6List, par7Entity);
     }
+    */
+	// END FCMOD
 
     /**
      * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
@@ -118,6 +121,8 @@
      * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given
      * coordinates.  Args: blockAccess, x, y, z, side
      */
+    // FCMOD: Removed and replaced (client only)
+    /*
     public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5)
     {
         if (this.isDoubleSlab)
@@ -137,6 +142,8 @@
             return var9 ? (par5 == 0 ? true : (par5 == 1 && super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5) ? true : !isBlockSingleSlab(par1IBlockAccess.getBlockId(par2, par3, par4)) || (par1IBlockAccess.getBlockMetadata(par2, par3, par4) & 8) == 0)) : (par5 == 1 ? true : (par5 == 0 && super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5) ? true : !isBlockSingleSlab(par1IBlockAccess.getBlockId(par2, par3, par4)) || (par1IBlockAccess.getBlockMetadata(par2, par3, par4) & 8) != 0));
         }
     }
+    */
+    // END FCMOD
 
     /**
      * Takes a block ID, returns true if it's the same as the ID for a stone or wooden single slab.
@@ -166,4 +173,175 @@
     {
         return isBlockSingleSlab(this.blockID) ? this.blockID : (this.blockID == Block.stoneDoubleSlab.blockID ? Block.stoneSingleSlab.blockID : (this.blockID == Block.woodDoubleSlab.blockID ? Block.woodSingleSlab.blockID : Block.stoneSingleSlab.blockID));
     }
+    
+	// FCMOD: Added New
+    @Override
+    public AxisAlignedBB GetBlockBoundsFromPoolBasedOnState( 
+    	IBlockAccess blockAccess, int i, int j, int k )
+    {
+    	AxisAlignedBB bounds;
+    	
+        if ( isDoubleSlab )
+        {
+            bounds = AxisAlignedBB.getAABBPool().getAABB( 0F, 0F, 0F, 1F, 1F, 1F );
 }
+        else
+        {
+            if ( GetIsUpsideDown( blockAccess, i, j, k ) )
+            {
+                bounds = AxisAlignedBB.getAABBPool().getAABB( 0F, 0.5F, 0F, 1F, 1F, 1F );
+            }
+            else
+            {
+            	bounds = AxisAlignedBB.getAABBPool().getAABB( 0F, 0F, 0F, 1F, 0.5F, 1F );
+            }
+        }
+        
+        return bounds;
+    }
+    
+    @Override
+	public boolean HasLargeCenterHardPointToFacing( IBlockAccess blockAccess, int i, int j, int k, int iFacing, boolean bIgnoreTransparency )
+	{
+    	if ( !isDoubleSlab )
+    	{
+            boolean bIsUpsideDown = GetIsUpsideDown( blockAccess, i, j, k );
+            
+            if ( iFacing == 0  ) 
+            {
+            	if ( !bIsUpsideDown )
+            	{
+            		return true;
+            	}
+            }
+            else if ( iFacing == 1 )
+            {
+            	if ( bIsUpsideDown )
+            	{
+            		return true;
+            	}
+            }
+    	}
+    	
+		return super.HasLargeCenterHardPointToFacing( blockAccess, i, j, k, iFacing, bIgnoreTransparency );
+	}
+
+    @Override
+    public float GroundCoverRestingOnVisualOffset( IBlockAccess blockAccess, int i, int j, int k )
+    {
+        if ( !isDoubleSlab )
+        {
+            if ( ( blockAccess.getBlockMetadata( i, j, k ) & 8 ) == 0 )
+            {
+            	return -0.5F;
+            }
+        }
+        
+    	return 0F;
+    }
+    
+    @Override
+    public boolean CanGroundCoverRestOnBlock( World world, int i, int j, int k )
+    {
+    	return true;
+    }
+    
+    @Override
+    public boolean CanMobsSpawnOn( World world, int i, int j, int k )
+    {
+        return blockMaterial.GetMobsCanSpawnOn( world.provider.dimensionId );
+    }
+
+    @Override
+    public float MobSpawnOnVerticalOffset( World world, int i, int j, int k )
+    {
+        if ( !isDoubleSlab && !GetIsUpsideDown( world, i, j, k ) )
+        {
+        	return -0.5F;
+        }
+        
+    	return 0F;
+    }
+    
+    //------------- Class Specific Methods ------------//
+    
+    public boolean GetIsUpsideDown( IBlockAccess blockAccess, int i, int j, int k )
+    {
+    	return GetIsUpsideDown( blockAccess.getBlockMetadata( i, j, k ) );
+    }
+    
+    public boolean GetIsUpsideDown( int iMetadata )
+    {
+    	return ( iMetadata & 8 ) > 0;
+    }
+    
+	//----------- Client Side Functionality -----------//
+    
+    @Override
+    public boolean shouldSideBeRendered( IBlockAccess blockAccess, int iNeighborI, int iNeighborJ, int iNeighborK, int iSide )
+    {
+    	if ( isDoubleSlab )
+    	{
+    		return super.shouldSideBeRendered( blockAccess, iNeighborI, iNeighborJ, iNeighborK, iSide );
+    	}
+
+    	FCUtilsBlockPos myPos = new FCUtilsBlockPos( iNeighborI, iNeighborJ, iNeighborK, 
+    		GetOppositeFacing( iSide ) );
+    	
+    	boolean bUpsideDown = GetIsUpsideDown( blockAccess, myPos.i, myPos.j, myPos.k );
+    	
+    	if ( iSide < 2 )
+    	{
+	    	if ( iSide == 0 )
+	    	{
+	    		return bUpsideDown || !blockAccess.isBlockOpaqueCube( 
+	    			iNeighborI, iNeighborJ, iNeighborK );
+	    	}
+	    	else // iSide == 1
+	    	{
+	    		return !bUpsideDown || !blockAccess.isBlockOpaqueCube( 
+	    			iNeighborI, iNeighborJ, iNeighborK );
+	    	}
+    	}
+
+        return FCClientUtilsRender.ShouldRenderNeighborHalfSlabSide( blockAccess, 
+        	iNeighborI, iNeighborJ, iNeighborK, iSide, bUpsideDown );
+    }
+    
+    @Override
+    public boolean ShouldRenderNeighborHalfSlabSide( IBlockAccess blockAccess, int i, int j, int k, int iNeighborSlabSide, boolean bNeighborUpsideDown )
+    {
+    	if ( isDoubleSlab )
+    	{
+    		return false;
+    	}
+    	
+		return GetIsUpsideDown( blockAccess, i, j, k ) != bNeighborUpsideDown;
+    }
+    
+    @Override
+    public boolean ShouldRenderNeighborFullFaceSide( IBlockAccess blockAccess, int i, int j, int k, int iNeighborSide )
+    {
+    	if ( isDoubleSlab )
+    	{
+    		return false;
+    	}
+    	
+    	if ( iNeighborSide < 2 )
+    	{
+    		boolean bUpsideDown = GetIsUpsideDown( blockAccess, i, j, k );
+    		
+    		if ( iNeighborSide == 0 )
+    		{
+    			return !bUpsideDown;
+    		}
+    		else // iNeighborSide == 1
+    		{
+    			return bUpsideDown;
+    		}    			
+    	}
+    	
+		return true;
+    }    
+	// END FCMOD
+}
