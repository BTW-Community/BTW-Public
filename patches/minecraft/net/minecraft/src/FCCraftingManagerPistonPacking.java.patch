--- /dev/null
+++ b/minecraft/net/minecraft/src/FCCraftingManagerPistonPacking.java
@@ -0,0 +1,121 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class FCCraftingManagerPistonPacking {
+	public static FCCraftingManagerPistonPacking instance = new FCCraftingManagerPistonPacking();
+
+	private ArrayList<FCCraftingManagerPistonPackingRecipe> recipes = new ArrayList();
+
+	private FCCraftingManagerPistonPacking() {}
+
+	public void addRecipe(Block output, int outputMetadata, ItemStack[] input) {
+		recipes.add(new FCCraftingManagerPistonPackingRecipe(output, outputMetadata, input));
+	}
+
+	public boolean removeRecipe(Block output, int outputMetadata, ItemStack[] input) {
+		FCCraftingManagerPistonPackingRecipe recipeToRemove = new FCCraftingManagerPistonPackingRecipe(output, outputMetadata, input);
+
+		for (FCCraftingManagerPistonPackingRecipe recipe : recipes) {
+			if (recipe.matchesRecipe(recipeToRemove)) {
+				return true;
+			}
+		}
+
+		return false;
+	}
+
+	public FCCraftingManagerPistonPackingRecipe getRecipe(ItemStack[] input) {
+		for (FCCraftingManagerPistonPackingRecipe recipe : recipes) {
+			if (recipe.matchesInputs(input)) {
+				return recipe;
+			}
+		}
+
+		return null;
+	}
+
+	public FCCraftingManagerPistonPackingRecipe getValidRecipeFromItemList(List<EntityItem> itemList) {
+		if (itemList == null || itemList.isEmpty()) {
+			return null;
+		}
+
+		// First key is the item id
+		// Second map contains metadata as key and count as value
+		Map<Integer, Map<Integer, Integer>> itemCountMap = new HashMap();
+
+		//Collects all item entities by type into a single count
+		//Makes multiple stacks of the same item count together
+		for (EntityItem entity : itemList) {
+			if (!entity.isDead) {
+				int itemID = entity.getEntityItem().itemID;
+				int metadata = entity.getEntityItem().getItemDamage();
+				int stackSize = entity.getEntityItem().stackSize;
+
+				if (itemCountMap.containsKey(itemID)) {
+					Map<Integer, Integer> metadataMap = itemCountMap.get(itemID);
+					
+					int currentSize = 0;
+					
+					if (metadataMap.containsKey(metadata)) {
+						currentSize = metadataMap.get(metadata); 
+					}
+					
+					metadataMap.put(metadata, currentSize + stackSize);
+				}
+				else {
+					itemCountMap.put(itemID, new HashMap());
+					Map<Integer, Integer> metadataMap = itemCountMap.get(itemID);
+					metadataMap.put(metadata, stackSize);
+				}
+			}
+		}
+
+		for (FCCraftingManagerPistonPackingRecipe recipe : recipes) {
+			boolean recipeMatch = true;
+
+			for (ItemStack recipeStack : recipe.getInput()) {
+				//If any item in the recipe is missing, or any item doesn't have enough ingredients, immediately move on to the next recipe
+				if (!itemCountMap.containsKey(recipeStack.itemID)) {
+					recipeMatch = false;
+					break;
+				}
+				else {
+					if (recipeStack.getItemDamage() == FCUtilsInventory.m_iIgnoreMetadata) {
+						int totalCount = 0;
+						
+						for (Integer i : itemCountMap.get(recipeStack.itemID).values()) {
+							totalCount += i;
+						}
+						
+						if (totalCount < recipeStack.stackSize) {
+							recipeMatch = false;
+							break;
+						}
+					}
+					else if (itemCountMap.get(recipeStack.itemID).containsKey(recipeStack.getItemDamage())){
+						int count = itemCountMap.get(recipeStack.itemID).get(recipeStack.getItemDamage());
+						
+						if (count < recipeStack.stackSize) {
+							recipeMatch = false;
+							break;
+						}
+					}
+					else {
+						recipeMatch = false;
+						break;
+					}
+				}
+			}
+
+			if (recipeMatch) {
+				return recipe;
+			}
+		}
+
+		return null;
+	}
+}
\ No newline at end of file
