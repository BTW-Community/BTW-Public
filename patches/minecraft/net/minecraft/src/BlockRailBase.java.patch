--- a/minecraft/net/minecraft/src/BlockRailBase.java
+++ b/minecraft/net/minecraft/src/BlockRailBase.java
@@ -21,14 +21,22 @@
      */
     public static final boolean isRailBlock(int par0)
     {
+        // FCMOD: Changed to recognize all rail blocks
+		/*
         return par0 == Block.rail.blockID || par0 == Block.railPowered.blockID || par0 == Block.railDetector.blockID || par0 == Block.railActivator.blockID;
+        */
+    	return Block.blocksList[par0] instanceof BlockRailBase;
+    	// END FCMOD
     }
 
     protected BlockRailBase(int par1, boolean par2)
     {
         super(par1, Material.circuits);
         this.isPowered = par2;
-        this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+        // FCMOD: Changed
+        //this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+        InitBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+        // END FCMOD
         this.setCreativeTab(CreativeTabs.tabTransport);
     }
 
@@ -62,15 +70,21 @@
      * Ray traces through the blocks collision from start vector to end vector returning a ray trace hit. Args: world,
      * x, y, z, startVec, endVec
      */
+    // FCMOD: Removed
+    /*
     public MovingObjectPosition collisionRayTrace(World par1World, int par2, int par3, int par4, Vec3 par5Vec3, Vec3 par6Vec3)
     {
         this.setBlockBoundsBasedOnState(par1World, par2, par3, par4);
         return super.collisionRayTrace(par1World, par2, par3, par4, par5Vec3, par6Vec3);
     }
+    */
+    // END FCMOD
 
     /**
      * Updates the blocks bounds based on its current state. Args: world, x, y, z
      */
+    // FCMOD: Removed
+    /*
     public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess, int par2, int par3, int par4)
     {
         int var5 = par1IBlockAccess.getBlockMetadata(par2, par3, par4);
@@ -84,6 +98,8 @@
             this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
         }
     }
+    */
+    // END FCMOD
 
     /**
      * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
@@ -178,6 +194,12 @@
 
             if (var8)
             {
+            	// FCMOD: Code added to prevent item duplication since multiple notifications can occur at once
+            	if ( par1World.getBlockId( par2, par3, par4 ) != blockID )
+            	{
+            		return;
+            	}
+            	// END FCMOD
                 this.dropBlockAsItem(par1World, par2, par3, par4, par1World.getBlockMetadata(par2, par3, par4), 0);
                 par1World.setBlockToAir(par2, par3, par4);
             }
@@ -235,4 +257,138 @@
             par1World.notifyBlocksOfNeighborChange(par2, par3 - 1, par4, par5);
         }
     }
+    
+	// FCMOD: Added New
+	@Override
+	public boolean CanRotateOnTurntable( IBlockAccess blockAccess, int i, int j, int k )
+	{
+		return true;
 }
+	
+	@Override
+	public int RotateMetadataAroundJAxis( int iMetadata, boolean bReverse )
+	{
+		int iDirection = iMetadata;
+		
+		if ( isPowered() ) // this should never be true
+		{
+			iDirection &= 7;
+		}
+		
+		if ( iDirection == 0 )
+		{
+			iDirection = 1;
+		}
+		else if ( iDirection == 1 )
+		{
+			iDirection = 0;
+		}
+		// sloped rails
+		else if ( iDirection == 2 )
+		{
+		}
+		else if ( iDirection == 3 )
+		{
+		}
+		else if ( iDirection == 4 )
+		{
+		}
+		else if ( iDirection == 5 )
+		{
+		}
+		// curved rails
+		else if ( iDirection == 6 )
+		{
+			if ( bReverse )
+			{
+				iDirection = 7;
+			}
+			else
+			{
+				iDirection = 9;
+			}
+		}
+		else if ( iDirection == 7 )
+		{
+			if ( bReverse )
+			{
+				iDirection = 8;
+			}
+			else
+			{
+				iDirection = 6;
+			}
+		}
+		else if ( iDirection == 8 )
+		{
+			if ( bReverse )
+			{
+				iDirection = 9;
+			}
+			else
+			{
+				iDirection = 7;
+			}
+		}
+		else if ( iDirection == 9 )
+		{
+			if ( bReverse )
+			{
+				iDirection = 6;
+			}
+			else
+			{
+				iDirection = 8;
+			}
+		}
+		
+		if ( isPowered() ) // this should never be true
+		{
+			iMetadata = (iMetadata & 8) | iDirection;
+		}
+		else
+		{
+			iMetadata = iDirection;
+		}
+		
+		return iMetadata;
+	}
+	
+    @Override
+    public AxisAlignedBB GetBlockBoundsFromPoolBasedOnState( 
+    	IBlockAccess blockAccess, int i, int j, int k )
+    {
+        int iDirection = blockAccess.getBlockMetadata( i, j, k );
+
+        if ( iDirection >= 2 && iDirection <= 5 )
+        {
+        	return AxisAlignedBB.getAABBPool().getAABB(         	
+        		0D, 0D, 0D, 1D, 0.625D, 1D );
+        }
+        else
+        {
+        	return AxisAlignedBB.getAABBPool().getAABB(         	
+        		0D, 0D, 0D, 1D, 0.125F, 1D );
+        }
+    }
+    
+	//----------- Client Side Functionality -----------//
+    
+    @Override
+    public boolean RenderBlock( RenderBlocks renderer, int i, int j, int k )
+    {
+        renderer.setRenderBounds( GetBlockBoundsFromPoolBasedOnState( 
+        	renderer.blockAccess, i, j, k ) );
+        
+    	return renderer.renderBlockMinecartTrack( this, i, j, k );
+    }
+    
+    @Override
+    public boolean shouldSideBeRendered( IBlockAccess blockAccess, 
+    	int iNeighborI, int iNeighborJ, int iNeighborK, int iSide )
+    {
+		return m_currentBlockRenderer.ShouldSideBeRenderedBasedOnCurrentBounds( 
+			iNeighborI, iNeighborJ, iNeighborK, iSide );
+    }	
+	// END FCMOD
+}
