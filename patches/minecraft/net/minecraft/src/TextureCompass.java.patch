--- a/minecraft/net/minecraft/src/TextureCompass.java
+++ b/minecraft/net/minecraft/src/TextureCompass.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import com.prupe.mcpatcher.hd.FancyDial;
 import net.minecraft.client.Minecraft;
 
 public class TextureCompass extends TextureStitched
@@ -12,14 +13,21 @@
     /** Speed and direction of compass rotation */
     public double angleDelta;
 
+    // FCMOD: Added
+    private boolean m_bDirectionUpdated = false;
+    // END FCMOD
+
     public TextureCompass()
     {
         super("compass");
         compassTexture = this;
+        FancyDial.setup(this);
     }
 
     public void updateAnimation()
     {
+    	// FCMOD: Changed
+    	/*
         Minecraft var1 = Minecraft.getMinecraft();
 
         if (var1.theWorld != null && var1.thePlayer != null)
@@ -30,17 +38,29 @@
         {
             this.updateCompass((World)null, 0.0D, 0.0D, 0.0D, true, false);
         }
+        */
+    	UpdateInert();
+    	
+    	m_bDirectionUpdated = false;
+    	// END FCMOD
     }
 
     /**
      * Updates the compass based on the given x,z coords and camera direction
      */
+    // FCMOD: Changed to add player param (client only)
+    /*
     public void updateCompass(World par1World, double par2, double par4, double par6, boolean par8, boolean par9)
+    */
+    private void updateCompass(World par1World, double par2, double par4, double par6, boolean par8, boolean par9, EntityPlayer player )
+    // END FCMOD
     {
         double var10 = 0.0D;
 
         if (par1World != null && !par8)
         {
+        	// FCMOD: Code change (client only)
+        	/*
             ChunkCoordinates var12 = par1World.getSpawnPoint();
             double var13 = (double)var12.posX - par2;
             double var15 = (double)var12.posZ - par4;
@@ -51,13 +71,18 @@
             {
                 var10 = Math.random() * Math.PI * 2.0D;
             }
+            */
+        	var10 = ComputeCompassAngle( par2, par4, par6, par9, player );
+    		// END FCMOD
         }
 
         if (par9)
         {
             this.currentAngle = var10;
         }
-        else
+        // FCMOD: Changed
+        else if ( !m_bDirectionUpdated )
+    	// END FCMOD
         {
             double var17;
 
@@ -84,8 +109,13 @@
             this.angleDelta += var17 * 0.1D;
             this.angleDelta *= 0.8D;
             this.currentAngle += this.angleDelta;
+            // FCMOD: Added
+            m_bDirectionUpdated = true;
+            // END FCMOD
         }
 
+        if (!FancyDial.update(this, par9))
+        {
         int var18;
 
         for (var18 = (int)((this.currentAngle / (Math.PI * 2D) + 1.0D) * (double)this.textureList.size()) % this.textureList.size(); var18 < 0; var18 = (var18 + this.textureList.size()) % this.textureList.size())
@@ -100,3 +130,54 @@
         }
     }
 }
+    
+    // FCMOD: Added (client only)
+    public void UpdateActive()
+    {
+        Minecraft mc = Minecraft.getMinecraft();
+
+        if ( mc.theWorld != null && mc.thePlayer != null )
+        {
+            updateCompass( mc.theWorld, mc.thePlayer.posX, mc.thePlayer.posZ, 
+            	mc.thePlayer.rotationYaw, false, false, mc.thePlayer );
+        }
+        else
+        {
+            updateCompass( null, 0.0D, 0.0D, 0.0D, true, false, null );
+        }
+    }
+    
+    public void UpdateInert()
+    {
+        this.frameCounter = textureList.size() / 2;
+        this.textureSheet.copyFrom(this.originX, this.originY, (Texture)this.textureList.get(this.frameCounter), this.rotated);
+    }
+    
+	private double ComputeCompassAngle( double dSourceX, double dSourceZ, double dSourceYaw, boolean bIsInFrame, EntityPlayer player )
+	{
+		double angle = Math.PI;
+		
+        if ( !bIsInFrame && player != null )
+		{
+            if ( !player.HasValidMagneticPointForLocation() )
+            {
+                angle = Math.random() * Math.PI * 2.0D;
+            }
+            else
+            {
+		        int iTargetI = player.GetStongestMagneticPointForLocationI();
+		        int iTargetK = player.GetStongestMagneticPointForLocationK();
+		        
+		        double dDeltaX = (double)iTargetI + 0.5D - dSourceX;
+		        double dDeltaZ = (double)iTargetK + 0.5D - dSourceZ;
+		        
+		        dSourceYaw %= 360D;
+		        
+		        angle = -(( dSourceYaw - 90.0D ) * Math.PI / 180.0D - Math.atan2( dDeltaZ, dDeltaX ));
+            }
+		}
+        
+		return angle;
+	}
+    // END FCMOD
+}
