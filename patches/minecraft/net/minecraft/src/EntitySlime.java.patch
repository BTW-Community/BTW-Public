--- a/minecraft/net/minecraft/src/EntitySlime.java
+++ b/minecraft/net/minecraft/src/EntitySlime.java
@@ -1,3 +1,5 @@
+// FCMOD: Class changes deprecated 09/24/2018
+
 package net.minecraft.src;
 
 public class EntitySlime extends EntityLiving implements IMob
@@ -189,7 +191,7 @@
 
     protected EntitySlime createInstance()
     {
-        return new EntitySlime(this.worldObj);
+        return (EntitySlime) EntityList.createEntityOfType(EntitySlime.class, this.worldObj);
     }
 
     /**
@@ -205,8 +207,8 @@
 
             for (int var3 = 0; var3 < var2; ++var3)
             {
-                float var4 = ((float)(var3 % 2) - 0.5F) * (float)var1 / 4.0F;
-                float var5 = ((float)(var3 / 2) - 0.5F) * (float)var1 / 4.0F;
+                float var4 = ((float)(var3 % 2) - 0.5F) * (float)var1 / 40.0F;
+                float var5 = ((float)(var3 / 2) - 0.5F) * (float)var1 / 40.0F;
                 EntitySlime var6 = this.createInstance();
                 var6.setSlimeSize(var1 / 2);
                 var6.setLocationAndAngles(this.posX + (double)var4, this.posY + 0.5D, this.posZ + (double)var5, this.rand.nextFloat() * 360.0F, 0.0F);
@@ -274,6 +276,35 @@
     }
 
     /**
+     * Checks to make sure the light is not too bright where the mob is spawning
+     */
+    protected boolean isValidLightLevel() {
+        int x = MathHelper.floor_double(this.posX);
+        int y = MathHelper.floor_double(this.boundingBox.minY);
+        int z = MathHelper.floor_double(this.posZ);
+
+        if (this.worldObj.getSavedLightValue(EnumSkyBlock.Sky, x, y, z) > this.rand.nextInt(32)) {
+            return false;
+        }
+        else {
+            int blockLightValue = this.worldObj.getBlockLightValueNoSky(x, y, z);
+            
+            if (blockLightValue > 0) {
+            	return false;
+            }
+            else {
+                int naturalLightValue = this.worldObj.GetBlockNaturalLightValue(x, y, z);
+            	
+                if (this.worldObj.isThundering()) {
+                	naturalLightValue = Math.min(naturalLightValue, 5);
+                }
+                
+                return naturalLightValue <= this.rand.nextInt(8);
+            }
+        }
+    }
+
+    /**
      * Checks if the entity's current position is a valid location to spawn this entity.
      */
     public boolean getCanSpawnHere()
@@ -290,7 +321,7 @@
             {
                 BiomeGenBase var2 = this.worldObj.getBiomeGenForCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
 
-                if (var2 == BiomeGenBase.swampland && this.posY > 50.0D && this.posY < 70.0D && this.rand.nextFloat() < 0.5F && this.rand.nextFloat() < spawnChances[this.worldObj.getMoonPhase()] && this.worldObj.getBlockLightValue(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ)) <= this.rand.nextInt(8))
+                if (var2.canSlimesSpawnOnSurface() && this.posY > 50.0D && this.posY < 70.0D && this.rand.nextFloat() < 0.5F && this.rand.nextFloat() < spawnChances[this.worldObj.getMoonPhase()] && this.isValidLightLevel())
                 {
                     return super.getCanSpawnHere();
                 }
