--- a/minecraft/net/minecraft/src/WorldInfo.java
+++ b/minecraft/net/minecraft/src/WorldInfo.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.Map;
+
 public class WorldInfo
 {
     /** Holds the seed of the currently world. */
@@ -166,6 +168,10 @@
         {
             this.theGameRules.readGameRulesFromNBT(par1NBTTagCompound.getCompoundTag("GameRules"));
         }
+        
+        // FCMOD: Code added
+        LoadModInfoFromNBT( par1NBTTagCompound );
+        // END FCMOD
     }
 
     public WorldInfo(WorldSettings par1WorldSettings, String par2Str)
@@ -213,6 +219,9 @@
         this.allowCommands = par1WorldInfo.allowCommands;
         this.initialized = par1WorldInfo.initialized;
         this.theGameRules = par1WorldInfo.theGameRules;
+        // FCMOD: Code added
+        CopyModInfo( par1WorldInfo );
+        // END FCMOD        
     }
 
     /**
@@ -261,6 +270,10 @@
         par1NBTTagCompound.setBoolean("initialized", this.initialized);
         par1NBTTagCompound.setCompoundTag("GameRules", this.theGameRules.writeGameRulesToNBT());
 
+        // FCMOD: Code added
+        SaveModInfoToNBT( par1NBTTagCompound );
+        // END FCMOD
+
         if (par2NBTTagCompound != null)
         {
             par1NBTTagCompound.setCompoundTag("Player", par2NBTTagCompound);
@@ -325,6 +338,10 @@
         return this.playerTag;
     }
 
+	/** 
+	 * FCNOTE: Be careful calling this function as it can return unexpected results in derived worlds
+	 * You normally want to use world.provider.dimensionId instead
+	 */
     public int getDimension()
     {
         return this.dimension;
@@ -669,4 +686,89 @@
     {
         return par0WorldInfo.allowCommands;
     }
+
+    // FCMOD: Code added
+    private InventoryEnderChest m_globalEnderChestInventory = new InventoryEnderChest();
+    
+    public boolean m_bPreviouslyRaining = false;
+    public boolean m_bPreviouslyThundering = false;
+    
+    private boolean m_bHasNetherBeenAccessed = false;
+    private boolean m_bHasWitherBeenSummoned = false;
+    private boolean m_bHasEndDimensionBeenAccessed = false;
+
+    public InventoryEnderChest GetGlobalEnderChestInventory()
+    {
+    	return m_globalEnderChestInventory;
 }
+
+    public void SetGlobalEnderChestInventory(InventoryEnderChest inventory)
+    {
+    	m_globalEnderChestInventory = inventory;
+    }
+    
+    private void LoadModInfoFromNBT(NBTTagCompound tag) {
+    	for (Map.Entry<Class<? extends FCAddOn>, FCAddOnUtilsWorldData> entry : FCAddOnHandler.addonWorldDataMap.entrySet()) {
+    		entry.getValue().loadGlobalDataFromNBT(this, tag);
+    	}
+    }
+    
+    private void SaveModInfoToNBT(NBTTagCompound tag) {
+    	for (Map.Entry<Class<? extends FCAddOn>, FCAddOnUtilsWorldData> entry : FCAddOnHandler.addonWorldDataMap.entrySet()) {
+    		entry.getValue().saveGlobalDataToNBT(this, tag);
+    	}
+    }
+    
+    private void CopyModInfo(WorldInfo newInfo) {
+    	for (Map.Entry<Class<? extends FCAddOn>, FCAddOnUtilsWorldData> entry : FCAddOnHandler.addonWorldDataMap.entrySet()) {
+    		entry.getValue().copyGlobalData(newInfo, this);
+    	}
+    }
+    
+    public boolean HasNetherBeenAccessed()
+    {
+    	return m_bHasNetherBeenAccessed;
+    }
+    
+    public void SetNetherBeenAccessed()
+    {
+    	m_bHasNetherBeenAccessed = true;
+    }
+    
+    public void SetNetherBeenAccessed(boolean hasBeenAccessed)
+    {
+    	m_bHasNetherBeenAccessed = hasBeenAccessed;
+    }
+    
+    public boolean HasWitherBeenSummoned()
+    {
+    	return m_bHasWitherBeenSummoned;
+    }
+    
+    public void SetWitherHasBeenSummoned()
+    {
+    	m_bHasWitherBeenSummoned = true;
+    }
+    
+    public void SetWitherHasBeenSummoned(boolean hasBeenSummoned)
+    {
+    	m_bHasWitherBeenSummoned = hasBeenSummoned;
+    }
+    
+    public boolean HasEndDimensionBeenAccessed()
+    {
+    	return m_bHasEndDimensionBeenAccessed;
+    }
+    
+    public void SetEndDimensionHasBeenAccessed()
+    {
+    	m_bHasEndDimensionBeenAccessed = true;
+    }
+    
+    public void SetEndDimensionHasBeenAccessed(boolean hasBeenAccessed)
+    {
+    	m_bHasEndDimensionBeenAccessed = hasBeenAccessed;
+    }
+    
+    // END FCMOD
+}
