--- /dev/null
+++ b/minecraft_server/net/minecraft/src/FCUtilsReflection.java
@@ -0,0 +1,111 @@
+package net.minecraft.src;
+
+import java.lang.reflect.Constructor;
+import java.util.HashMap;
+import java.util.Map;
+
+public class FCUtilsReflection {
+	private static boolean isObfuscated = false;
+	
+	public static Map<Class, Class> boxedToPrimitiveTypeMap = new HashMap();
+	
+	static {
+		boxedToPrimitiveTypeMap.put(Byte.class, Byte.TYPE);
+		boxedToPrimitiveTypeMap.put(Short.class, Short.TYPE);
+		boxedToPrimitiveTypeMap.put(Integer.class, Integer.TYPE);
+		boxedToPrimitiveTypeMap.put(Long.class, Long.TYPE);
+		boxedToPrimitiveTypeMap.put(Float.class, Float.TYPE);
+		boxedToPrimitiveTypeMap.put(Double.class, Double.TYPE);
+		boxedToPrimitiveTypeMap.put(Character.class, Character.TYPE);
+		boxedToPrimitiveTypeMap.put(Boolean.class, Boolean.TYPE);
+	}
+
+	public static boolean isObfuscated() {
+		return isObfuscated;
+	}
+
+	public static void setObfuscated(boolean isObfuscated) {
+		FCUtilsReflection.isObfuscated = isObfuscated;
+	}
+
+	/**
+	 * Convert boxed primitive type into the primitive type it represents
+	 * @param type
+	 * @return Primitive type if the type passed was a boxed primitive, null otherwise
+	 */
+	public static Class<?> getPrimitiveFromBoxedClass(Class<?> type) {
+		if (boxedToPrimitiveTypeMap.containsKey(type)) {
+			return boxedToPrimitiveTypeMap.get(type);
+		}
+
+		return null;
+	}
+	
+	public static Constructor findMatchingConstructor(Class<?> classForSearch, Class[] parameterTypes) {
+		Constructor[] constructors = classForSearch.getDeclaredConstructors();
+        Constructor constructorToUse = null;
+
+        for (Constructor c : constructors) {
+            boolean constructorMatches = true;
+
+            Class[] cParamTypes = c.getParameterTypes();
+
+            if (cParamTypes.length == parameterTypes.length) {
+                for (int j = 0; j < cParamTypes.length; j++) {
+                	if (!doesParameterTypeSatisfyConstructorType(parameterTypes[j], cParamTypes[j])) {
+                        constructorMatches = false;
+                        break;
+                    }
+                }
+            }
+            else {
+                constructorMatches = false;
+            }
+
+            if (constructorMatches) {
+                constructorToUse = c;
+                break;
+            }
+        }
+
+        return constructorToUse;
+	}
+
+	private static boolean doesParameterTypeSatisfyConstructorType(Class<?> parameterType, Class<?> constructorType) {
+		if (parameterType.isPrimitive()) {
+			int pSize = getPrimitiveSize(parameterType);
+			int cSize = getPrimitiveSize(constructorType);
+
+			if (constructorType == boolean.class) {
+				return parameterType.equals(boolean.class);
+			}
+
+			if (!isFloatingPoint(constructorType) && isFloatingPoint(parameterType)) {
+				return false;
+			}
+
+			return pSize <= cSize;
+		}
+		else {
+			return constructorType.isAssignableFrom(parameterType);
+		}
+	}
+
+	private static int getPrimitiveSize(Class<?> primitive) {
+		if (!primitive.isPrimitive()) {
+			throw new IllegalArgumentException("Class must be a primitive");
+		}
+
+		if (primitive == byte.class || primitive == char.class)
+			return 8;
+		if (primitive == short.class)
+			return 16;
+		if (primitive == int.class || primitive == float.class)
+			return 32;
+		return 64;
+	}
+
+	private static boolean isFloatingPoint(Class<?> primitive) {
+		return primitive == float.class || primitive == double.class;
+	}
+}
\ No newline at end of file
