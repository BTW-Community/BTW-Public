--- /dev/null
+++ b/minecraft_server/net/minecraft/src/FCUtilsHardcoreSpawn.java
@@ -0,0 +1,392 @@
+// FCMOD
+
+package net.minecraft.src;
+
+import java.util.ArrayList;
+
+import net.minecraft.server.MinecraftServer;
+
+public class FCUtilsHardcoreSpawn
+{
+	//Timer set to 9 minutes so if you die once night falls you respawn in a new location
+	public static final int m_iHardcoreSpawnTimeBetweenReassignments = 10800;
+
+	private static final double BASE_RADIUS = 2000D;
+	private static final double BASE_EXCLUSION_RADIUS = 1000D;
+	private static final double RAPID_RESPAWN_RADIUS = 100D;
+
+	private final static double ABANDONED_VILLAGE_RADIUS = 2250D;
+	private final static double PARTIALLY_ABADONED_VILLAGE_RADIUS = 3000D;
+
+	private final static double LOOTED_TEMPLE_RADIUS = 2250D;
+
+	private static final double LARGE_BIOMES_MULTIPLIER = 4D;
+	
+	private static final int SPAWN_ATTEMPT_COUNT = 20;
+
+	public static ArrayList<BiomeGenBase> blacklistedBiomes = new ArrayList();
+	
+	static {
+		blacklistedBiomes.add(BiomeGenBase.jungle);
+		blacklistedBiomes.add(BiomeGenBase.jungleHills);
+		blacklistedBiomes.add(BiomeGenBase.ocean);
+		blacklistedBiomes.add(BiomeGenBase.frozenOcean);
+	}
+
+	/** 
+	 * player respawn maximum radius from original spawn
+	 */
+	public static double GetPlayerSpawnRadius() {
+		return BASE_RADIUS * GetWorldTypeRadiusMultiplier() * GetGameProgressRadiusMultiplier();
+	}
+
+	/** 
+	 * player respawn minimum radius from original spawn
+	 */
+	public static double GetPlayerSpawnExclusionRadius() {
+		return BASE_EXCLUSION_RADIUS * GetWorldTypeRadiusMultiplier();
+	}
+
+	/** 
+	 * specifies the radius in which a player will respawn, if returning to the same spawn point after multiple deaths
+	 */	
+	public static double GetPlayerMultipleRespawnRadius() {
+		return RAPID_RESPAWN_RADIUS;
+	}
+
+	public static double GetAbandonedVillageRadius() {
+		return ABANDONED_VILLAGE_RADIUS * GetWorldTypeRadiusMultiplier();
+	}
+
+	public static double GetPartiallyAbandonedVillageRadius() {
+		return PARTIALLY_ABADONED_VILLAGE_RADIUS * GetWorldTypeRadiusMultiplier();
+	}
+
+	public static double GetLootedTempleRadius() {
+		return LOOTED_TEMPLE_RADIUS * GetWorldTypeRadiusMultiplier();
+	}
+
+	public static double GetWorldTypeRadiusMultiplier() {
+		World overWorld = MinecraftServer.getServer().worldServers[0];
+
+		if (overWorld != null && overWorld.worldInfo.getTerrainType() == WorldType.LARGE_BIOMES) {
+			return LARGE_BIOMES_MULTIPLIER;
+		}
+
+		return 1D;
+	}
+
+	public static double GetGameProgressRadiusMultiplier() {
+		if (FCUtilsWorld.GameProgressHasEndDimensionBeenAccessedServerOnly()) {
+			return 2.5D;
+		}
+		else if (FCUtilsWorld.GameProgressHasWitherBeenSummonedServerOnly()) {
+			return 2D;
+		}
+		else if (FCUtilsWorld.GameProgressHasNetherBeenAccessedServerOnly()) {
+			return 1.5D;
+		}
+
+		return 1D;
+	}
+
+	public static void HandleHardcoreSpawn(MinecraftServer server, EntityPlayerMP oldPlayer, EntityPlayerMP newPlayer) {
+		WorldServer newWorld = server.worldServerForDimension(newPlayer.dimension);
+
+		if (oldPlayer.playerConqueredTheEnd) {
+			ReturnPlayerToOriginalSpawn(newWorld, newPlayer);
+			return;
+		}
+
+		long overworldTime = FCUtilsWorld.GetOverworldTimeServerOnly();
+		long timeOfLastPlayerSpawnAssignment = oldPlayer.m_lTimeOfLastSpawnAssignment;
+		long deltaTimeSinceLastRespawnAssignment = overworldTime - timeOfLastPlayerSpawnAssignment; 
+
+		boolean softRespawn = false;
+
+		if (timeOfLastPlayerSpawnAssignment > 0 &&
+				deltaTimeSinceLastRespawnAssignment >= 0 &&
+				deltaTimeSinceLastRespawnAssignment < m_iHardcoreSpawnTimeBetweenReassignments)
+		{
+			// multiple respawns in a short period of time results in different behavior
+			softRespawn = true;
+
+			newPlayer.health = 10; // start the player hurt
+
+			int foodLevel = oldPlayer.foodStats.getFoodLevel();
+			foodLevel -= 6; // knock off a 1 pip food penalty
+			
+			// Limit food decrease so the player cannot spawn below peckish 
+			if (foodLevel < 24) {
+				foodLevel = 24;
+			}
+
+			newPlayer.foodStats.setFoodLevel(foodLevel);            
+		}
+
+		if (!FCUtilsWorld.GameProgressHasNetherBeenAccessedServerOnly() || FCBetterThanWolves.alwaysSpawnTogether) {
+			// early game, players are tied to respawning together
+			FCSpawnLocation recentLocation = newWorld.GetSpawnLocationList().GetMostRecentSpawnLocation();
+
+			if (recentLocation != null) {
+				long lDeltaTime = overworldTime - recentLocation.m_lSpawnTime;
+
+				if (lDeltaTime > 0 && lDeltaTime < FCUtilsHardcoreSpawn.m_iHardcoreSpawnTimeBetweenReassignments) {
+					if (AssignPlayerToOldSpawnPosWithVariance(newWorld, newPlayer, new ChunkCoordinates(
+								recentLocation.m_iIPos,
+								recentLocation.m_iJPos,
+								recentLocation.m_iKPos),
+							recentLocation.m_lSpawnTime))
+					{
+						return;
+					}
+				}
+			}
+		}
+
+		ChunkCoordinates oldSpawnPos = oldPlayer.m_HardcoreSpawnChunk;		
+
+		// if a day has passed since the last spawn assignment, assign a new one
+
+		if (oldSpawnPos == null || !softRespawn || !AssignPlayerToOldSpawnPosWithVariance(newWorld, newPlayer, oldSpawnPos, timeOfLastPlayerSpawnAssignment)) {
+			if (!AssignNewHardcoreSpawnLocation(newWorld, server, newPlayer)) {
+				ReturnPlayerToOriginalSpawn(newWorld, newPlayer);
+				return;
+			}
+		}
+
+		ChunkCoordinates newSpawnPos = newPlayer.m_HardcoreSpawnChunk;
+
+		if (newSpawnPos != null) {
+			newWorld.GetSpawnLocationList().AddPointIfNotAlreadyPresent(
+					newSpawnPos.posX,
+					newSpawnPos.posY,
+					newSpawnPos.posZ,
+					newPlayer.m_lTimeOfLastSpawnAssignment);
+		}
+	}
+
+	public static boolean AssignNewHardcoreSpawnLocation(World world, MinecraftServer server, EntityPlayerMP player) {
+		boolean locationFound = false;
+		boolean blacklistedLocationFound = false;
+
+		double spawnRadius = FCUtilsHardcoreSpawn.GetPlayerSpawnRadius();
+		double exclusionRadius = FCUtilsHardcoreSpawn.GetPlayerSpawnExclusionRadius();
+		double spawnDeltaRadius = spawnRadius - exclusionRadius;
+
+		double exclusionRadiusSq = exclusionRadius * exclusionRadius;
+		double deltaSquaredRadii = (spawnRadius * spawnRadius) - exclusionRadiusSq; 
+
+		for (int attempts = 0; attempts < SPAWN_ATTEMPT_COUNT; attempts++) {
+			// distance used formula: dist = sqrt(rnd()*(R2^2-R1^2)+R1^2) to obtain even distribution
+			// The shape involved here (2D doughnut) is called an 'Annulus' 
+			double spawnDistance = Math.sqrt(world.rand.nextDouble() * deltaSquaredRadii + exclusionRadiusSq);
+
+			double spawnYaw = world.rand.nextDouble() * Math.PI * 2D;
+
+			double xOffset = -Math.sin(spawnYaw) * spawnDistance; 
+			double zOffset = Math.cos(spawnYaw) * spawnDistance;
+
+			int newSpawnX = MathHelper.floor_double(xOffset) + world.worldInfo.getSpawnX();
+			int newSpawnZ = MathHelper.floor_double(zOffset) + world.worldInfo.getSpawnZ();
+
+			int newSpawnY = world.getTopSolidOrLiquidBlock(newSpawnX, newSpawnZ);
+			
+			BiomeGenBase respawnBiome = world.getBiomeGenForCoords(newSpawnX, newSpawnZ);
+			
+			if (blacklistedLocationFound) {
+				continue;
+			}
+			
+			boolean isBiomeBlacklisted = blacklistedBiomes.contains(respawnBiome);
+
+			if (newSpawnY >= world.provider.getAverageGroundLevel()) {
+				Material targetMaterial = world.getBlockMaterial(newSpawnX, newSpawnY, newSpawnZ);
+
+				if (targetMaterial == null || !targetMaterial.isLiquid()) {
+					player.setLocationAndAngles((double)newSpawnX + 0.5D, (double)newSpawnY + 1.5D, (double)newSpawnZ + 0.5D, world.rand.nextFloat() * 360F, 0.0F);
+
+					BumpPlayerPosUpwardsUntilValidSpawnReached(player);		        	
+
+					long overworldTime = FCUtilsWorld.GetOverworldTimeServerOnly();	        		
+
+					if (FCBetterThanWolves.IsSinglePlayerNonLan() || MinecraftServer.getServer().getCurrentPlayerCount() == 1) {
+						// set the time to the next morning if this is single player
+						overworldTime = ((overworldTime / 24000L) + 1) * 24000L;
+
+						for (int i = 0; i < MinecraftServer.getServer().worldServers.length; ++i) {
+							WorldServer tempServer = MinecraftServer.getServer().worldServers[i];
+
+							tempServer.setWorldTime(overworldTime);
+
+							if (tempServer.worldInfo.isThundering()) {
+								// remove any storms
+								tempServer.worldInfo.setThundering(false);
+
+								server.getConfigurationManager().sendPacketToAllPlayers(new Packet70GameEvent(8, 0));
+							}
+						}	        	        
+					}
+
+					player.m_lTimeOfLastSpawnAssignment = overworldTime;
+
+					ChunkCoordinates newSpawnPos = new ChunkCoordinates(
+							MathHelper.floor_double(player.posX),
+							MathHelper.floor_double(player.posY),
+							MathHelper.floor_double(player.posZ));
+
+					player.m_HardcoreSpawnChunk = newSpawnPos;
+
+					// Prefer biomes which are not blacklisted, but if no other biomes are found then spawn the player anyway
+					if (isBiomeBlacklisted) {
+						blacklistedLocationFound = true;
+					}
+					else {
+						locationFound = true;
+						break;
+					}
+				}
+			}
+		}
+
+		return locationFound || blacklistedLocationFound;
+	}
+
+	private static boolean AssignPlayerToOldSpawnPosWithVariance(World world, EntityPlayerMP player, ChunkCoordinates spawnPos, long timeOfLastPlayerSpawnAssignment) {
+		for (int i = 0; i < 20; i++) {
+			// square root is used on distance to get an even distriubtion of points at any circumference,
+			// with more points as you move further from the origin to compensate for increased circumference
+
+			double spawnDistance = Math.sqrt(world.rand.nextDouble()) * GetPlayerMultipleRespawnRadius();
+
+			double spawnYaw = world.rand.nextDouble() * Math.PI * 2D;
+
+			double xOffset = -Math.sin(spawnYaw) * spawnDistance; 
+			double zOffset = Math.cos(spawnYaw) * spawnDistance;
+
+			int newSpawnX = MathHelper.floor_double(xOffset) + spawnPos.posX;
+			int newSpawnZ = MathHelper.floor_double(zOffset) + spawnPos.posZ;
+
+			int newSpawnY = world.getTopSolidOrLiquidBlock(newSpawnX, newSpawnZ);
+
+			if (newSpawnY >= world.provider.getAverageGroundLevel()) {
+				Material targetMaterial = world.getBlockMaterial(newSpawnX, newSpawnY, newSpawnZ);
+
+				if (targetMaterial == null || !targetMaterial.isLiquid()) {	        	
+					player.setLocationAndAngles(newSpawnX + 0.5D, newSpawnY + 1.5D, newSpawnZ + 0.5D, world.rand.nextFloat() * 360F, 0.0F);
+
+					BumpPlayerPosUpwardsUntilValidSpawnReached(player);		        	
+
+					player.m_lTimeOfLastSpawnAssignment = timeOfLastPlayerSpawnAssignment;
+
+					player.m_HardcoreSpawnChunk = spawnPos;
+
+					return true;	        		
+				}
+			}
+		}
+
+		return AssignPlayerToOldSpawnPos(world, player, spawnPos, timeOfLastPlayerSpawnAssignment);
+	}
+
+	private static boolean AssignPlayerToOldSpawnPos(World world, EntityPlayerMP player, ChunkCoordinates spawnPos, long timeOfLastPlayerSpawnAssignment) {
+		int spawnX = MathHelper.floor_double(spawnPos.posX);
+		int spawnY = MathHelper.floor_double(spawnPos.posZ);
+		int spawnZ = world.getTopSolidOrLiquidBlock(spawnX, spawnY);
+
+		player.setLocationAndAngles(spawnX + 0.5F, spawnZ + 1.5F, spawnY + 0.5F, world.rand.nextFloat() * 360F, 0.0F);
+
+		Material targetMaterial = world.getBlockMaterial(spawnX, spawnZ + 1, spawnY);
+
+		if (OffsetPlayerPositionUntilValidSpawn(world, player)) {
+			BumpPlayerPosUpwardsUntilValidSpawnReached(player);
+
+			player.m_lTimeOfLastSpawnAssignment = timeOfLastPlayerSpawnAssignment;
+
+			ChunkCoordinates newSpawnPos = new ChunkCoordinates(
+					MathHelper.floor_double(player.posX),
+					MathHelper.floor_double(player.posY),
+					MathHelper.floor_double(player.posZ));
+
+			player.m_HardcoreSpawnChunk = newSpawnPos;
+
+			return true;
+		}
+
+		return false;
+	}
+
+	private static boolean OffsetPlayerPositionUntilValidSpawn(World world, EntityPlayerMP player) {
+		int spawnX = MathHelper.floor_double(player.posX);
+		int spawnZ = MathHelper.floor_double(player.posZ);        
+
+		for (int i = 0; i < 20; i++) {
+			int spawnY = world.getTopSolidOrLiquidBlock(spawnX, spawnZ);
+
+			Material targetMaterial = world.getBlockMaterial(spawnX, spawnY, spawnZ);
+
+			if (targetMaterial == null || !targetMaterial.isLiquid()) {
+				player.setLocationAndAngles((double)spawnX + 0.5D, player.posY, (double)spawnZ + 0.5D, player.rotationYaw, player.rotationPitch);
+
+				return true;
+			}
+
+			spawnX += world.rand.nextInt(11) - 5;
+			spawnZ += world.rand.nextInt(11) - 5;
+		}
+
+		return false;
+	}
+
+	private static void ReturnPlayerToOriginalSpawn(World world, EntityPlayerMP player) {
+		ChunkCoordinates spawnPos = world.getSpawnPoint();
+
+		int spawnX = spawnPos.posX;
+		int spawnY = spawnPos.posY;
+		int spawnZ = spawnPos.posZ;
+
+		if (!world.provider.hasNoSky && world.getWorldInfo().getGameType() != EnumGameType.ADVENTURE) {
+			spawnX += world.rand.nextInt(20) - 10;
+			spawnY = world.getTopSolidOrLiquidBlock(spawnX, spawnZ);
+			spawnZ += world.rand.nextInt(20) - 10;
+		}
+
+		player.setLocationAndAngles((double)spawnX + 0.5D, (double)spawnY + 1.5D, (double)spawnZ + 0.5D, 0.0F, 0.0F);
+
+		BumpPlayerPosUpwardsUntilValidSpawnReached(player);
+
+		player.m_lTimeOfLastSpawnAssignment = 0;
+
+		player.m_HardcoreSpawnChunk = null;        
+	}
+
+	private static void BumpPlayerPosUpwardsUntilValidSpawnReached(EntityPlayerMP player) {
+		do {
+			if (player.posY <= 0.0D) {
+				break;
+			}
+
+			player.setLocationAndAngles(player.posX, player.posY, player.posZ, player.rotationYaw, player.rotationPitch);
+
+			if (player.worldObj.getCollidingBoundingBoxes(player, player.boundingBox).isEmpty()) {
+				break;
+			}
+
+			player.posY++;
+		}
+		while (true);
+	}
+
+	public static boolean IsInLootedTempleRadius(World world, int x, int z) {
+		int spawnX = world.getWorldInfo().getSpawnX();
+		int spawnZ = world.getWorldInfo().getSpawnZ();
+
+		double deltaX = (double)(spawnX - x);
+		double deltaZ = (double)(spawnZ - z);
+
+		double distSqFromSpawn = deltaX * deltaX + deltaZ * deltaZ;    	
+		double lootedRadius = GetLootedTempleRadius();    	
+
+		return distSqFromSpawn < lootedRadius * lootedRadius;
+	}
+}
\ No newline at end of file
