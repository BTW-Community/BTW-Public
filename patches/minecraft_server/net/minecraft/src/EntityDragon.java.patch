--- a/minecraft_server/net/minecraft/src/EntityDragon.java
+++ b/minecraft_server/net/minecraft/src/EntityDragon.java
@@ -57,7 +57,15 @@
     public EntityDragon(World par1World)
     {
         super(par1World);
-        this.dragonPartArray = new EntityDragonPart[] {this.dragonPartHead = new EntityDragonPart(this, "head", 6.0F, 6.0F), this.dragonPartBody = new EntityDragonPart(this, "body", 8.0F, 8.0F), this.dragonPartTail1 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartTail2 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartTail3 = new EntityDragonPart(this, "tail", 4.0F, 4.0F), this.dragonPartWing1 = new EntityDragonPart(this, "wing", 4.0F, 4.0F), this.dragonPartWing2 = new EntityDragonPart(this, "wing", 4.0F, 4.0F)};
+        this.dragonPartArray = new EntityDragonPart[] {
+        		this.dragonPartHead = (EntityDragonPart) EntityList.createEntityOfType(EntityDragonPart.class, this, "head", 6.0F, 6.0F), 
+        		this.dragonPartBody = (EntityDragonPart) EntityList.createEntityOfType(EntityDragonPart.class, this, "body", 8.0F, 8.0F), 
+        		this.dragonPartTail1 = (EntityDragonPart) EntityList.createEntityOfType(EntityDragonPart.class, this, "tail", 4.0F, 4.0F), 
+        		this.dragonPartTail2 = (EntityDragonPart) EntityList.createEntityOfType(EntityDragonPart.class, this, "tail", 4.0F, 4.0F), 
+        		this.dragonPartTail3 = (EntityDragonPart) EntityList.createEntityOfType(EntityDragonPart.class, this, "tail", 4.0F, 4.0F), 
+        		this.dragonPartWing1 = (EntityDragonPart) EntityList.createEntityOfType(EntityDragonPart.class, this, "wing", 4.0F, 4.0F), 
+        		this.dragonPartWing2 = (EntityDragonPart) EntityList.createEntityOfType(EntityDragonPart.class, this, "wing", 4.0F, 4.0F)
+        	};
         this.setEntityHealth(this.getMaxHealth());
         this.texture = "/mob/enderdragon/ender.png";
         this.setSize(16.0F, 8.0F);
@@ -174,7 +182,7 @@
             double var6;
             double var8;
             double var26;
-            float var31;
+            float var33;
 
             if (this.worldObj.isRemote)
             {
@@ -226,16 +234,16 @@
                 }
 
                 var4 /= (double)MathHelper.sqrt_double(var26 * var26 + var6 * var6);
-                var31 = 0.6F;
+                var33 = 0.6F;
 
-                if (var4 < (double)(-var31))
+                if (var4 < (double)(-var33))
                 {
-                    var4 = (double)(-var31);
+                    var4 = (double)(-var33);
                 }
 
-                if (var4 > (double)var31)
+                if (var4 > (double)var33)
                 {
-                    var4 = (double)var31;
+                    var4 = (double)var33;
                 }
 
                 this.motionY += var4 * 0.10000000149011612D;
@@ -254,8 +262,8 @@
                 }
 
                 Vec3 var15 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.targetX - this.posX, this.targetY - this.posY, this.targetZ - this.posZ).normalize();
-                Vec3 var39 = this.worldObj.getWorldVec3Pool().getVecFromPool((double)MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F), this.motionY, (double)(-MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F))).normalize();
-                float var17 = (float)(var39.dotProduct(var15) + 0.5D) / 1.5F;
+                Vec3 var40 = this.worldObj.getWorldVec3Pool().getVecFromPool((double)MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F), this.motionY, (double)(-MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F))).normalize();
+                float var17 = (float)(var40.dotProduct(var15) + 0.5D) / 1.5F;
 
                 if (var17 < 0.0F)
                 {
@@ -287,7 +295,7 @@
                 }
 
                 Vec3 var23 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.motionX, this.motionY, this.motionZ).normalize();
-                float var24 = (float)(var23.dotProduct(var39) + 1.0D) / 2.0F;
+                float var24 = (float)(var23.dotProduct(var40) + 1.0D) / 2.0F;
                 var24 = 0.8F + 0.15F * var24;
                 this.motionX *= (double)var24;
                 this.motionZ *= (double)var24;
@@ -307,16 +315,16 @@
             this.dragonPartWing2.width = 4.0F;
             var2 = (float)(this.getMovementOffsets(5, 1.0F)[1] - this.getMovementOffsets(10, 1.0F)[1]) * 10.0F / 180.0F * (float)Math.PI;
             var3 = MathHelper.cos(var2);
-            float var27 = -MathHelper.sin(var2);
+            float var28 = -MathHelper.sin(var2);
             float var5 = this.rotationYaw * (float)Math.PI / 180.0F;
-            float var28 = MathHelper.sin(var5);
+            float var27 = MathHelper.sin(var5);
             float var7 = MathHelper.cos(var5);
             this.dragonPartBody.onUpdate();
-            this.dragonPartBody.setLocationAndAngles(this.posX + (double)(var28 * 0.5F), this.posY, this.posZ - (double)(var7 * 0.5F), 0.0F, 0.0F);
+            this.dragonPartBody.setLocationAndAngles(this.posX + (double)(var27 * 0.5F), this.posY, this.posZ - (double)(var7 * 0.5F), 0.0F, 0.0F);
             this.dragonPartWing1.onUpdate();
-            this.dragonPartWing1.setLocationAndAngles(this.posX + (double)(var7 * 4.5F), this.posY + 2.0D, this.posZ + (double)(var28 * 4.5F), 0.0F, 0.0F);
+            this.dragonPartWing1.setLocationAndAngles(this.posX + (double)(var7 * 4.5F), this.posY + 2.0D, this.posZ + (double)(var27 * 4.5F), 0.0F, 0.0F);
             this.dragonPartWing2.onUpdate();
-            this.dragonPartWing2.setLocationAndAngles(this.posX - (double)(var7 * 4.5F), this.posY + 2.0D, this.posZ - (double)(var28 * 4.5F), 0.0F, 0.0F);
+            this.dragonPartWing2.setLocationAndAngles(this.posX - (double)(var7 * 4.5F), this.posY + 2.0D, this.posZ - (double)(var27 * 4.5F), 0.0F, 0.0F);
 
             if (!this.worldObj.isRemote && this.hurtTime == 0)
             {
@@ -327,38 +335,38 @@
 
             double[] var29 = this.getMovementOffsets(5, 1.0F);
             double[] var9 = this.getMovementOffsets(0, 1.0F);
-            var31 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
-            float var33 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
+            var33 = MathHelper.sin(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
+            float var32 = MathHelper.cos(this.rotationYaw * (float)Math.PI / 180.0F - this.randomYawVelocity * 0.01F);
             this.dragonPartHead.onUpdate();
-            this.dragonPartHead.setLocationAndAngles(this.posX + (double)(var31 * 5.5F * var3), this.posY + (var9[1] - var29[1]) * 1.0D + (double)(var27 * 5.5F), this.posZ - (double)(var33 * 5.5F * var3), 0.0F, 0.0F);
+            this.dragonPartHead.setLocationAndAngles(this.posX + (double)(var33 * 5.5F * var3), this.posY + (var9[1] - var29[1]) * 1.0D + (double)(var28 * 5.5F), this.posZ - (double)(var32 * 5.5F * var3), 0.0F, 0.0F);
 
             for (int var30 = 0; var30 < 3; ++var30)
             {
-                EntityDragonPart var32 = null;
+                EntityDragonPart var31 = null;
 
                 if (var30 == 0)
                 {
-                    var32 = this.dragonPartTail1;
+                    var31 = this.dragonPartTail1;
                 }
 
                 if (var30 == 1)
                 {
-                    var32 = this.dragonPartTail2;
+                    var31 = this.dragonPartTail2;
                 }
 
                 if (var30 == 2)
                 {
-                    var32 = this.dragonPartTail3;
+                    var31 = this.dragonPartTail3;
                 }
 
-                double[] var34 = this.getMovementOffsets(12 + var30 * 2, 1.0F);
-                float var35 = this.rotationYaw * (float)Math.PI / 180.0F + this.simplifyAngle(var34[0] - var29[0]) * (float)Math.PI / 180.0F * 1.0F;
-                float var37 = MathHelper.sin(var35);
-                float var36 = MathHelper.cos(var35);
-                float var38 = 1.5F;
-                float var40 = (float)(var30 + 1) * 2.0F;
-                var32.onUpdate();
-                var32.setLocationAndAngles(this.posX - (double)((var28 * var38 + var37 * var40) * var3), this.posY + (var34[1] - var29[1]) * 1.0D - (double)((var40 + var38) * var27) + 1.5D, this.posZ + (double)((var7 * var38 + var36 * var40) * var3), 0.0F, 0.0F);
+                double[] var35 = this.getMovementOffsets(12 + var30 * 2, 1.0F);
+                float var34 = this.rotationYaw * (float)Math.PI / 180.0F + this.simplifyAngle(var35[0] - var29[0]) * (float)Math.PI / 180.0F * 1.0F;
+                float var38 = MathHelper.sin(var34);
+                float var37 = MathHelper.cos(var34);
+                float var36 = 1.5F;
+                float var39 = (float)(var30 + 1) * 2.0F;
+                var31.onUpdate();
+                var31.setLocationAndAngles(this.posX - (double)((var27 * var36 + var38 * var39) * var3), this.posY + (var35[1] - var29[1]) * 1.0D - (double)((var39 + var36) * var28) + 1.5D, this.posZ + (double)((var7 * var36 + var37 * var39) * var3), 0.0F, 0.0F);
             }
 
             if (!this.worldObj.isRemote)
@@ -460,11 +468,31 @@
     {
         this.forceNewTarget = false;
 
+        // FCMOD: Code added
+        boolean bTargetSelected = false;
+        // END FCMOD
+
         if (this.rand.nextInt(2) == 0 && !this.worldObj.playerEntities.isEmpty())
         {
             this.target = (Entity)this.worldObj.playerEntities.get(this.rand.nextInt(this.worldObj.playerEntities.size()));
+            
+            // FCMOD: Code added
+            long lTargetChangedDimensionTime = ((EntityPlayer)target).m_lTimeOfLastDimensionSwitch;
+            long lWorldTime = worldObj.getWorldTime();
+            
+            if ( lWorldTime < lTargetChangedDimensionTime || lWorldTime - lTargetChangedDimensionTime > m_iPlayerSwitchDimensionsGracePeriod )
+            {
+            	bTargetSelected = true;
         }
+            // END FCMOD
+        }
+        
+        // FCMOD: Code change
+        /*
         else
+        */
+        if ( !bTargetSelected )
+    	// END FCMOD
         {
             boolean var1 = false;
 
@@ -741,4 +769,8 @@
     {
         return 5.0F;
     }
+    
+    // FCMOD: Code added
+    private static final long m_iPlayerSwitchDimensionsGracePeriod = 600; // 30 seconds 
+    // END FCMOD
 }
