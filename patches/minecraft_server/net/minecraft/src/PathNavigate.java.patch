--- a/minecraft_server/net/minecraft/src/PathNavigate.java
+++ b/minecraft_server/net/minecraft/src/PathNavigate.java
@@ -226,6 +226,8 @@
             }
         }
 
+        // FCMOD: Changed to use rectangular bounds to reduce spazziness.
+        /*
         float var8 = this.theEntity.width * this.theEntity.width;
         int var4;
 
@@ -236,7 +238,25 @@
                 this.currentPath.setCurrentPathIndex(var4 + 1);
             }
         }
+        */
+        // slightly less than a half block width to ensure the creature is actually within the
+        // destination block, which is important for stuff like eating grass
 
+        for ( int iTempIndex = currentPath.getCurrentPathIndex(); iTempIndex < var2; iTempIndex++ )
+        {
+        	Vec3 currentDest = currentPath.getVectorFromIndex( theEntity, iTempIndex );
+        	
+            if ( Math.abs( var1.xCoord - currentDest.xCoord ) < 0.49D && 
+            	Math.abs( var1.zCoord - currentDest.zCoord ) < 0.49D &&
+            	Math.abs( var1.yCoord - currentDest.yCoord ) < 0.49D )
+            {
+                currentPath.setCurrentPathIndex( iTempIndex + 1 );
+            }
+        }
+        
+        int var4;
+        // END FCMOD
+
         var4 = MathHelper.ceiling_float_int(this.theEntity.width);
         int var5 = (int)this.theEntity.height + 1;
         int var6 = var4;
@@ -516,4 +536,43 @@
 
         return true;
     }
+    
+    // FCMOD: Added New
+    public boolean tryMoveToXYZ( int i, int j, int k, float fSpeed )
+    {
+    	// int based version of vanilla double based function, to avoid unnecessary type casts
+    	
+        PathEntity path = getPathToXYZ( i, j, k );
+        
+        return setPath( path, fSpeed );
 }
+    
+    public PathEntity getPathToXYZ( int i, int j, int k )
+    {
+    	// int based version of vanilla double based function, to avoid unnecessary type casts
+    	
+    	if ( canNavigate() )
+    	{
+    		return worldObj.getEntityPathToXYZ( theEntity, i, j, k,  
+    			pathSearchRange, canPassOpenWoodenDoors, canPassClosedWoodenDoors, 
+    			avoidsWater, canSwim);
+    	}
+    	
+    	return null;
+    }
+    
+    public PathEntity GetPathToEntity( Entity toEntity )
+    {
+        return !canNavigate() ? null : worldObj.getPathEntityToEntity( theEntity, 
+        	toEntity, pathSearchRange, canPassOpenWoodenDoors, canPassClosedWoodenDoors, 
+        	avoidsWater, canSwim);
+    }
+
+    public boolean TryMoveToEntity( Entity toEntity, float fMoveSpeed )
+    {
+        PathEntity newPath = GetPathToEntity( toEntity );
+        
+        return newPath != null ? setPath( newPath, fMoveSpeed ) : false;
+    }
+    // END FCMOD
+}
