--- a/minecraft_server/net/minecraft/src/StringTranslate.java
+++ b/minecraft_server/net/minecraft/src/StringTranslate.java
@@ -9,6 +9,7 @@
 import java.util.IllegalFormatException;
 import java.util.Properties;
 import java.util.TreeMap;
+import java.util.zip.ZipEntry;
 
 public class StringTranslate
 {
@@ -154,6 +155,10 @@
 
             this.currentLanguage = par1Str;
             this.translateTable = var3;
+
+            // FCMOD: Code added
+            FCAddOnHandler.OnLanguageLoaded( this );
+            // END FCMOD
         }
     }
 
@@ -197,4 +202,49 @@
     {
         return this.translateTable.getProperty(par1Str + ".name", "");
     }
+
+    // FCMOD
+    public Properties GetTranslateTable()
+    {
+    	return translateTable;
 }
+    
+    public void LoadAddonLanguageExtension( String sAddonPrefix )
+    {
+    	SafeLoadLanguage( sAddonPrefix + "_" + "en_US" );
+    	
+        SafeLoadLanguage( sAddonPrefix + "_" + currentLanguage );
+    }
+    
+    private void SafeLoadLanguage( String sLanguageName )
+    {
+        if ( StringTranslate.class.getResource( "/lang/" + sLanguageName + ".lang" ) != null )
+        {
+	        try
+	        {
+	            loadLanguage( translateTable, sLanguageName );
+	        }
+	        catch ( IOException exception )
+	        {
+	            ;
+	        }
+        }
+    }
+    
+    public void DebugOutputCurrentLanguage()
+    {
+        Enumeration var4 = translateTable.propertyNames();
+
+        while ( var4.hasMoreElements() )
+        {
+            Object var5 = var4.nextElement();
+            Object var6 = translateTable.get(var5);
+
+            if (var6 != null)
+            {
+                System.out.println( var5.toString() + "=" + var6.toString() );
+            }
+        }
+    }
+    // END FCMOD
+}
