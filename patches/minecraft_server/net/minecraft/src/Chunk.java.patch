--- a/minecraft_server/net/minecraft/src/Chunk.java
+++ b/minecraft_server/net/minecraft/src/Chunk.java
@@ -204,7 +204,12 @@
             while (var3 < 16)
             {
                 this.precipitationHeightMap[var2 + (var3 << 4)] = -999;
+                // FCMOD: Changed to match 1.8
+                /*
                 int var4 = var1 + 16 - 1;
+                */
+                int var4 = var1 + 16;
+                // END FCMOD
 
                 while (true)
                 {
@@ -562,11 +567,24 @@
                 {
                     Block.blocksList[var8].breakBlock(this.worldObj, var12, par2, var13, var8, var9);
                 }
+                // FCMOD: Code change
+                /*
                 else if (Block.blocksList[var8] instanceof ITileEntityProvider && var8 != par4)
                 {
                     this.worldObj.removeBlockTileEntity(var12, par2, var13);
                 }
+                */
+                else if ( var8 != par4 )
+                {
+                    Block.blocksList[var8].ClientBreakBlock(this.worldObj, var12, par2, var13, var8, var9);
+                    
+                    if ( Block.blocksList[var8] instanceof ITileEntityProvider && Block.blocksList[var8].ShouldDeleteTileEntityOnBlockChange( par4 ) )
+                    {
+                    	this.worldObj.removeBlockTileEntity(var12, par2, var13);
             }
+                }
+                // END FCMOD
+            }
 
             if (var10.getExtBlockID(par1, par2 & 15, par3) != par4)
             {
@@ -605,6 +623,12 @@
                     {
                         Block.blocksList[par4].onBlockAdded(this.worldObj, var12, par2, var13);
                     }
+                    // FCMOD: Code added
+                    else if ( var8 != par4 )
+                    {
+                        Block.blocksList[par4].ClientBlockAdded(worldObj, var12, par2, var13);
+                    }
+                    // END FCMOD
 
                     if (Block.blocksList[par4] instanceof ITileEntityProvider)
                     {
@@ -1255,32 +1279,40 @@
 
                 if (this.storageArrays[var2] == null && (var7 == 0 || var7 == 15 || var3 == 0 || var3 == 15 || var4 == 0 || var4 == 15) || this.storageArrays[var2] != null && this.storageArrays[var2].getExtBlockID(var3, var7, var4) == 0)
                 {
-                    if (Block.lightValue[this.worldObj.getBlockId(var5, var8 - 1, var6)] > 0)
+                	int blockID;
+
+                	blockID = this.worldObj.getBlockId(var5, var8 - 1, var6);
+                    if (blockID != 0 && Block.blocksList[blockID].getLightValue(this.worldObj, var5, var8 - 1, var6) > 0)
                     {
                         this.worldObj.updateAllLightTypes(var5, var8 - 1, var6);
                     }
 
-                    if (Block.lightValue[this.worldObj.getBlockId(var5, var8 + 1, var6)] > 0)
+                	blockID = this.worldObj.getBlockId(var5, var8 - 1, var6);
+                    if (blockID != 0 && Block.blocksList[blockID].getLightValue(this.worldObj, var5, var8 + 1, var6) > 0)
                     {
                         this.worldObj.updateAllLightTypes(var5, var8 + 1, var6);
                     }
 
-                    if (Block.lightValue[this.worldObj.getBlockId(var5 - 1, var8, var6)] > 0)
+                	blockID = this.worldObj.getBlockId(var5 - 1, var8, var6);
+                    if (blockID != 0 && Block.blocksList[blockID].getLightValue(this.worldObj, var5 - 1, var8, var6) > 0)
                     {
                         this.worldObj.updateAllLightTypes(var5 - 1, var8, var6);
                     }
 
-                    if (Block.lightValue[this.worldObj.getBlockId(var5 + 1, var8, var6)] > 0)
+                	blockID = this.worldObj.getBlockId(var5 + 1, var8, var6);
+                    if (blockID != 0 && Block.blocksList[blockID].getLightValue(this.worldObj, var5 + 1, var8, var6) > 0)
                     {
                         this.worldObj.updateAllLightTypes(var5 + 1, var8, var6);
                     }
 
-                    if (Block.lightValue[this.worldObj.getBlockId(var5, var8, var6 - 1)] > 0)
+                	blockID = this.worldObj.getBlockId(var5, var8, var6 - 1);
+                    if (blockID != 0 && Block.blocksList[blockID].getLightValue(this.worldObj, var5, var8, var6 - 1) > 0)
                     {
                         this.worldObj.updateAllLightTypes(var5, var8, var6 - 1);
                     }
 
-                    if (Block.lightValue[this.worldObj.getBlockId(var5, var8, var6 + 1)] > 0)
+                	blockID = this.worldObj.getBlockId(var5, var8, var6 + 1);
+                    if (blockID != 0 && Block.blocksList[blockID].getLightValue(this.worldObj, var5, var8, var6 + 1) > 0)
                     {
                         this.worldObj.updateAllLightTypes(var5, var8, var6 + 1);
                     }
@@ -1290,4 +1322,70 @@
             }
         }
     }
+    
+    // FCMOD: Code added
+    public void GetClosestEntityMatchingCriteriaWithinRangeSq( FCClosestEntityInfo closestEntityInfo )
+    {
+    	for ( int iVerticalIndex = closestEntityInfo.m_iChunkEntityListMinVerticalIndex; iVerticalIndex <= closestEntityInfo.m_iChunkEntityListMaxVerticalIndex; iVerticalIndex++ )
+    	{
+            List tempEntityList = entityLists[iVerticalIndex];
+            
+            if ( !tempEntityList.isEmpty() )
+            {            
+            	Iterator entityIterator = tempEntityList.iterator();
+            	
+            	while ( entityIterator.hasNext() )
+            	{
+		        	Entity tempEntity = (Entity)entityIterator.next();
+		        	
+		        	closestEntityInfo.m_criteria.ProcessEntity( closestEntityInfo, tempEntity );
 }
+            }
+    	}
+    }
+    
+    public int GetBlockNaturalLightValue( int i, int j, int k, int iSkylightSubtracted )
+    {
+    	// modified version of getBlockLightValue that only considers natural light
+    	
+        ExtendedBlockStorage blockStorage = this.storageArrays[j >> 4];
+
+        if ( blockStorage == null )
+        {
+            return !this.worldObj.provider.hasNoSky && iSkylightSubtracted < EnumSkyBlock.Sky.defaultLightValue ? EnumSkyBlock.Sky.defaultLightValue - iSkylightSubtracted : 0;
+        }
+        else
+        {
+            int iLightValue = this.worldObj.provider.hasNoSky ? 0 : blockStorage.getExtSkylightValue(i, j & 15, k);
+
+            if (iLightValue > 0)
+            {
+                isLit = true;
+            }
+
+            iLightValue -= iSkylightSubtracted;
+            
+            if ( iLightValue < 0 )
+            {
+            	iLightValue = 0;
+            }
+
+            return iLightValue;
+        }
+    }
+    
+    /**
+     * Gets the amount of light on a block ignoring sunlight
+     */
+    public int getBlockLightValueNoSky(int x, int y, int z) {
+        ExtendedBlockStorage blockStorage = this.storageArrays[y >> 4];
+
+        if (blockStorage == null) {
+            return 0;
+        }
+        else {
+            return blockStorage.getExtBlocklightValue(x, y & 15, z);
+        }
+    }
+    // END FCMOD
+}
