--- a/minecraft_server/net/minecraft/src/BlockRedstoneTorch.java
+++ b/minecraft_server/net/minecraft/src/BlockRedstoneTorch.java
@@ -6,7 +6,12 @@
 import java.util.Map;
 import java.util.Random;
 
+// FCMOD: Change
+/*
 public class BlockRedstoneTorch extends BlockTorch
+*/
+public class BlockRedstoneTorch extends FCBlockTorchBase
+// END FCMOD
 {
     /** Whether the redstone torch is currently active or not. */
     private boolean torchActive = false;
@@ -122,7 +127,13 @@
     /**
      * Returns true or false based on whether the block the torch is attached to is providing indirect power.
      */
+    // FCMOD: Renamed function to prevent problems for add-on mods
+	/*
     private boolean isIndirectlyPowered(World par1World, int par2, int par3, int par4)
+	*/
+    private boolean isIndirectlyPoweredLocal(World par1World, int par2, int par3, int par4)
+    // END FCMOD
+
     {
         int var5 = par1World.getBlockMetadata(par2, par3, par4);
         return var5 == 5 && par1World.getIndirectPowerOutput(par2, par3 - 1, par4, 0) ? true : (var5 == 3 && par1World.getIndirectPowerOutput(par2, par3, par4 - 1, 2) ? true : (var5 == 4 && par1World.getIndirectPowerOutput(par2, par3, par4 + 1, 3) ? true : (var5 == 1 && par1World.getIndirectPowerOutput(par2 - 1, par3, par4, 4) ? true : var5 == 2 && par1World.getIndirectPowerOutput(par2 + 1, par3, par4, 5))));
@@ -133,7 +144,12 @@
      */
     public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random)
     {
+		// FCMOD: Renamed function as per above
+		/*
         boolean var6 = this.isIndirectlyPowered(par1World, par2, par3, par4);
+		*/
+        boolean var6 = this.isIndirectlyPoweredLocal(par1World, par2, par3, par4);
+		// END FCMOD
         List var7 = (List)redstoneUpdateInfoCache.get(par1World);
 
         while (var7 != null && !var7.isEmpty() && par1World.getTotalWorldTime() - ((RedstoneUpdateInfo)var7.get(0)).updateTime > 60L)
@@ -171,6 +187,8 @@
      * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
      * their own) Args: x, y, z, neighbor blockID
      */
+    // FCMOD: Removed and replaced
+    /*
     public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5)
     {
         if (!this.func_94397_d(par1World, par2, par3, par4, par5))
@@ -183,6 +201,8 @@
             }
         }
     }
+    */
+    // END FCMOD
 
     /**
      * Returns true if the block is emitting direct/strong redstone power on the specified side. Args: World, X, Y, Z,
@@ -217,4 +237,27 @@
     {
         return par1 == Block.torchRedstoneIdle.blockID || par1 == Block.torchRedstoneActive.blockID;
     }
+    
+    // FCMOD: Added new
+	@Override
+    public void onNeighborBlockChange( World world, int i, int j, int k, int iNeighborBlockID )
+    {
+    	if ( !ValidateState( world, i, j, k, iNeighborBlockID ) )    	
+        {
+            boolean bPowered = isIndirectlyPoweredLocal( world, i, j, k );
+
+            if ( torchActive == bPowered &&
+            	!world.IsUpdatePendingThisTickForBlock( i, j, k, blockID ) )            	
+            {
+                world.scheduleBlockUpdate( i, j, k, blockID, tickRate( world ) );
 }
+        }
+    }
+    
+	@Override
+	public boolean TriggersBuddy()
+	{
+		return false;
+	}
+	// END FCMOD
+}
