--- a/minecraft_server/net/minecraft/src/TileEntityFurnace.java
+++ b/minecraft_server/net/minecraft/src/TileEntityFurnace.java
@@ -9,7 +9,10 @@
     /**
      * The ItemStacks that hold the items currently being used in the furnace
      */
-    private ItemStack[] furnaceItemStacks = new ItemStack[3];
+    // FCMOD: Changed
+    //private ItemStack[] furnaceItemStacks = new ItemStack[3];
+    protected ItemStack[] furnaceItemStacks = new ItemStack[3];
+    // END FCMOD
 
     /** The number of ticks that the furnace will keep burning */
     public int furnaceBurnTime = 0;
@@ -154,7 +157,20 @@
         {
             this.field_94130_e = par1NBTTagCompound.getString("CustomName");
         }
+        
+        // FCMOD: Code added to track extended burn times
+        if ( par1NBTTagCompound.hasKey( "fcBurnTimeEx" ) )
+        {
+	        furnaceBurnTime = par1NBTTagCompound.getInteger( "fcBurnTimeEx" );
+	        furnaceCookTime = par1NBTTagCompound.getInteger( "fcCookTimeEx" );
+	        
+	        if ( par1NBTTagCompound.hasKey( "fcItemBurnTimeEx" ) )
+	        {
+	            currentItemBurnTime = par1NBTTagCompound.getInteger( "fcItemBurnTimeEx" );
     }
+        }
+        // END FCMOD
+    }
 
     /**
      * Writes a tile entity to NBT.
@@ -183,6 +199,12 @@
         {
             par1NBTTagCompound.setString("CustomName", this.field_94130_e);
         }
+        
+        // FCMOD: Code added to track extended burn times
+        par1NBTTagCompound.setInteger( "fcBurnTimeEx", furnaceBurnTime );
+        par1NBTTagCompound.setInteger( "fcCookTimeEx", furnaceCookTime );
+        par1NBTTagCompound.setInteger( "fcItemBurnTimeEx", currentItemBurnTime );
+        // END FCMOD
     }
 
     /**
@@ -218,7 +240,12 @@
 
         if (!this.worldObj.isRemote)
         {
+        	// FCMOD: Code change to consume fuel regardless of whether you can smelt
+        	/*
             if (this.furnaceBurnTime == 0 && this.canSmelt())
+            */
+            if (this.furnaceBurnTime == 0)
+        	// END FCMOD
             {
                 this.currentItemBurnTime = this.furnaceBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
 
@@ -243,7 +270,12 @@
             {
                 ++this.furnaceCookTime;
 
+            	// FCMOD: Change to double burn times
+                /*
                 if (this.furnaceCookTime == 200)
+                */
+                if (this.furnaceCookTime >= GetCookTimeForCurrentItem())
+            	// END FCMOD
                 {
                     this.furnaceCookTime = 0;
                     this.smeltItem();
@@ -255,12 +287,35 @@
                 this.furnaceCookTime = 0;
             }
 
+            // FCMOD: Added
+            boolean bHasVisibleContents = furnaceItemStacks[0] != null || furnaceItemStacks[2] != null;
+            
+            FCBlockFurnace furnaceBlock = (FCBlockFurnace)Block.blocksList[worldObj.getBlockId( xCoord, yCoord, zCoord )];            
+            // END FCMOD
+            
             if (var1 != this.furnaceBurnTime > 0)
             {
                 var2 = true;
+                
+                // FCMOD: Changed
+                /*
                 BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
+                */
+                furnaceBlock.updateFurnaceBlockState( furnaceBurnTime > 0, worldObj, xCoord, yCoord, zCoord, bHasVisibleContents );
+                // END FCMOD
             }
+            // FCMOD: Added
+            else
+            {
+            	boolean bPreviousContentsState = ( worldObj.getBlockMetadata( xCoord, yCoord, zCoord ) & 8 ) != 0;
+            	
+            	if ( bPreviousContentsState != bHasVisibleContents )
+            	{
+            		furnaceBlock.updateFurnaceBlockState( furnaceBurnTime > 0, worldObj, xCoord, yCoord, zCoord, bHasVisibleContents );
         }
+            }
+            // END FCMOD            
+        }
 
         if (var2)
         {
@@ -271,7 +326,10 @@
     /**
      * Returns true if the furnace can smelt an item, i.e. has a source item, destination stack isn't full, etc.
      */
-    private boolean canSmelt()
+    // FCMOD: Changed    
+    //private boolean canSmelt()
+    protected boolean canSmelt()
+    // END FCMOD
     {
         if (this.furnaceItemStacks[0] == null)
         {
@@ -280,10 +338,39 @@
         else
         {
             ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().itemID);
+            // FCMOD: Change to take into account variable output stack sizes
+            /*
             return var1 == null ? false : (this.furnaceItemStacks[2] == null ? true : (!this.furnaceItemStacks[2].isItemEqual(var1) ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < var1.getMaxStackSize())));
+            */
+            if ( var1 == null )
+            {
+            	return false;
         }
+            else if ( this.furnaceItemStacks[2] == null )
+            {
+            	return true;
     }
+            else if ( !this.furnaceItemStacks[2].isItemEqual(var1) )
+            {
+            	return false;
+            }
+            else 
+            {
+            	int iOutputStackSizeIfCooked = furnaceItemStacks[2].stackSize + var1.stackSize;
 
+            	if ( iOutputStackSizeIfCooked <= getInventoryStackLimit() && iOutputStackSizeIfCooked <= furnaceItemStacks[2].getMaxStackSize()  )
+            	{
+            		return true;
+            	}
+                else
+                {            	
+                	return iOutputStackSizeIfCooked <= var1.getMaxStackSize();
+                }
+            }            
+            // END FCMOD
+        }
+    }
+
     /**
      * Turn one item from the furnace source stack into the appropriate smelted item in the furnace result stack
      */
@@ -299,7 +386,12 @@
             }
             else if (this.furnaceItemStacks[2].itemID == var1.itemID)
             {
+            	// FCMOD: Code change so that output can be greater than 1
+            	/*
                 ++this.furnaceItemStacks[2].stackSize;
+                */
+                furnaceItemStacks[2].stackSize += var1.stackSize;
+                // END FCMOD
             }
 
             --this.furnaceItemStacks[0].stackSize;
@@ -315,6 +407,8 @@
      * Returns the number of ticks that the supplied fuel item will keep the furnace burning, or 0 if the item isn't
      * fuel
      */
+    // FCMOD: Removed and replaced
+    /*
     public static int getItemBurnTime(ItemStack par0ItemStack)
     {
         if (par0ItemStack == null)
@@ -344,13 +438,18 @@
             return var2 instanceof ItemTool && ((ItemTool)var2).getToolMaterialName().equals("WOOD") ? 200 : (var2 instanceof ItemSword && ((ItemSword)var2).getToolMaterialName().equals("WOOD") ? 200 : (var2 instanceof ItemHoe && ((ItemHoe)var2).getMaterialName().equals("WOOD") ? 200 : (var1 == Item.stick.itemID ? 100 : (var1 == Item.coal.itemID ? 1600 : (var1 == Item.bucketLava.itemID ? 20000 : (var1 == Block.sapling.blockID ? 100 : (var1 == Item.blazeRod.itemID ? 2400 : 0)))))));
         }
     }
+    */
+    // END FCMOD
 
     /**
      * Return true if item is a fuel source (getItemBurnTime() > 0).
      */
     public static boolean isItemFuel(ItemStack par0ItemStack)
     {
-        return getItemBurnTime(par0ItemStack) > 0;
+    	// FCMOD: Changed
+        //return getItemBurnTime(par0ItemStack) > 0;
+    	return par0ItemStack.getItem().GetFurnaceBurnTime( par0ItemStack.getItemDamage() ) > 0;
+    	// END FCMOD
     }
 
     /**
@@ -398,4 +497,33 @@
     {
         return par3 != 0 || par1 != 1 || par2ItemStack.itemID == Item.bucketEmpty.itemID;
     }
+
+    // FCMOD: Added
+    public static final int m_iDefaultCookTime = 400;
+    public static final int m_iBaseBurnTimeMultiplier = 2;
+    
+    protected int GetCookTimeForCurrentItem()
+    {
+    	int iCookTimeShift = 0;
+    	
+    	if ( furnaceItemStacks[0] != null )
+    	{
+    		iCookTimeShift = FurnaceRecipes.smelting().GetCookTimeBinaryShift( 
+    			furnaceItemStacks[0].getItem().itemID );    		
 }
+    	
+    	return m_iDefaultCookTime << iCookTimeShift;
+    }
+    
+    public int getItemBurnTime( ItemStack stack )
+    {
+        if ( stack != null )
+        {
+        	return stack.getItem().GetFurnaceBurnTime( stack.getItemDamage() ) * 
+        		m_iBaseBurnTimeMultiplier;            
+        }
+        
+        return 0;
+    }
+    // END FCMOD
+}
