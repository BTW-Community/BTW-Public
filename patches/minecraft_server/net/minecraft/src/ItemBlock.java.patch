--- a/minecraft_server/net/minecraft/src/ItemBlock.java
+++ b/minecraft_server/net/minecraft/src/ItemBlock.java
@@ -1,6 +1,9 @@
 package net.minecraft.src;
 
-public class ItemBlock extends Item
+//FCMOD: Changed
+//public class ItemBlock extends Item
+public class ItemBlock extends FCItemPlacesAsBlock
+//END FCMOD
 {
     /** The block ID of the Block associated with this ItemBlock */
     private int blockID;
@@ -23,6 +26,8 @@
      * Callback for item usage. If the item does something special on right clicking, he will have one of those. Return
      * True if something happen and false if it don't. This is for ITEMS, not BLOCKS
      */
+    // FCMOD: Removed and replaced in parent class
+    /*
     public boolean onItemUse(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, World par3World, int par4, int par5, int par6, int par7, float par8, float par9, float par10)
     {
         int var11 = par3World.getBlockId(par4, par5, par6);
@@ -101,6 +106,8 @@
             return false;
         }
     }
+    */
+    // END FCMOD
 
     /**
      * Returns the unlocalized name of this item. This version accepts an ItemStack so different stacks can have
@@ -118,4 +125,138 @@
     {
         return Block.blocksList[this.blockID].getUnlocalizedName();
     }
+    
+    // FCMOD: Added New
+    private boolean m_bHasOldNamePrefix = false;
+    
+    @Override
+    public float GetBuoyancy( int iItemDamage )
+    {
+    	return Block.blocksList[blockID].GetBuoyancy( iItemDamage );
 }
+    
+    @Override
+    public Item SetBuoyancy( float fBuoyancy )
+    {
+    	Block.blocksList[blockID].SetBuoyancy( fBuoyancy );
+    	
+    	return super.SetBuoyancy( fBuoyancy );
+    }
+    
+    @Override
+    public boolean IsPistonPackable( ItemStack stack )
+    {
+    	return Block.blocksList[blockID].IsPistonPackable( stack );
+    }
+    
+    @Override
+    public int GetRequiredItemCountToPistonPack( ItemStack stack )
+    {
+    	return Block.blocksList[blockID].GetRequiredItemCountToPistonPack( stack );
+    }
+    
+    @Override
+    public int GetResultingBlockIDOnPistonPack( ItemStack stack )
+    {
+    	return Block.blocksList[blockID].GetResultingBlockIDOnPistonPack( stack );
+    }
+    
+    @Override
+    public int GetResultingBlockMetadataOnPistonPack( ItemStack stack )
+    {
+    	return Block.blocksList[blockID].GetResultingBlockMetadataOnPistonPack( stack );
+    }
+
+    @Override
+    public int GetFurnaceBurnTime( int iItemDamage )
+    {
+    	return Block.blocksList[blockID].GetFurnaceBurnTime( iItemDamage );
+    }
+    
+    @Override
+    public Item SetFurnaceBurnTime( int iBurnTime )
+    {
+    	Block.blocksList[blockID].SetFurnaceBurnTime( iBurnTime );
+    	
+    	return super.SetFurnaceBurnTime( iBurnTime );
+    }
+    
+    @Override
+    public int GetHerbivoreFoodValue( int iItemDamage )
+    {
+    	return Block.blocksList[blockID].GetHerbivoreItemFoodValue( iItemDamage );
+    }
+    
+    @Override
+    public Item SetHerbivoreFoodValue( int iFoodValue )
+    {
+    	Block.blocksList[blockID].SetHerbivoreItemFoodValue( iFoodValue );
+    	
+    	return super.SetHerbivoreFoodValue( iFoodValue );
+    }
+    
+    @Override
+    public int GetChickenFoodValue( int iItemDamage )
+    {
+    	return Block.blocksList[blockID].GetChickenItemFoodValue( iItemDamage );
+    }
+    
+    @Override
+    public Item SetChickenFoodValue( int iFoodValue )
+    {
+    	Block.blocksList[blockID].SetChickenItemFoodValue( iFoodValue );
+    	
+    	return super.SetChickenFoodValue( iFoodValue );
+    }
+    
+    @Override
+    public int GetPigFoodValue( int iItemDamage )
+    {
+    	return Block.blocksList[blockID].GetPigItemFoodValue( iItemDamage );
+    }
+    
+    @Override
+    public Item SetPigFoodValue( int iFoodValue )
+    {
+    	Block.blocksList[blockID].SetPigItemFoodValue( iFoodValue );
+    	
+    	return super.SetPigFoodValue( iFoodValue );
+    }
+    
+    @Override
+    public boolean IsIncineratedInCrucible()
+    {
+    	return Block.blocksList[blockID].IsIncineratedInCrucible();
+    }
+    
+    @Override
+    public FCItemPlacesAsBlock SetAssociatedBlockID( int iBlockID )
+    {
+    	blockID = iBlockID;
+    	
+    	return super.SetAssociatedBlockID( iBlockID );
+    }
+    
+    @Override
+    public boolean CanItemPassIfFilter( ItemStack filteredItem )
+    {
+    	return Block.blocksList[blockID].CanItemPassIfFilter( filteredItem );
+    }
+    
+    @Override
+    public int GetFilterableProperties( ItemStack stack )
+    {
+    	return Block.blocksList[blockID].GetFilterableProperties( stack );
+    }
+    
+    @Override
+    public boolean CanTransformItemIfFilter( ItemStack filteredItem )
+    {
+    	return Block.blocksList[blockID].CanTransformItemIfFilter( filteredItem );
+    }
+    
+    //------------- Class Specific Methods ------------//
+    
+	//----------- Client Side Functionality -----------//
+    // END FCMOD
+}
