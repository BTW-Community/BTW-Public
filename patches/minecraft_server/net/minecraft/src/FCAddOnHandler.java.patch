--- /dev/null
+++ b/minecraft_server/net/minecraft/src/FCAddOnHandler.java
@@ -0,0 +1,294 @@
+// FCMOD
+
+package net.minecraft.src;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.FileHandler;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.logging.SimpleFormatter;
+
+public class FCAddOnHandler
+{
+	public static List<FCAddOn> m_ModList = new LinkedList();
+	public static boolean m_bModsInitialized = false;
+
+	public static final Logger m_Logger = Logger.getLogger("BetterThanWolves");
+
+	// Client version
+	//private static final File m_LogFile = new File(Minecraft.getMinecraftDir(), "BTWLog.txt");    
+	// Server version
+	private static final File m_LogFile = new File(new File("."), "BTWLog.txt");    
+
+	private static FileHandler m_LogFileHandler = null;
+
+	private static NetServerHandler netServerHandler;
+	private static ArrayList<String> ackCheckFails = new ArrayList<String>();
+	
+	public static Map<Class<? extends FCAddOn>, FCAddOnUtilsWorldData> addonWorldDataMap;
+
+	public static void AddMod(FCAddOn mod)
+	{
+		m_ModList.add(mod);
+	}
+
+	public static void InitializeMods()
+	{
+		if (!m_bModsInitialized)
+		{
+			InitializeLogger();
+
+			LogMessage("...Add-On Handler Initializing...");
+			
+			addonWorldDataMap = FCAddOnHandler.initWorldDataForAddon();
+
+			PreInitializeMods();
+			
+			loadModConfigs();
+
+			Iterator modIterator = m_ModList.iterator();
+
+			while (modIterator.hasNext())
+			{
+				FCAddOn mod = (FCAddOn)modIterator.next();
+
+				mod.Initialize();
+			}
+
+			PostInitializeMods();
+
+			m_bModsInitialized = true;
+
+			OnLanguageLoaded(StringTranslate.getInstance());
+
+			LogMessage("...Add-On Handler Initialization Complete...");
+		}
+	}
+
+	public static void InitializeLogger()
+	{
+		try
+		{
+			if ((m_LogFile.exists() || m_LogFile.createNewFile()) && m_LogFile.canWrite())
+			{
+				m_LogFileHandler = new FileHandler(m_LogFile.getPath());
+				m_LogFileHandler.setFormatter(new SimpleFormatter());
+				m_Logger.addHandler(m_LogFileHandler);
+
+				m_Logger.setLevel(Level.FINE);
+			}
+		}
+		catch (Throwable error)
+		{
+			throw new RuntimeException(error);
+		}
+	}
+
+	public static void LogMessage(String string)
+	{
+		System.out.println(string);
+
+		if (net.minecraft.server.MinecraftServer.getServer() != null)
+		{
+			// client
+			//net.minecraft.server.MinecraftServer.getServer().getLogAgent().logInfo(string);
+			// server
+			net.minecraft.server.MinecraftServer.getServer().getLogAgent().func_98233_a(string);
+		}
+
+		m_Logger.fine(string);
+	}
+
+	public static void LogWarning(String string)
+	{
+		System.out.println(string);
+
+		if (net.minecraft.server.MinecraftServer.getServer() != null)
+		{
+			// client
+			//net.minecraft.server.MinecraftServer.getServer().getLogAgent().logWarning(string);
+			// server
+			net.minecraft.server.MinecraftServer.getServer().getLogAgent().func_98236_b(string);
+		}
+
+		m_Logger.fine(string);
+	}
+
+	public static void PreInitializeMods()
+	{
+		Iterator modIterator = m_ModList.iterator();
+
+		while (modIterator.hasNext())
+		{
+			FCAddOn mod = (FCAddOn)modIterator.next();
+
+			mod.PreInitialize();
+		}
+	}
+
+	public static void PostInitializeMods()
+	{
+		Iterator modIterator = m_ModList.iterator();
+
+		while (modIterator.hasNext())
+		{
+			FCAddOn mod = (FCAddOn)modIterator.next();
+
+			mod.PostInitialize();
+		}
+	}
+
+	public static void OnLanguageLoaded(StringTranslate translator)
+	{
+		// only call on language loaded after mods have been initialized to prevent funkiness due to static instance variable of 
+		// StringTranslate creating ambiguous initialization order.
+
+		if (m_bModsInitialized)
+		{
+			Iterator modIterator = m_ModList.iterator();
+
+			while (modIterator.hasNext())
+			{
+				FCAddOn mod = (FCAddOn)modIterator.next();
+
+				mod.OnLanguageLoaded(translator);
+
+				String sPrefix = mod.GetLanguageFilePrefix();
+
+				if (sPrefix != null)
+				{
+					LogMessage("...Add-On Handler Loading Custom Language File With Prefix: " + sPrefix + "..." );
+
+					translator.LoadAddonLanguageExtension(sPrefix);
+				}
+			}	    	
+		}		
+	}
+
+	public static void ServerCustomPacketReceived(NetServerHandler handler, Packet250CustomPayload packet)
+	{
+		Iterator modIterator = m_ModList.iterator();
+
+		while (modIterator.hasNext())
+		{
+			FCAddOn mod = (FCAddOn)modIterator.next();
+
+			if (mod.ServerCustomPacketReceived(handler, packet))
+			{
+				return;
+			}    		
+		}    	
+	}
+
+
+	public static void serverPlayerConnectionInitialized(NetServerHandler serverHandler, EntityPlayerMP playerMP) {
+		netServerHandler = serverHandler;
+
+		for (Object mod : FCAddOnHandler.m_ModList) {
+			((FCAddOn) mod).serverPlayerConnectionInitialized(serverHandler, playerMP);
+			
+			if (((FCAddOn) mod).shouldVersionCheck)
+				((FCAddOn) mod).sendVersionCheckToClient(serverHandler, playerMP);
+		}
+	}
+
+	public static boolean getAwaitingLoginAck() {
+		for (Object mod : FCAddOnHandler.m_ModList) {
+			if (((FCAddOn) mod).getAwaitingLoginAck()) {
+				return true;
+			}
+		}
+
+		return false;
+	}
+
+	public static void incrementTicksSinceAckRequested() {
+		for (Object mod : FCAddOnHandler.m_ModList) {
+			((FCAddOn) mod).incrementTicksSinceAckRequested();
+		}
+	}
+
+	public static void handleAckCheck() {
+		for (Object mod : FCAddOnHandler.m_ModList) {
+			if (!((FCAddOn) mod).handleAckCheck()) {
+				ackCheckFails.add(((FCAddOn) mod).getName());
+			}
+		}
+
+		if (!ackCheckFails.isEmpty()) {
+			String message = "WARNING: Client missing the following addons, or very high latency connection: ";
+
+			for (int i = 0; i < ackCheckFails.size(); i++) {
+				if (i > 0)
+					message += ", ";
+				message += ackCheckFails.get(i);
+			}
+
+			FCUtilsWorld.SendPacketToPlayer(netServerHandler, new Packet3Chat(message));
+		}
+	}
+	
+	public static Map<Class<? extends FCAddOn>, FCAddOnUtilsWorldData> initWorldDataForAddon() {
+		Map<Class<? extends FCAddOn>, FCAddOnUtilsWorldData> worldDataMap = new HashMap();
+		
+		for (Object mod : FCAddOnHandler.m_ModList) {
+			FCAddOnUtilsWorldData worldData = ((FCAddOn) mod).createWorldData();
+			
+			if (worldData != null) {
+				worldDataMap.put(((FCAddOn) mod).getClass(), worldData);
+			}
+		}
+		
+		return worldDataMap;
+	}
+	
+	public static void loadModConfigs() {
+		for (Object mod : FCAddOnHandler.m_ModList) {
+			FCAddOn addon = (FCAddOn) mod;
+			
+			Map<String, String> addonConfigProperties = addon.loadConfigProperties();
+			
+			if (addonConfigProperties != null) {
+				addon.repopulateConfigFile(addonConfigProperties);
+				addon.handleConfigProperties(addonConfigProperties);
+			}
+		}
+	}
+	
+	public FCAddOnUtilsWorldData getWorldDataForMod(Class<? extends FCAddOn> mod) {
+		if (FCAddOnHandler.addonWorldDataMap.containsKey(mod))
+			return FCAddOnHandler.addonWorldDataMap.get(mod);
+		else
+			return null;
+	}
+
+	public void setWorldDataForMod(Class<? extends FCAddOn> mod, FCAddOnUtilsWorldData data) {
+		FCAddOnHandler.addonWorldDataMap.put(mod, data);
+	}
+	
+	public boolean isModInstalled(String name) {
+		for (FCAddOn mod : this.m_ModList) {
+			if (mod.getName().equals(name)) {
+				return true;
+			}
+		}
+		
+		return false;
+	}
+	
+	public FCAddOn getModByName(String name) {
+		for (FCAddOn mod : this.m_ModList) {
+			if (mod.getName().equals(name)) {
+				return mod;
+			}
+		}
+		
+		return null;
+	}
+}
\ No newline at end of file
