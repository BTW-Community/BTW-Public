--- a/minecraft_server/net/minecraft/src/BlockCrops.java
+++ b/minecraft_server/net/minecraft/src/BlockCrops.java
@@ -9,7 +9,10 @@
         super(par1);
         this.setTickRandomly(true);
         float var2 = 0.5F;
-        this.setBlockBounds(0.5F - var2, 0.0F, 0.5F - var2, 0.5F + var2, 0.25F, 0.5F + var2);
+        // FCMOD: Changed
+        //this.setBlockBounds(0.5F - var2, 0.0F, 0.5F - var2, 0.5F + var2, 0.25F, 0.5F + var2);
+        InitBlockBounds(0.5F - var2, 0.0F, 0.5F - var2, 0.5F + var2, 0.25F, 0.5F + var2);
+        //END FCMOD
         this.setCreativeTab((CreativeTabs)null);
         this.setHardness(0.0F);
         this.setStepSound(soundGrassFootstep);
@@ -20,14 +23,20 @@
      * Gets passed in the blockID of the block below and supposed to return true if its allowed to grow on the type of
      * blockID passed in. Args: blockID
      */
+    // FCMOD: Removed as deprecated
+    /*
     protected boolean canThisPlantGrowOnThisBlockID(int par1)
     {
         return par1 == Block.tilledField.blockID;
     }
+    */
+    // END FCMOD
 
     /**
      * Ticks the block if it's been scheduled
      */
+    // FCMOD: Removed and replaced
+    /*
     public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random)
     {
         super.updateTick(par1World, par2, par3, par4, par5Random);
@@ -48,6 +57,8 @@
             }
         }
     }
+    */
+    // END FCMOD
 
     /**
      * Apply bonemeal to the crops.
@@ -69,6 +80,8 @@
      * different sides that aren't opposing, and by adding growth for every crop next to this one (and for crop below
      * this one). Args: x, y, z
      */
+    // FCMOD: Removed as deprecated
+    /*
     private float getGrowthRate(World par1World, int par2, int par3, int par4)
     {
         float var5 = 1.0F;
@@ -117,6 +130,8 @@
 
         return var5;
     }
+    */
+    // END FCMOD
 
     /**
      * The type of render function that is called for this block
@@ -153,6 +168,8 @@
         {
             if (par5 >= 7)
             {
+            	// FCMOD: Change
+            	/*
                 int var8 = 3 + par7;
 
                 for (int var9 = 0; var9 < var8; ++var9)
@@ -162,6 +179,9 @@
                         this.dropBlockAsItem_do(par1World, par2, par3, par4, new ItemStack(this.getSeedItem(), 1, 0));
                     }
                 }
+                */
+            	DropSeeds( par1World, par2, par3, par4, par5, par6, par7);
+            	// END FCMOD
             }
         }
     }
@@ -169,10 +189,14 @@
     /**
      * Returns the ID of the items to drop on destruction.
      */
+    // FCMOD: Removed and replaced
+    /*
     public int idDropped(int par1, Random par2Random, int par3)
     {
         return par1 == 7 ? this.getCropItem() : this.getSeedItem();
     }
+    */
+    // END FCMOD
 
     /**
      * Returns the quantity of items to drop on block destruction.
@@ -181,4 +205,147 @@
     {
         return 1;
     }
+    
+    // FCMOD: Added New
+    @Override
+    public int idDropped( int iMetadata, Random random, int iFortuneModifier )
+    {
+    	if ( iMetadata == 7 )
+    	{
+    		return getCropItem();
 }
+    	
+        return 0;
+    }
+    
+    @Override
+    public boolean CanBeGrazedOn( IBlockAccess blockAccess, int i, int j, int k, 
+    	EntityAnimal animal )
+    {
+		return true;
+    }
+    
+    @Override
+    public void OnGrazed( World world, int i, int j, int k, EntityAnimal animal )
+    {
+    	// drop the block as an item so that animals can get the base graze value + eat
+    	// any tasties that drop
+    	
+        dropBlockAsItem( world, i, j, k, world.getBlockMetadata( i, j, k ), 0 );
+        
+        super.OnGrazed( world, i, j, k, animal );    
+    }
+    
+    @Override
+    public void updateTick( World world, int i, int j, int k, Random rand )
+    {
+        super.updateTick( world, i, j, k, rand );
+
+    	// make sure parent update didn't destroy the block, and prevent crops growing in the end
+    	// note that CanGrowOnBlock() has already been confirmed in parent method    	
+    	
+        if ( world.provider.dimensionId != 1 && 
+        	world.getBlockId( i, j, k ) == blockID )
+        {
+        	AttemptToGrow( world, i, j, k, rand );
+        }
+    }
+
+    @Override
+    protected boolean CanGrowOnBlock( World world, int i, int j, int k )
+    {
+    	Block blockOn = Block.blocksList[world.getBlockId( i, j, k )];
+    	
+    	return blockOn != null && blockOn.CanDomesticatedCropsGrowOnBlock( world, i, j, k );
+    }
+    
+	@Override
+	public boolean CanWeedsGrowInBlock( IBlockAccess blockAccess, int i, int j, int k )
+	{
+		return true;
+	}
+	
+    //------------- Class Specific Methods ------------//
+    
+    protected void AttemptToGrow( World world, int i, int j, int k, Random rand )
+    {
+    	if ( GetWeedsGrowthLevel( world, i, j, k ) == 0 && 
+    		GetGrowthLevel( world, i, j, k ) < 7 && 
+	    	world.getBlockLightValue( i, j + 1, k ) >= 9 )
+	    {
+	        Block blockBelow = Block.blocksList[world.getBlockId( i, j - 1, k )];
+	        
+	        if ( blockBelow != null && 
+	        	blockBelow.IsBlockHydratedForPlantGrowthOn( world, i, j - 1, k ) )
+	        {
+	    		float fGrowthChance = GetBaseGrowthChance( world, i, j, k ) *
+	    			blockBelow.GetPlantGrowthOnMultiplier( world, i, j - 1, k, this );
+	    		
+	            if ( rand.nextFloat() <= fGrowthChance )
+	            {
+	            	IncrementGrowthLevel( world, i, j, k );
+	            }
+	        }
+	    }
+    }
+    
+    public void DropSeeds( World world, int i, int j, int k, int iMetadata, 
+    	float fChance, int iFortuneModifier )
+    {
+        dropBlockAsItem_do(world, i, j, k, new ItemStack( getSeedItem(), 1, 0 ) );
+        
+        if ( world.rand.nextInt( 16 ) - iFortuneModifier < 4 )
+        {
+            dropBlockAsItem_do(world, i, j, k, new ItemStack( getSeedItem(), 1, 0 ) );
+        }
+    }
+    
+    public float GetBaseGrowthChance( World world, int i, int j, int k )
+    {
+    	return 0.05F;
+    }
+    
+    protected void IncrementGrowthLevel( World world, int i, int j, int k )
+    {
+    	int iGrowthLevel = GetGrowthLevel( world, i, j, k ) + 1;
+    	
+        SetGrowthLevel( world, i, j, k, iGrowthLevel );
+        
+        if ( iGrowthLevel == 7 )
+        {
+        	Block blockBelow = Block.blocksList[world.getBlockId( i, j - 1, k )];
+        	
+        	if ( blockBelow != null )
+        	{
+        		blockBelow.NotifyOfFullStagePlantGrowthOn( world, i, j - 1, k, this );
+        	}
+        }
+    }
+    
+    protected int GetGrowthLevel( IBlockAccess blockAccess, int i, int j, int k )
+    {
+    	return GetGrowthLevel( blockAccess.getBlockMetadata( i, j, k ) );
+    }
+    
+    protected int GetGrowthLevel( int iMetadata )
+    {
+    	return iMetadata & 7;
+    }
+    
+    protected void SetGrowthLevel( World world, int i, int j, int k, int iLevel )
+    {
+    	int iMetadata = world.getBlockMetadata( i, j, k ) & (~7); // filter out old level   	
+    	
+    	world.setBlockMetadataWithNotify( i, j, k, iMetadata | iLevel );
+    }
+    
+    protected void SetGrowthLevelNoNotify( World world, int i, int j, int k, int iLevel )
+    {
+    	int iMetadata = world.getBlockMetadata( i, j, k ) & (~7); // filter out old level   	
+    	
+    	world.setBlockMetadata( i, j, k, iMetadata | iLevel );
+    }
+    
+	//----------- Client Side Functionality -----------//
+    // END FCMOD
+}
