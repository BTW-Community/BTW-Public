--- a/minecraft_server/net/minecraft/src/CraftingManager.java
+++ b/minecraft_server/net/minecraft/src/CraftingManager.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import java.lang.reflect.Constructor;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -32,7 +33,9 @@
         (new RecipesDyes()).addRecipes(this);
         this.recipes.add(new RecipesArmorDyes());
         this.recipes.add(new RecipesMapCloning());
-        this.recipes.add(new RecipesMapExtending());
+        // FCMOD: Removed
+        //this.recipes.add(new RecipesMapExtending());
+        // END FCMOD
         this.recipes.add(new RecipeFireworks());
         this.addRecipe(new ItemStack(Item.paper, 3), new Object[] {"###", '#', Item.reed});
         this.addShapelessRecipe(new ItemStack(Item.book, 1), new Object[] {Item.paper, Item.paper, Item.paper, Item.leather});
@@ -179,25 +182,25 @@
         for (var12 = new HashMap(); var4 < par2ArrayOfObj.length; var4 += 2)
         {
             Character var13 = (Character)par2ArrayOfObj[var4];
-            ItemStack var15 = null;
+            ItemStack var14 = null;
 
             if (par2ArrayOfObj[var4 + 1] instanceof Item)
             {
-                var15 = new ItemStack((Item)par2ArrayOfObj[var4 + 1]);
+                var14 = new ItemStack((Item)par2ArrayOfObj[var4 + 1]);
             }
             else if (par2ArrayOfObj[var4 + 1] instanceof Block)
             {
-                var15 = new ItemStack((Block)par2ArrayOfObj[var4 + 1], 1, 32767);
+                var14 = new ItemStack((Block)par2ArrayOfObj[var4 + 1], 1, 32767);
             }
             else if (par2ArrayOfObj[var4 + 1] instanceof ItemStack)
             {
-                var15 = (ItemStack)par2ArrayOfObj[var4 + 1];
+                var14 = (ItemStack)par2ArrayOfObj[var4 + 1];
             }
 
-            var12.put(var13, var15);
+            var12.put(var13, var14);
         }
 
-        ItemStack[] var14 = new ItemStack[var5 * var6];
+        ItemStack[] var15 = new ItemStack[var5 * var6];
 
         for (int var16 = 0; var16 < var5 * var6; ++var16)
         {
@@ -205,21 +208,28 @@
 
             if (var12.containsKey(Character.valueOf(var10)))
             {
-                var14[var16] = ((ItemStack)var12.get(Character.valueOf(var10))).copy();
+                var15[var16] = ((ItemStack)var12.get(Character.valueOf(var10))).copy();
             }
             else
             {
-                var14[var16] = null;
+                var15[var16] = null;
             }
         }
 
-        ShapedRecipes var17 = new ShapedRecipes(var5, var6, var14, par1ItemStack);
+        ShapedRecipes var17 = new ShapedRecipes(var5, var6, var15, par1ItemStack);
         this.recipes.add(var17);
         return var17;
     }
 
     void addShapelessRecipe(ItemStack par1ItemStack, Object ... par2ArrayOfObj)
+    // FCMOD: Added
     {
+    	AddShapelessRecipe( par1ItemStack, par2ArrayOfObj );
+    }
+    
+    ShapelessRecipes AddShapelessRecipe(ItemStack par1ItemStack, Object ... par2ArrayOfObj)
+    // END FCMOD
+    {
         ArrayList var3 = new ArrayList();
         Object[] var4 = par2ArrayOfObj;
         int var5 = par2ArrayOfObj.length;
@@ -247,9 +257,18 @@
             }
         }
 
-        this.recipes.add(new ShapelessRecipes(par1ItemStack, var3));
+        // FCMOD: Changed        
+        //this.recipes.add(new ShapelessRecipes(par1ItemStack, var3));
+        ShapelessRecipes recipe = new ShapelessRecipes( par1ItemStack, var3 );
+        
+        recipes.add( recipe );
+        
+        return recipe;
+        // END FCMOD
     }
 
+    // FCMOD: Removed and replaced
+    /*
     public ItemStack findMatchingRecipe(InventoryCrafting par1InventoryCrafting, World par2World)
     {
         int var3 = 0;
@@ -307,6 +326,8 @@
             return null;
         }
     }
+    */
+    // END FCMOD
 
     /**
      * returns the List<> of all recipes
@@ -315,4 +336,278 @@
     {
         return this.recipes;
     }
+    
+    // FCMOD: Added
+    public ItemStack findMatchingRecipe( InventoryCrafting inventory, World world )
+    {
+    	IRecipe recipe = FindMatchingRecipe( inventory, world );
+    	ItemStack outputStack = null;
+    	
+    	if ( recipe != null )
+    	{
+    		outputStack = recipe.getCraftingResult( inventory );
 }
+    	
+    	return outputStack;
+    }
+    
+    public IRecipe FindMatchingRecipe( InventoryCrafting inventory, World world )
+    {
+        for ( int iTempIndex = 0; iTempIndex < this.recipes.size(); ++iTempIndex)
+        {
+            IRecipe tempRecipe = (IRecipe)this.recipes.get(iTempIndex);
+
+            if ( tempRecipe.matches( inventory, world ) )
+            {
+                return tempRecipe;
+            }
+        }
+
+        return null;
+    }
+    
+    public boolean RemoveRecipe( ItemStack itemStack, Object recipeArray[] )
+    {
+    	ShapedRecipes recipe = CreateRecipe( itemStack, recipeArray );
+    	
+    	int iMatchingIndex = GetMatchingRecipeIndex( recipe );
+    	
+    	if ( iMatchingIndex >= 0 )
+    	{
+    		recipes.remove( iMatchingIndex );
+    		
+    		return true;
+    	}
+    	
+    	return false;
+    }
+    
+    public boolean RemoveShapelessRecipe( ItemStack itemStack, Object recipeArray[] )
+    {
+    	ShapelessRecipes recipe = CreateShapelessRecipe( itemStack, recipeArray );
+    	
+    	int iMatchingIndex = GetMatchingRecipeIndex( recipe );
+    	
+    	if ( iMatchingIndex >= 0 )
+    	{
+    		recipes.remove( iMatchingIndex );
+    		
+    		return true;
+    	}
+    	
+    	return false;
+    }
+    
+    private int GetMatchingRecipeIndex( IRecipe recipe )
+    {
+    	int iMatchingRecipeIndex = -1;
+    	
+        for ( int iIndex = 0; iIndex < recipes.size(); iIndex++ )
+        {
+            IRecipe tempRecipe = (IRecipe)(recipes.get( iIndex ));
+
+            if ( tempRecipe.matches( recipe ) )
+            {
+                return iIndex;
+            }            
+        }
+
+    	return -1;
+    }
+    
+    private ShapedRecipes CreateRecipe( ItemStack par1ItemStack, Object par2ArrayOfObj[] )
+    {
+        String s = "";
+        int i = 0;
+        int j = 0;
+        int k = 0;
+
+        if (par2ArrayOfObj[i] instanceof String[])
+        {
+            String as[] = (String[])par2ArrayOfObj[i++];
+            String as1[] = as;
+            int l = as1.length;
+
+            for (int j1 = 0; j1 < l; j1++)
+            {
+                String s2 = as1[j1];
+                String s3 = s2;
+                k++;
+                j = s3.length();
+                s = (new StringBuilder()).append(s).append(s3).toString();
+            }
+        }
+        else
+        {
+            while (par2ArrayOfObj[i] instanceof String)
+            {
+                String s1 = (String)par2ArrayOfObj[i++];
+                k++;
+                j = s1.length();
+                s = (new StringBuilder()).append(s).append(s1).toString();
+            }
+        }
+
+        HashMap hashmap = new HashMap();
+
+        for (; i < par2ArrayOfObj.length; i += 2)
+        {
+            Character character = (Character)par2ArrayOfObj[i];
+            ItemStack itemstack = null;
+
+            if (par2ArrayOfObj[i + 1] instanceof Item)
+            {
+                itemstack = new ItemStack((Item)par2ArrayOfObj[i + 1]);
+            }
+            else if (par2ArrayOfObj[i + 1] instanceof Block)
+            {
+                itemstack = new ItemStack((Block)par2ArrayOfObj[i + 1], 1, FCUtilsInventory.m_iIgnoreMetadata);
+            }
+            else if (par2ArrayOfObj[i + 1] instanceof ItemStack)
+            {
+                itemstack = (ItemStack)par2ArrayOfObj[i + 1];
+            }
+
+            hashmap.put(character, itemstack);
+        }
+
+        ItemStack aitemstack[] = new ItemStack[j * k];
+
+        for (int i1 = 0; i1 < j * k; i1++)
+        {
+            char c = s.charAt(i1);
+
+            if (hashmap.containsKey(Character.valueOf(c)))
+            {
+                aitemstack[i1] = ((ItemStack)hashmap.get(Character.valueOf(c))).copy();
+            }
+            else
+            {
+                aitemstack[i1] = null;
+            }
+        }
+
+        return new ShapedRecipes(j, k, aitemstack, par1ItemStack );
+    }
+    
+    private ShapelessRecipes CreateShapelessRecipe(ItemStack par1ItemStack, Object par2ArrayOfObj[])
+    {
+        ArrayList arraylist = new ArrayList();
+        Object aobj[] = par2ArrayOfObj;
+        int i = aobj.length;
+
+        for (int j = 0; j < i; j++)
+        {
+            Object obj = aobj[j];
+
+            if (obj instanceof ItemStack)
+            {
+                arraylist.add(((ItemStack)obj).copy());
+                continue;
+            }
+
+            if (obj instanceof Item)
+            {
+                arraylist.add(new ItemStack((Item)obj));
+                continue;
+            }
+
+            if (obj instanceof Block)
+            {
+                arraylist.add(new ItemStack((Block)obj));
+            }
+            else
+            {
+                throw new RuntimeException("Invalid shapeless recipy!");
+            }
+        }
+
+        return new ShapelessRecipes( par1ItemStack, arraylist );
+    }
+    
+    ShapedRecipes AddShapedRecipeWithCustomClass( Class<? extends ShapedRecipes> recipeClass, ItemStack par1ItemStack, Object ... par2ArrayOfObj )
+    {
+        String var3 = "";
+        int var4 = 0;
+        int var5 = 0;
+        int var6 = 0;
+
+        if (par2ArrayOfObj[var4] instanceof String[])
+        {
+            String[] var7 = (String[])((String[])par2ArrayOfObj[var4++]);
+
+            for (int var8 = 0; var8 < var7.length; ++var8)
+            {
+                String var9 = var7[var8];
+                ++var6;
+                var5 = var9.length();
+                var3 = var3 + var9;
+            }
+        }
+        else
+        {
+            while (par2ArrayOfObj[var4] instanceof String)
+            {
+                String var11 = (String)par2ArrayOfObj[var4++];
+                ++var6;
+                var5 = var11.length();
+                var3 = var3 + var11;
+            }
+        }
+
+        HashMap var12;
+
+        for (var12 = new HashMap(); var4 < par2ArrayOfObj.length; var4 += 2)
+        {
+            Character var13 = (Character)par2ArrayOfObj[var4];
+            ItemStack var14 = null;
+
+            if (par2ArrayOfObj[var4 + 1] instanceof Item)
+            {
+                var14 = new ItemStack((Item)par2ArrayOfObj[var4 + 1]);
+            }
+            else if (par2ArrayOfObj[var4 + 1] instanceof Block)
+            {
+                var14 = new ItemStack((Block)par2ArrayOfObj[var4 + 1], 1, 32767);
+            }
+            else if (par2ArrayOfObj[var4 + 1] instanceof ItemStack)
+            {
+                var14 = (ItemStack)par2ArrayOfObj[var4 + 1];
+            }
+
+            var12.put(var13, var14);
+        }
+
+        ItemStack[] var15 = new ItemStack[var5 * var6];
+
+        for (int var16 = 0; var16 < var5 * var6; ++var16)
+        {
+            char var10 = var3.charAt(var16);
+
+            if (var12.containsKey(Character.valueOf(var10)))
+            {
+                var15[var16] = ((ItemStack)var12.get(Character.valueOf(var10))).copy();
+            }
+            else
+            {
+                var15[var16] = null;
+            }
+        }
+
+        try
+        {
+	        Constructor recipeConstructor = recipeClass.getDeclaredConstructor( new Class[] { int.class, int.class, ItemStack[].class, ItemStack.class } );
+	        
+	        ShapedRecipes recipe = (ShapedRecipes)( recipeConstructor.newInstance( var5, var6, var15, par1ItemStack) );
+	        
+	        recipes.add( recipe );
+	        
+	        return recipe;
+        }
+        catch( Exception e ) 
+        {
+	        throw new RuntimeException( "Haha...noob" );
+        }            
+    }
+    // END FCMOD   
+}
