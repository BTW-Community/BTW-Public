--- a/minecraft_server/net/minecraft/src/Material.java
+++ b/minecraft_server/net/minecraft/src/Material.java
@@ -5,36 +5,68 @@
     public static final Material air = new MaterialTransparent(MapColor.airColor);
 
     /** The material used by BlockGrass. */
-    public static final Material grass = new Material(MapColor.grassColor);
-    public static final Material ground = new Material(MapColor.dirtColor);
-    public static final Material wood = (new Material(MapColor.woodColor)).setBurning();
+    // FCMOD: Changed
+    //public static final Material grass = new Material(MapColor.grassColor);
+    //public static final Material ground = new Material(MapColor.dirtColor);
+    //public static final Material wood = (new Material(MapColor.woodColor)).setBurning();
+    public static final Material grass = (new Material(MapColor.grassColor)).setRequiresTool();
+    public static final Material ground = (new Material(MapColor.dirtColor)).setRequiresTool();
+    public static final Material wood = (new Material(MapColor.woodColor)).setBurning().SetMobsCantSpawnOn().SetAxesEfficientOn();
+    // END FCMOD
     public static final Material rock = (new Material(MapColor.stoneColor)).setRequiresTool();
+    // FCMOD: Changed
+    //public static final Material iron = (new Material(MapColor.ironColor)).setRequiresTool();
+    //public static final Material anvil = (new Material(MapColor.ironColor)).setRequiresTool().setImmovableMobility();
     public static final Material iron = (new Material(MapColor.ironColor)).setRequiresTool();
     public static final Material anvil = (new Material(MapColor.ironColor)).setRequiresTool().setImmovableMobility();
+    // END FCMOD
     public static final Material water = (new MaterialLiquid(MapColor.waterColor)).setNoPushMobility();
     public static final Material lava = (new MaterialLiquid(MapColor.tntColor)).setNoPushMobility();
-    public static final Material leaves = (new Material(MapColor.foliageColor)).setBurning().setTranslucent().setNoPushMobility();
-    public static final Material plants = (new MaterialLogic(MapColor.foliageColor)).setNoPushMobility();
-    public static final Material vine = (new MaterialLogic(MapColor.foliageColor)).setBurning().setNoPushMobility().setReplaceable();
+    // FCMOD: Changed
+    //public static final Material leaves = (new Material(MapColor.foliageColor)).setBurning().setTranslucent().setNoPushMobility();
+    //public static final Material plants = (new MaterialLogic(MapColor.foliageColor)).setNoPushMobility();
+    //public static final Material vine = (new MaterialLogic(MapColor.foliageColor)).setBurning().setNoPushMobility().setReplaceable();
+    public static final Material leaves = (new Material(MapColor.foliageColor)).setBurning().setTranslucent().setNoPushMobility().SetAxesEfficientOn().SetAxesTreatAsVegetation();
+    public static final Material plants = (new MaterialLogic(MapColor.foliageColor)).setNoPushMobility().SetAxesEfficientOn().SetAxesTreatAsVegetation();
+    public static final Material vine = (new MaterialLogic(MapColor.foliageColor)).setBurning().setNoPushMobility().setReplaceable().SetAxesEfficientOn().SetAxesTreatAsVegetation();
+    // END FCMOD
     public static final Material sponge = new Material(MapColor.clothColor);
-    public static final Material cloth = (new Material(MapColor.clothColor)).setBurning();
+    // FCMOD: Changed
+    //public static final Material cloth = (new Material(MapColor.clothColor)).setBurning();
+    public static final Material cloth = (new Material(MapColor.clothColor)).setBurning().SetAxesEfficientOn();
+    // END FCMOD
     public static final Material fire = (new MaterialTransparent(MapColor.airColor)).setNoPushMobility();
-    public static final Material sand = new Material(MapColor.sandColor);
+    // FCMOD: Changed
+    //public static final Material sand = new Material(MapColor.sandColor);
+    public static final Material sand = (new Material(MapColor.sandColor)).setRequiresTool();
+    // END FCMOD
     public static final Material circuits = (new MaterialLogic(MapColor.airColor)).setNoPushMobility();
+    // FCMOD: Changed
+    //public static final Material glass = (new Material(MapColor.airColor)).setTranslucent().setAlwaysHarvested();
     public static final Material glass = (new Material(MapColor.airColor)).setTranslucent().setAlwaysHarvested();
+    // END FCMOD
     public static final Material redstoneLight = (new Material(MapColor.airColor)).setAlwaysHarvested();
+    // FCMOD: Changed
+    //public static final Material tnt = (new Material(MapColor.tntColor)).setBurning().setTranslucent();
     public static final Material tnt = (new Material(MapColor.tntColor)).setBurning().setTranslucent();
+    // END FCMOD
     public static final Material coral = (new Material(MapColor.foliageColor)).setNoPushMobility();
     public static final Material ice = (new Material(MapColor.iceColor)).setTranslucent().setAlwaysHarvested();
     public static final Material snow = (new MaterialLogic(MapColor.snowColor)).setReplaceable().setTranslucent().setRequiresTool().setNoPushMobility();
 
     /** The material for crafted snow. */
     public static final Material craftedSnow = (new Material(MapColor.snowColor)).setRequiresTool();
-    public static final Material cactus = (new Material(MapColor.foliageColor)).setTranslucent().setNoPushMobility();
+    // FCMOD: Changed
+    //public static final Material cactus = (new Material(MapColor.foliageColor)).setTranslucent().setNoPushMobility();
+    public static final Material cactus = (new Material(MapColor.foliageColor)).setTranslucent().setNoPushMobility().SetMobsCantSpawnOn();    
+    // END FCMOD
     public static final Material clay = new Material(MapColor.clayColor);
 
     /** pumpkin */
-    public static final Material pumpkin = (new Material(MapColor.foliageColor)).setNoPushMobility();
+    // FCMOD: Changed
+    //public static final Material pumpkin = (new Material(MapColor.foliageColor)).setNoPushMobility();
+    public static final Material pumpkin = (new Material(MapColor.foliageColor)).setNoPushMobility().SetAxesEfficientOn();
+    // END FCMOD
     public static final Material dragonEgg = (new Material(MapColor.foliageColor)).setNoPushMobility();
 
     /** Material used for portals */
@@ -113,7 +145,10 @@
     /**
      * Marks the material as translucent
      */
-    private Material setTranslucent()
+    // FCMOD: Changed
+    //private Material setTranslucent()
+    protected Material setTranslucent()
+    // END FCMOD
     {
         this.isTranslucent = true;
         return this;
@@ -221,4 +256,63 @@
     {
         return this.field_85159_M;
     }
+    
+    // FCMOD: Added New
+    private boolean m_bMobsCanSpawnOn = true;
+    private boolean m_bNetherMobsCanSpawnOn = false;
+    private boolean m_bAxesEfficientOn = false;
+    private boolean m_bAxesTreatAsVegetation = false;
+    
+    public boolean GetMobsCanSpawnOn( int iDimension )
+    {
+    	if ( iDimension == -1 )
+    	{
+    		return m_bNetherMobsCanSpawnOn;
 }
+    	
+    	return m_bMobsCanSpawnOn;
+    }
+    
+    public Material SetMobsCantSpawnOn()
+    {
+    	m_bMobsCanSpawnOn = false;
+    	
+    	return this;
+    }
+    
+    public Material SetNetherMobsCanSpawnOn()
+    {
+    	m_bNetherMobsCanSpawnOn = true;
+    	
+    	return this;
+    }
+    
+    public boolean GetAxesEfficientOn()
+    {
+    	return m_bAxesEfficientOn;
+    }
+    
+    public Material SetAxesEfficientOn()
+    {
+    	m_bAxesEfficientOn = true;
+    	
+    	return this;
+    }
+    
+    /**
+     * If true, this material doesn't damage axes or consume hunger if the 
+     * harvesting axe is of sufficient quality 
+     */
+    public boolean GetAxesTreatAsVegetation()
+    {
+    	return m_bAxesTreatAsVegetation;    	
+    }
+    
+    public Material SetAxesTreatAsVegetation()
+    {
+    	m_bAxesTreatAsVegetation = true;
+    	
+    	return this;
+    }
+    // END FCMOD
+}
