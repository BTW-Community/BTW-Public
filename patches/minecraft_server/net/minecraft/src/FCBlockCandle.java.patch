--- /dev/null
+++ b/minecraft_server/net/minecraft/src/FCBlockCandle.java
@@ -0,0 +1,219 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class FCBlockCandle extends Block {
+	private int metaDropped;
+
+	protected FCBlockCandle(int id, int metaDropped, String name) {
+		super(id, FCBetterThanWolves.fcMaterialCandle);
+
+		setHardness(0F);
+		SetPicksEffectiveOn(true);
+		SetAxesEffectiveOn(true);
+
+		setLightValue(1F);
+
+		setStepSound(soundStoneFootstep);
+
+		setUnlocalizedName(name);
+
+		this.metaDropped = metaDropped;
+	}
+
+	@Override
+	public int idDropped(int par1, Random rand, int par3) {
+		return FCBetterThanWolves.fcItemCandle.itemID;
+	}
+
+	@Override
+	public int damageDropped(int meta) {
+		return this.metaDropped;
+	}
+
+	@Override
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	@Override
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+    
+    @Override
+    public boolean canPlaceBlockAt(World world, int x, int y, int z) {
+		int blockBelowID = world.getBlockId(x, y - 1, z);
+		int blockBelowMetadata = world.getBlockMetadata(x, y - 1, z) ;
+		
+		if (blockBelowID == FCBetterThanWolves.fcAestheticNonOpaque.blockID && blockBelowMetadata == FCBlockAestheticNonOpaque.m_iSubtypeLightningRod) {
+			return true;
+		}
+
+		return FCUtilsWorld.DoesBlockHaveSmallCenterHardpointToFacing(world, x, y - 1, z, 1, true);
+    }
+	
+	@Override
+    public void onNeighborBlockChange(World world, int x, int y, int z, int neighborBlockID) {
+    	// pop the block off if it no longer has a valid anchor point
+		if (!canPlaceBlockAt(world, x, y, z)) {
+            dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z), 0);
+            world.setBlockWithNotify(x, y, z, 0);
+		}
+    }
+	
+    @Override
+	public boolean IsBlockRestingOnThatBelow(IBlockAccess blockAccess, int x, int y, int z) {
+        return true;
+	}
+    
+	@Override
+	public void OnNeighborDisrupted(World world, int x, int y, int z, int toFacing) {
+		if (toFacing == 0) {
+            dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z), 0);
+            world.setBlockWithNotify(x, y, z, 0);
+		}
+	}
+
+    @Override
+	public boolean GetPreventsFluidFlow(World world, int x, int y, int z, Block fluidBlock) {
+    	return false;
+	}
+
+	@Override
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World world, int x, int y, int z) {
+		return null;
+	}
+	
+	@Override
+    public AxisAlignedBB GetBlockBoundsFromPoolBasedOnState(IBlockAccess blockAccess, int x, int y, int z) {
+		int candleCount = this.getCandleCount(blockAccess, x, y, z);
+		
+		switch (candleCount) {
+		case 1:
+			return AxisAlignedBB.getAABBPool().getAABB(7/16F, 0, 7/16F, 9/16F, 7/16F, 9/16F);
+		case 2:
+			return AxisAlignedBB.getAABBPool().getAABB(5/16F, 0, 6/16F, 11/16F, 7/16F, 9/16F);
+		case 3:
+			return AxisAlignedBB.getAABBPool().getAABB(6/16F, 0, 6/16F, 11/16F, 7/16F, 11/16F);
+		case 4:
+			return AxisAlignedBB.getAABBPool().getAABB(5/16F, 0, 5/16F, 11/16F, 7/16F, 10/16F);
+		}
+		
+		return AxisAlignedBB.getAABBPool().getAABB(0, 0, 0, 1, 1, 1);
+	}
+
+	@Override
+	public int getLightValue(IBlockAccess blockAccess, int x, int y, int z) {
+		if (isLit(blockAccess, x, y, z)) {
+			int candleCount = this.getCandleCount(blockAccess, x, y, z);
+
+			return (int) (lightValue[this.blockID] * ((float) candleCount / 4));
+		} else {
+			return 0;
+		}
+	}
+    
+    @Override
+    public void dropBlockAsItemWithChance(World world, int x, int y, int z, int metadata, float chance, int fortuneModifier) {
+        if (!world.isRemote) {
+    		this.DropItemsIndividualy(world, x, y, z, 
+    				this.idDropped(metadata, world.rand, 0), 
+    				this.getCandleCount(world, x, y, z), 
+    				this.damageDropped(metadata), 1);
+        }
+    }
+
+	@Override
+	public boolean CanConvertBlock(ItemStack stack, World world, int x, int y, int z) {
+		return true;
+	}
+
+	@Override
+	public boolean ConvertBlock(ItemStack stack, World world, int x, int y, int z, int fromSide) {
+		int candleCount = this.getCandleCount(world, x, y, z);
+		int metadata = world.getBlockMetadata(x, y, z);
+		
+		this.setCandleCount(world, x, y, z, candleCount - 1);
+		this.DropItemsIndividualy(world, x, y, z, this.idDropped(metadata, world.rand, 0), 1, this.damageDropped(metadata), 1);
+
+		return true;
+	}
+
+	@Override
+	public boolean GetCanBeSetOnFireDirectly(IBlockAccess blockAccess, int x, int y, int z) {
+		return !this.isLit(blockAccess, x, y, z);
+	}
+
+	@Override
+	public boolean SetOnFireDirectly(World world, int x, int y, int z) {
+		if (!this.isLit(world, x, y, z)) {
+			this.setLit(world, x, y, z, true);
+			return true;
+		}
+		
+		return false;
+	}
+
+	@Override
+	public boolean GetCanBlockLightItemOnFire(IBlockAccess blockAccess, int x, int y, int z) {
+		return isLit(blockAccess, x, y, z);
+	}
+
+	// ------ Class specific methods ------//
+
+	public int getCandleCount(IBlockAccess blockAccess, int x, int y, int z) {
+		int meta = blockAccess.getBlockMetadata(x, y, z);
+		return (meta & 3) + 1;
+	}
+
+	public void setCandleCount(World world, int x, int y, int z, int count) {
+		if (count == 0) {
+			world.setBlockWithNotify(x, y, z, 0);
+			return;
+		}
+
+		if (count > 4) {
+			Exception e = new IllegalArgumentException("Cannot set candle count higher than 4");
+			e.printStackTrace();
+
+			count = 4;
+		}
+
+		int meta = world.getBlockMetadata(x, y, z);
+		int newMeta = meta & 4;
+
+		newMeta += count - 1;
+
+		world.setBlockMetadataWithNotify(x, y, z, newMeta);
+	}
+
+	public boolean isLit(IBlockAccess blockAccess, int x, int y, int z) {
+		return (blockAccess.getBlockMetadata(x, y, z) >> 2) == 1;
+	}
+
+	public void setLit(World world, int x, int y, int z, boolean isLit) {
+		int meta = world.getBlockMetadata(x, y, z);
+		int newMeta;
+
+		if (isLit) {
+			newMeta = meta | 4;
+		} else {
+			newMeta = meta & 3;
+		}
+
+		world.setBlockMetadata(x, y, z, newMeta);
+	}
+	
+	public int setLit(int meta, boolean isLit) {
+		int newMeta;
+		
+		if (isLit) {
+			newMeta = meta | 4;
+		} else {
+			newMeta = meta & 3;
+		}
+		
+		return newMeta;
+	}
+}
\ No newline at end of file
